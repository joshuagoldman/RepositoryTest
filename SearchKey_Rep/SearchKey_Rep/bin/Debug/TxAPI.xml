<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TxAPI</name>
    </assembly>
    <members>
        <member name="M:Idefix.TxApi.Configuration.ErrorMessageBuilder.UnknownClass(System.String,System.String)">
            <summary>
            Error message is built when TxApi can't find a class that was specified
            by the user.
            </summary>
            <param name="FilePath">path to file that was specified in the xml file</param>
            <param name="ClassName">name of class that was specified in the xml file</param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.ErrorMessageBuilder.InterfaceNotImplemented(System.String)">
            <summary>
            Error message is built when TxApi finds a reference to an interface that 
            has been specified but is yet to be implemented.
            </summary>
            <param name="InterfaceName">name of interface that was specified in the xml file</param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.ErrorMessageBuilder.UnknownInterface(System.String)">
            <summary>
            Error message is built when TxApi finds a reference to a interface that is no part of
            the ITxApi interfaces.
            </summary>
            <param name="InterfaceName">name of interface that was specified in the xml file</param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.ErrorMessageBuilder.DriverNotFound(System.String,System.String)">
            <summary>
            Error message is built when TxApi finds a reference to an unspecfied interface
            </summary>
            <param name="InterfaceReferenceName"></param>
            <param name="XMLFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:Idefix.TxApi.Configuration.Configuration">
            <summary>
            This <b>internal</b> class is responsible for loading, reading and use of the TxApi_Config.xml file.
            It also loads and maps all the drivers that are listed in the xml file by using
            LoadFrom(). It only loads drivers that are marked as enabled=true. The default
            behaviour is to just silently skip mappings that are made on disabled drivers.    
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.Configuration.ConfigurationLocked">
            <summary>
            This property indicates if the driver configuration is locked
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.Configuration.Initialized">
            <summary>
            This property indicates if the divers is loaded/initialized
            </summary>
        </member>
        <member name="F:Idefix.TxApi.Configuration.Configuration._TxApiConfig">
            <summary>
            The _TxApiConfig member is the instanciation of the class that corresponds to
            the top-level of the auto-generated C# code. The files are auto-generated by
            adding the TxApi_comfig.xsd file to the project.
            </summary>
        </member>
        <member name="F:Idefix.TxApi.Configuration.Configuration.TxApiConfig">
            <summary>
            The TxApiConfig member is the instanciation of the C# class corresponding to the
            level below the top-level in the XML file. This level holds a specific configuration
            in the specified XML file
            </summary>
        </member>
        <member name="F:Idefix.TxApi.Configuration.Configuration.XMLFilePath">
            <summary>
            The path for the XMLFile that is used now.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.Configuration.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.Configuration.Initialize(System.String,System.String)">
            <summary>
            This function is the only public function in this component. 
            When calling this function the following will happen:
            1) The XML file will load and be deserialized into the types/classes that was auto-generated
            2) The drivers specified in the XML file are loaded into the current Application Domain.
            </summary>
            <param name="txApi_ConfigFile">The path to the configuration file</param>
            <param name="configurationChoice">The name of the chosen configuration</param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.Configuration.LockConfiguration">
            <summary>
            This function will lock all further calls to Initialize(). This effectictly
            locks all loaded TxApi driver, so after this functions is called all calls
            to initalize() will generate an Exception.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.Configuration.LoadDrivers">
            <summary>
            Function that handle all loading of drivers. Make sure that Initialize is called
            before calling this function.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.Configuration.ReadConfigFile(System.String,System.String)">
             <summary>
             This function uses the given filepath to initialize the XMLConfig member variable with information. 
             This information describes how to setup the TxApi drivers.
             </summary>
             <param name="txApi_ConfigFile">A filepath to a XML file that uses the TxApi.xsd as its schema file.</param>
            <param name="configurationChoice">The name of the chosen configuration</param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.Configuration.GetDrivers(System.Boolean)">
            <summary>
            This function returns a list of driver objects. The drivers in the list specifies all driver
            that are specified in the XML file. A selection can be done by specifying a value in the 
            useOnlyEnabled parameter
            </summary>
            <param name="useOnlyEnabled">If true, the function only returns the driver with
            enabled=true. If false, all drivers specified in the XML file are returned.</param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.Configuration.GetInterfaceFromMapping(Idefix.TxApi.Configuration.TxApi_configConfigurationMapping)">
            <summary>
            This function returns a specific interface object from a specified mapping object.
            </summary>
            <param name="txm">The specified mapping object</param>
            <returns>The interface object specified in that mapping</returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.Configuration.GetMappingsForDriver(Idefix.TxApi.Configuration.driver)">
            <summary>
            This function returns a list of mapping objects that are mapped to a given driver object.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Idefix.TxApi.Configuration.LoopbackDriver">
            <summary>
            This class inherits all public interface that make up TxApi and also implements all 
            these with a minimum of functionality that should do nothing. In some cases code that
            create empty objects has been included for compatibility reasons.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetList">
            <summary>
            Dummy implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.MatchUnique(System.String,System.String,System.String)">
            <summary>
            dummy implementation.
            </summary>
            <param name="documentNumber"></param>
            <param name="revision"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GenerateAlarm(Idefix.TxApi.Logging.AlarmType,System.UInt32,System.String)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="type"></param>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SendMessage(System.UInt32,System.String)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="code"></param>
            <param name="text"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.Exist(System.String,System.Int32,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="label"></param>
            <param name="MpIndex"></param>
            <param name="dut"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.Get(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="label"></param>
            <param name="element"></param>
            <param name="MpIndex"></param>
            <param name="dut"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetStationVariable(System.String,System.String)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="variable"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetStationVariable(System.String)">
            <summary>
            Dummy implementation
            </summary>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetStationVariable(System.String,System.String)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="variable"></param>
            <param name="value"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetStationVariable(System.String,System.Double)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="variable"></param>
            <param name="value"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetStationVariable(System.String,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="variable"></param>
            <param name="value"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetLogicalName(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dut"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetBarcodeString(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetIdNumber(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetLastOkCategory(System.String)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="idNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetMark(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetMaxPos">
            <summary>
            Dummy implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetPosition">
            <summary>
            Dummy implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetProductDescription(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetProductNumber(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetRealPos(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetRstate(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetStatus(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetTestType(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.GetUsage(System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="dutPos"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetIdNumber(System.String,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="id"></param>
            <param name="dutPos"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetMark(System.String,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="mark"></param>
            <param name="dutPos"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetProductDescription(System.String,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="descr"></param>
            <param name="dutPos"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetProductNumber(System.String,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="prodNo"></param>
            <param name="dutPos"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetRstate(System.String,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="rstate"></param>
            <param name="dutPos"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetStatus(System.Int32,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="status"></param>
            <param name="dutPos"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.SetUsage(System.Boolean,System.Int32)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="status"></param>
            <param name="dutPos"></param>
        </member>
        <member name="M:Idefix.TxApi.Configuration.LoopbackDriver.BlockTpStatements(System.String)">
            <summary>
            Dummy implementation.
            </summary>
            <param name="tsBlock"></param>
            <returns></returns>
        </member>
        <member name="T:Idefix.TxApi.Configuration.IniFile">
            <summary>
            This <b>internal</b> helper class is responsible for retrieving and settings values in INI files. 
            This class is used by <b>TestMethodLoader</b> class
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.IniFile.GetValue(System.String,System.String,System.String)">
            <summary>
            Fetches a value from an INI file.
            </summary>
            <param name="filename">Specific INI file.</param>
            <param name="section">Section of the INI file.</param>
            <param name="key">Key that value should be fetched from.</param>
            <returns>The value stored at the specific section and key.</returns>
            <exception cref="T:System.ApplicationException">Thrown if the INI file cannot be located.</exception>
        </member>
        <member name="M:Idefix.TxApi.Configuration.IniFile.SetValue(System.String,System.String,System.String,System.String)">
            <summary>
            Sets a value in an INI file.
            </summary>
            <param name="filename">Specific INI file.</param>
            <param name="section">Section in the INI file.</param>
            <param name="key">Key that should hold the new value.</param>
            <param name="value">Value to be stored in the INI file.</param>
            <exception cref="T:System.ApplicationException">Thrown if the INI file cannot be located.</exception>
        </member>
        <member name="T:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler">
            <summary>Helper class for Idefix.TxApi.Runtime.MultiDut</summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.Item(System.Int32)">
            <summary>
                Indexer for retrieving a DutItem using the logical position.
            </summary>
            <param name="index">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The DutItem at the given logical position.</returns>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.Item(System.String)">
            <summary>
                Indexer for retrieving a DutItem using the DutItem ID.
            </summary>
            <param name="Dut">The DUT ID.</param>
            <returns>The DutItem with the given ID.</returns>
        </member>
        <member name="T:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem">
            <summary>Helper class for Idefix.TxApi.Runtime.MultiDut</summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.#ctor(System.Int32)">
            <summary>
                Constructor for creating a DutItem from the DUT logical position.
            </summary>
            <param name="dutIndex">
                The logical position of the dut. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="T:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.userInfo">
            <summary>TxApi internal use only.</summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.userInfo.#ctor(System.Int32)">
            <summary>
                Constructor.
            </summary>
            <param name="dutIndex">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.userInfo.Output">
            <summary>
                Get the MultiDutHandler for this DUT (Device Under Test).
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.UserInfo">
            <summary>Returns Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler(DutIndex)</summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.FlowControl">
            <summary>Returns Idefix.TxApi.Runtime.FlowControl.MultiDutHandler(DutIndex)</summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.Dut">
            <summary>Returns Idefix.TxApi.Runtime.Dut.MultiDutHandler(DutIndex)</summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.DataLabel">
            <summary>Returns Idefix.TxApi.Runtime.DataLabel.MultiDutHandler(DutIndex)</summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.Measurement">
            <summary>Returns Idefix.TxApi.Runtime.Measurement.MultiDutHandler(DutIndex)</summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.TestCriteria">
            <summary>Returns Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler(DutIndex)</summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem.TestRecord">
            <summary>Returns Idefix.TxApi.Runtime.TestRecord.MultiDutHandler(DutIndex)</summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.GetEnumerator">
            <summary>
            Get the IEnumerator for this class.
            </summary>
            <returns>IEnumerator implementation.</returns>
        </member>
        <member name="P:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.Current">
            <summary>
                The current item at the IEnumerator.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.MoveNext">
            <summary>
                Move the Enumerator to the next
            </summary>
            <returns>False if the enumerator has reached the end of the stream.</returns>
        </member>
        <member name="M:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.Reset">
            <summary>
                Reset the enumerator.
            </summary>
        </member>
        <member name="T:Idefix.TxApi.Configuration.StationInformation">
            <summary>
            <b>Internal helper</b> class that are responsible for serialize/deserialize station information 
            This class used by <see cref="T:Idefix.TxApi.Configuration.Configuration"/> class 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.StationInformation.Responsible">
            <summary>
            The name of the person responsible for this test station.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.StationInformation.MacAddresses">
            <summary>
            List of MAC addresses of this test station.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.StationInformation.IpAdresses">
            <summary>
            List of IP Addresses of test station.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.StationInformation.IdefixVersion">
            <summary>
            Version of Idefix TestManager (tm.exe)
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.StationInformation.OSVersion">
            <summary>
            Version of the Operative System.
            <see cref="P:System.OperatingSystem.VersionString"/>
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.StationInformation.OSVersionMajor">
            <summary>
            Major version of the Operative System.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.StationInformation.CLRVersion">
            <summary>
            Version of the CLR (Common Language Runtime)
            <see cref="P:System.Environment.Version"/>
            </summary>
        </member>
        <member name="T:Idefix.TxApi.Configuration.driver">
            <summary>
            <b>Internal helper</b> class that contains all the information about loaded TxAPI driver. 
            This class used by <see cref="T:Idefix.TxApi.Configuration.Configuration"/> class 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.driver.filepath">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.driver.enabled">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.driver.id">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.driver.idref">
            <remarks/>
        </member>
        <member name="M:Idefix.TxApi.Configuration.driver.ToString">
            <summary>
            Build a human readable string representation of the driver object.
            </summary>
            <returns>Human readable string representation of this object.</returns>
        </member>
        <member name="T:Idefix.TxApi.Configuration.interface">
            <remarks/>
            <summary>
            This <b>internal</b> helper class is responsible for handling TxApi_Config.xml file. 
            This class is used by <see cref="T:Idefix.TxApi.Configuration.Configuration"/> class 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.interface.implementation">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.interface.id">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.interface.idref">
            <remarks/>
        </member>
        <member name="M:Idefix.TxApi.Configuration.interface.ToString">
            <summary>
            Build a human readable string representation of the driver object.
            </summary>
            <returns>Human readable string representation of this object.</returns>
        </member>
        <member name="T:Idefix.TxApi.Configuration.TxApi_config">
            <summary>
            This <b>internal</b> helper class is responsible for handling TxApi_Config.xml file. 
            This class is used by <see cref="T:Idefix.TxApi.Configuration.Configuration"/> class 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.TxApi_config.configuration">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.TxApi_config.version">
            <remarks/>
        </member>
        <member name="T:Idefix.TxApi.Configuration.TxApi_configConfiguration">
            <summary>
            This <b>internal</b> helper class is responsible for handling TxApi_Config.xml file. 
            This class is used by <see cref="T:Idefix.TxApi.Configuration.Configuration"/> class 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.TxApi_configConfiguration.drivers">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.TxApi_configConfiguration.interfaces">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.TxApi_configConfiguration.mappings">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.TxApi_configConfiguration.name">
            <remarks/>
        </member>
        <member name="T:Idefix.TxApi.Configuration.TxApi_configConfigurationMapping">
            <summary>
            This <b>internal</b> helper class is responsible for handling TxApi_Config.xml file. 
            This class is used by <see cref="T:Idefix.TxApi.Configuration.Configuration"/> class 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.TxApi_configConfigurationMapping.implementation">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.TxApi_configConfigurationMapping.interface">
            <remarks/>
        </member>
        <member name="P:Idefix.TxApi.Configuration.TxApi_configConfigurationMapping.driver">
            <remarks/>
        </member>
        <member name="M:Idefix.TxApi.Configuration.TxApi_configConfigurationMapping.ToString">
            <summary>
            Build a human readable string representation of the driver object.
            </summary>
            <returns>Human readable string representation of this object.</returns>
        </member>
        <member name="T:Idefix.TxApi.Configuration.NewDataSet">
            <summary>
            This <b>internal</b> helper class is responsible for handling TxApi_Config.xml file. 
            This class is used by <see cref="T:Idefix.TxApi.Configuration.Configuration"/> class 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Configuration.NewDataSet.Items">
            <remarks/>
        </member>
        <member name="T:Idefix.TxApi.Configuration.SeparatorClass">
            <summary>
            This <b>internal</b> helper class is responsible for handling TxApi_Config.xml file. 
            This class is used by <see cref="T:Idefix.TxApi.Configuration.Configuration"/> class 
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Configuration.SeparatorClass.IsCalledFromVisualStudioDebugger">
            <summary>
            This function checks to see if the calling process is the Visual Studio Debugger or not. 
            </summary>
            <returns>returns true if Visual Studio is the calling process otherwise false</returns>
        </member>
        <member name="P:Idefix.TxApi.Configuration.SeparatorClass.Separator">
            <summary>
            A read-only property that returns one of the predefined separator values depending on the current stacktrace.
            </summary>
        </member>
        <member name="T:Idefix.TxApi.Constants.MeasurementResult">
             <summary>The <c>MeasurementResult</c> enumeration describes the Measurement point (MP) result.</summary>
             <example>
             <code>
            if (Measurement.Save(iMeasuredValue1) == MeasurementResult.Failed )
               Measurement.SaveMpNote("Something went wrong here.");
             </code>
             </example>
        </member>
        <member name="F:Idefix.TxApi.Constants.MeasurementResult.Passed">
            <summary>The Measurement point is passed</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.MeasurementResult.Failed">
            <summary>The Measurement point has failed</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.MeasurementResult.NotTested">
            <summary>The Measurement point is not tested.</summary>
        </member>
        <member name="T:Idefix.TxApi.Constants.ExistResult">
             <summary>The <c>ExistResult</c> enumeration describes where a <c>DataLabel</c> is found</summary>
             <example>
             This example shows how to check if a <c>DataLabel</c> exists and then print all values for that <c>DataLabel</c>.
             <code>
             
             try
             {
                DataLabel.ExistData existData = DataLabel.Exist("MyLabel");
                if (existData.Result != ExistResult.NotFound &amp;&amp; existData.NoOfElements &gt; 0)
                {
                   Output.TextOut("The variable is located at {0} and the length is {1} values.", existData.Result.ToString(), existData.NoOfElements.ToString());
            
                   for (int i = 0; i &lt; existData.NoOfElements; i++)
                   {
                      Output.TextOut("MyLabel[{0}] = {1}", i, DataLabel.Get("MyLabel", i).AsString);
                   }
                }
             }
             catch (Exception ex)
             {
             }
             
             </code>
             </example>
        </member>
        <member name="F:Idefix.TxApi.Constants.ExistResult.NotFound">
            <summary>Not found at all</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ExistResult.MeasurementPoint">
            <summary>Found in a Measurement Point within a Measurement Group</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ExistResult.MeasurementGroup">
            <summary>Found in a Measurement Group</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ExistResult.Dut">
            <summary>Found in the Criteria file (DUT)</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ExistResult.TestPlan">
            <summary>Found in the Test Plan</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ExistResult.StationData">
            <summary>Found as a Stations Variable in the the local file: C:\Data\ITP\[version]\Apps\Idefix\Init\variables.ini</summary>
        </member>
        <member name="T:Idefix.TxApi.Constants.StatusResult">
             <summary>The <c>StatusResult</c> indicates a status of a TestPlan or DUT.</summary>
             <example>
             <code>
             public int Measure()
             {
                 try
                 {
                     const string dutId = "A530000001";
                     if (TestRecord.GetLatestTestResult(dutId) == StatusResult.Passed)
                     {
                         Measurement.Save("PASS");
                         return MethodResult.Ok;
                     }
            
                     Measurement.Save("FAIL");
                     return MethodResult.Ok;
                 }
                 catch (Exception e)
                 {
                     Output.TextOut(e.Message);
                     return MethodResult.Error;
                 }
             }
            </code>
             </example>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.NotTested">
            <summary>Test have not been made yet.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Executed">
            <summary>Test has been executed</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Passed">
            <summary>Testing has been executed with all tests passed.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Failed">
            <summary>Testing has been executed with at least one test failed.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Aborted">
            <summary>Testing was aborted (Stopped) for the DUT.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Running">
            <summary>Testing is running.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Empty">
            <summary>DUT position is empty.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Paused">
            <summary>Testing is paused</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Unused">
            <summary>DUT disabled (by user)</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Invalid">
            <summary>DUT, MPG or TestPlan is in INVALID status.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Error">
            <summary>If at least one test method has returned MethodResult.Error, DUT and Test plan status will be Error. </summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.StatusResult.Exit">
            <summary>Test plan status exit, used when exit (closing) the testplan</summary>
        </member>
        <member name="T:Idefix.TxApi.Constants.ConfigKeyFormat">
            <summary>Product configuration key (Product Info:Config Key) format. Used in BarTrackNet driver.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ConfigKeyFormat.Undefined">
            <summary>Undefined Key Format.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ConfigKeyFormat.NoConfigurationKeyRecieved">
            <summary>No configuration key will be sent by BartrackNet driver</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ConfigKeyFormat.ShortConfigurationKeyFormat">
            <summary>Barttract webservice GetOrderInfo method result outText3 field's value is used as a Configuration Key.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ConfigKeyFormat.AsoConfigurationKeyFormat">
            <summary>The BarTract Driver will query BarTract WebService’s WS_XgetOrderXML1 mathod for a Configuration key, which will be forwarded to the TxAPI.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ConfigKeyFormat.ContextIdConfigurationKeyFormat">
            <summary>Configuration key will be an Empty string</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.ConfigKeyFormat.AsoContextIdconfigurationKeyFormat">
            <summary>Configuration key will be an Empty string</summary>
        </member>
        <member name="T:Idefix.TxApi.Constants.MethodResult">
             <summary><c>MethodResult</c> is indicates the result of a test method execution.</summary>
             <example>
             <code>
             public int Measure()
            
                try
                {
                    for (int i = 100000; i >= 0 ; i--) 
                    {
                        Measurement.Save(10 / i );
                        //Check if the test is stopped by user.
                        if (FlowControl.StopFlag)
                            return MethodResult.Abort;
                    }
                }
                catch (Exception ex)
                {
                    Measurement.Save(0);
                    Output.TextOutError("An error occured during execution: {0}", ex.Message);
                    return MethodResult.Error;
                }
                return MethodResult.Ok;
            } 
             </code>
             </example>
        </member>
        <member name="F:Idefix.TxApi.Constants.MethodResult.Ok">
            <summary>Test method execution succeeded</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.MethodResult.Abort">
            <summary>USer has forced to stop testing and test mehtod was terminated.</summary>
        </member>
        <member name="F:Idefix.TxApi.Constants.MethodResult.Error">
            <summary>Some error condition happened during the execution of a test method.</summary>
        </member>
        <member name="T:Idefix.TxApi.DataPacket">
            <summary>
            The <c>DataPacket</c> class handles retrieving information about data packets connected to the current test case.  
            </summary>
            <remarks>
            <para>
            The methods in <c>DataPacket</c> retrieves the information for the data packets connected to the current test case 
            from the test distribution database. This means that it is not possible to run these methods locally to retrieve 
            information about data packets in the database since they will not be connected to a test case. The preferred method 
            when debugging test methods that utilizes the <c>DataPacket</c> class is to bundle the debugging information in 
            a package that is uploaded to the test distribution data base. When the test case is loaded by the Test Manager it is 
            possible to attach to the process and proceed with normal debugging techniques.
            </para>
            <para>
            The <c>DataPacket</c> class supports two different methods which are described below. 
            </para>
            <h5>List</h5>
            <para>
            <c>List</c> is a property which returns a read only collection of all the data packets that are connected to the 
            current test case. 
            </para>
            <h5>MatchUnique(string documentNumber, string revision, string description)</h5>
            <para>
            The <c>MatchUnique</c> method fetches information about a specific data packet. 
            </para>
            </remarks>
            <example>
            In this example the information of every data packet that is connected to the current test case is retrieved. The <c>MathcUnique</c>
            is used on the <c>DocumentNumber</c> property of each <c>DataPacketElement</c>. If the <c>MatchUnique</c> method throws an exception 
            there exist several data packets with the same document number connected to the current test case. 
            <code>
            public int Measure()
            {
                foreach (DataPacket.DataPacketElement element in DataPacket.List)
                {
                    try
                    {
                        DataPacket.MatchUnique(element.DocumentNumber, "", "");
                        Output.TextOut("The data package {0} has no duplicates with different R-states.", element.DocumentNumber);
                    }
                    catch (DataPacketException e)
                    {
                        Output.TextOut("The data package {0} has multiple copies with different R-states. R-state of current data package is {1}.",
                            element.DocumentNumber, element.Revision);
                        Output.TextOutError("DataPacketException: " + e.Message);
                    }
                }
            
               return MethodResult.Ok;
            }
            </code> 
            </example>
        </member>
        <member name="T:Idefix.TxApi.DataPacket.DataPacketElement">
            <summary>
            Class that returns information about a specific data packet
            </summary>
            <remarks>
            The available information is the document number, revision number, description, 
            path, file name and entry point of a specific data packet.
            </remarks>
        </member>
        <member name="F:Idefix.TxApi.DataPacket.DataPacketElement.DocumentNumber">
            <summary>The document number or product number of the data packet.</summary>
        </member>
        <member name="F:Idefix.TxApi.DataPacket.DataPacketElement.Revision">
            <summary>The document revision or product r-state of the data packet.</summary>
        </member>
        <member name="F:Idefix.TxApi.DataPacket.DataPacketElement.Description">
            <summary>The description of the DataPacket.</summary>
        </member>
        <member name="F:Idefix.TxApi.DataPacket.DataPacketElement.Path">
            <summary>The local path where the files for the data packet can be found.</summary>
        </member>
        <member name="F:Idefix.TxApi.DataPacket.DataPacketElement.FileName">
            <summary>The filename for the data packet.</summary>
        </member>
        <member name="P:Idefix.TxApi.DataPacket.DataPacketElement.EntryPoint">
            <summary>
            Compiles a full entry point string for the data packet on proper path format, e.g.
            <c>"C:\\Folder\\Subfolder\\File.extension"</c> or <c>"C:/Folder/Subfolder/File.extension.</c>
            </summary>
            <remarks>
            If you want to use this property in combination with the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class,
            remember that the format for printing backslashes differs from regular string formatting,
            thereby requiring you to substitute the backslashes according to the example below.
            </remarks>
            <example>
            This example demonstrates how to format the entry point for proper output.
            <code>
            public int Measure()
            {
                foreach (DataPacket.DataPacketElement element in Idefix.TxApi.DataPacket.List)
                {
                    string entryPointForOutput = element.EntryPoint.Replace("\\", "\\\\");
                    Runtime.UserInfo.Output.TextOut(String.Format("Found data package file: {0}", entryPointForOutput));
                }
                return MethodResult.Ok;
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.DataPacket.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.DataPacket.MatchUnique(System.String,System.String,System.String)">
            <summary>
            Matches a single specific DataPacket of all Datapackets connected to the currently used TestCase.
            </summary>
            <param name="documentNumber">The document number or product number of the DataPacket searched for. Leave string empty for wildcard match.</param>
            <param name="revision">The document revision or product r-state of the DataPacket searched for. Leave string empty for wildcard match.</param>
            <param name="description">Substring or complete description of the DataPacket. Leave string empty for wildcard match.</param>
            <returns>DataPacket that matched the supplied search criteria's.</returns>
            <remarks>
            <para>
            This function is meant to match exatly one DataPacket. If the caller uses search criteria's that make the function match 
            zero or more than one DataPackets, the function will throw an DatapacketException
            </para>
            <para>
            All the parameter are case sensitive.
            </para>
            <para>
            The <paramref name="description"/> parameter does not have to match the description of the datapacket exactly. As long as the
            value of the parameter is contained in the description of the data packet it will be counted as a match. The implications of this 
            is that if there are two data packets with the descriptions <c>Datapacket</c> and <c>Datapacket2</c> respectively both packages 
            will be matched if the <paramref name="description"/> parameter is set to <c>Datapacket</c>.
            </para>
            </remarks>
            <example>
            This example fetches the <c>DataPacket</c> element for the same data packet by using different combinations of parameters.
            <code>
            public int Measure()
            {
                DataPacket.DataPacketElement elementUnique = DataPacket.MatchUnique("CXC123456", "R11D01", "Datapacket2");
                Output.TextOut("{0}, {1}, {2}", elementUnique.DocumentNumber, elementUnique.Revision, elementUnique.Description);
                elementUnique = DataPacket.MatchUnique("CXC123456", "", "");
                Output.TextOut("{0}, {1}, {2}", elementUnique.DocumentNumber, elementUnique.Revision, elementUnique.Description);
                elementUnique = DataPacket.MatchUnique("", "R11D01", "");
                Output.TextOut("{0}, {1}, {2}", elementUnique.DocumentNumber, elementUnique.Revision, elementUnique.Description);
                elementUnique = DataPacket.MatchUnique("", "", "Datapacket2");
                Output.TextOut("{0}, {1}, {2}", elementUnique.DocumentNumber, elementUnique.Revision, elementUnique.Description);
                elementUnique = DataPacket.MatchUnique("", "", "packet");
                Output.TextOut("{0}, {1}, {2}", elementUnique.DocumentNumber, elementUnique.Revision, elementUnique.Description);
            
               return MethodResult.Ok;
            }
            </code> 
            </example>
            <exception cref="T:Idefix.Exceptions.DataPacketException">
            Thrown when the information cannot be retrieved from pamel or when the <c>MatchUnique</c> method either matches
            several data packets or if no data packets at all are matched.
            </exception>
            <seealso cref="P:Idefix.TxApi.DataPacket.List"/>
        </member>
        <member name="P:Idefix.TxApi.DataPacket.List">
            <summary>
            Returns a list of each <see cref="T:Idefix.TxApi.DataPacket.DataPacketElement"/> connected to the currently used TestCase.
            </summary>
            <example>
            This example goes through each <see cref="T:Idefix.TxApi.DataPacket.DataPacketElement"/> and prints information
            about it using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                foreach (DataPacket.DataPacketElement element in Idefix.TxApi.DataPacket.List)
                {
                    StringBuilder elementInfo = new StringBuilder();
                    elementInfo.Append("Found element with: ");
                    elementInfo.AppendFormat("Document number: {0}, ", element.DocumentNumber);
                    elementInfo.AppendFormat("Revision: {0}, ", element.Revision);
                    elementInfo.AppendFormat("Description: {0}", element.Description);
                    elementInfo.AppendFormat("Filename: {0}, ", element.FileName);
                    // Needed to convert to proper backslash-formatting in the Output class
                    elementInfo.AppendFormat("Path: {0}.", element.Path.Replace("\\", "\\\\"));
                    Runtime.UserInfo.Output.TextOut(elementInfo.ToString());
                }
                
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DataPacketException">
            Thrown when the information cannot be retrieved from pamel.
            </exception>
        </member>
        <member name="T:Idefix.TxApi.Logging">
            <summary>
            Handles all calls mapped to the ILogging interface. The calls can be used by implementing ITestMonitor
            interface in a PamelaNet TestMonitor driver.
            </summary>
            
            <remarks>
            For development purposes (i.e. test program on Idefix startup is not loaded from ITP Steam) 
            test program information must be provided from command line (for more information 
            about using command line see "Test Developer's Guide to Idefix").
            </remarks>
            
            <example>
            This example shows how to send messages to a driver that implements ITestMonitor in PamelaNet.
            <code>
            try
            {
                // Sends a message to Message in ITestMonitor
                Idefix.TxApi.Logging.SendMessage(0, "Hello World from TxApi!"); 
                // Sends a message to AlarmError in ITestMonitor
                Idefix.TxApi.Logging.GenerateAlarm(Idefix.TxApi.Logging.AlarmType.ALARM, 123, "my generated alarm");
            }
            catch (LoggingException e)
            {
                // The exception here probably occurs because Idefix did not have enough product information.
                // Hence SendMessage/GenerateAlarm threw a LoggingException.
                Output.TextOut("TxApiBaseException: " + e.Message);
            }
            catch (Exception e)
            {
                Output.TextOut(e.Message);
            }
            </code>
            </example>
        </member>
        <member name="T:Idefix.TxApi.Logging.AlarmType">
            <summary>
            Type used to specify the severity of the generated alarm.
            </summary>                
        </member>
        <member name="F:Idefix.TxApi.Logging.AlarmType.INFO">
            <summary>A non stopping information message.</summary>
        </member>
        <member name="F:Idefix.TxApi.Logging.AlarmType.WARNING">
            <summary>An early warning about an potentially stopping alarm.</summary>
        </member>
        <member name="F:Idefix.TxApi.Logging.AlarmType.ALARM">
            <summary>A potentially stopping alarm is activated.</summary>
        </member>
        <member name="F:Idefix.TxApi.Logging.AlarmType.CRITICAL">
            <summary>A critical and stopping alarm has been activated.</summary>
        </member>
        <member name="F:Idefix.TxApi.Logging.AlarmType.RESET">
            <summary>Resets the specified alarm to its original non-signaled state.</summary>
        </member>
        <member name="M:Idefix.TxApi.Logging.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Logging.SendMessage(System.UInt32,System.String)">
            <summary>
            Sends an infomational message to the currently connected messaging system (i.e. sends 
            a message to a driver that implements ITestMonitor interface in PamelaNet)
            </summary>
            <param name="code">Identification code of the message.</param>
            <param name="message">Message text to be sent.</param>
        </member>
        <member name="M:Idefix.TxApi.Logging.GenerateAlarm(Idefix.TxApi.Logging.AlarmType,System.UInt32,System.String)">
            <summary>
            Changes the state of a specified alarm and sends a message to a driver that implements 
            ITestMonitor interface in PamelaNet.
            </summary>
            <param name="type">the new state of the alarm</param>
            <param name="code">identification code of the alarm</param>
            <param name="message">Message text to be sent.</param>
        </member>
        <member name="T:Idefix.TxApi.Runtime.ValueData">
            <summary>
            Class holding a value as an integer, string and a double. 
            Used as a return value for DataLabel.Get and DataLabel.GetArray.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.ValueData.#ctor(System.String)">
            <summary>
            Initialize the ValueData to the provided value.
            </summary>
            <param name="Value">The value to initialize the ValueData to.</param>
        </member>
        <member name="P:Idefix.TxApi.Runtime.ValueData.AsInteger">
            <summary>
            Gets the value formatted as an integer.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.ValueData.AsDouble">
            <summary>
            Gets the value formatted as a double.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.ValueData.AsString">
            <summary>
            Gets the value formatted as a string.
            </summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.DataLabel">
             <summary>
             The <c>DataLabel</c> class is handling Data Labels and Station Variables.
             </summary>
             
             <remarks>
             <h5>DataLabel</h5>
             
             <para>
             A <c>DataLabel</c> is a like a variable that can hold 0 to n values. When the <c>DataLabel</c> holds more than one value it can be seen as an array of values.
             Valid types are Integer, Double and String.
             The value of the <c>DataLabel</c> is stored as an string but since the Get functions returns <c>ValueDate</c> which supports properties for conversion (.AsInteger, .AsDouble and .AsString).
             </para>
             
             <para>
             A <c>DataLabel</c> could be stored in four different levels in the Test Criteria file and Testplan file. When using a method like Get() or Exist() to retrieve a <c>DataLabel</c> value,
             the system will automatically search for the <c>DataLabel</c> in a built in order. The order is described in the list below. It is important to understand that when trying the get
             a <c>DataLabel</c> value you are not able to get the value from the location you like. It is the built-in mechanism that determines where to retrieve these values.
             </para>
             
             <para>
             If you would like to know from which level a <c>DataLabel</c> value is fetched you can 
             First make a call to the <c>DataLabel.Exist(...);</c> method and then check the result in <c>DataLabel.ExistData.Result</c>.
             </para>
             
             <para>
             <b>Search order for a DataLabel:</b><br />
             <list type = "number">
                <item>
                   <term>Measurement Point:&#160;</term>
                   <description>Measurement Point within the Measurment Group connected to current Run Statement in the testplan</description>
                </item>
                <item>
                   <term>Measurment Group:&#160;</term>
                   <description>Global label in the Measurment Group connected to current Run Statement in the thestplan</description>
                </item>
                <item>
                   <term>Global in the Test Criteria (DUT):&#160;</term>
                   <description>Global label in the Test Criteria (DUT)</description>
                </item>
                <item>
                   <term>Run Statement in Testplan:&#160;</term>
                   <description>Within current Run Statement in the Testplan</description>
                </item>
             </list>
             </para>
             
             <para>
             When the test execution traverses through the Run Statement then the scoup for the <c>DataLabel</c>s are changed in two different ways:<br />
             1. The Run Statement in Testplan can hold <c>DataLabel</c>s which will be changed<br />
             2. A Run Statement is connected to a Measurement Group which can hold DataLabels and Measurment Points with <c>DataLabel</c>s. If the Run Statements are connected to different Measurement Groups then the scoup is changed.
             </para>
             
             <para>
             For each call to <c>Measurement.Save();</c>, current Measurment Point within current Measure Group is changed. 
             If the following example will retreieve from a measurment point it won't retrieve the same <c>DataLabel</c> value since there is <c>Measurement.Save(1);</c> between which will change the scope for the next <c>Get("MyLabel");</c> call:<br />
             <br />
             <c>DataLabel.Get("MyLabel");</c><br />
             <c>Measurement.Save(1);</c><br />
             <c>DataLabel.Get("MyLabel");</c><br />
             </para>
             
             <para>
             If you like to save the Measurements in a random order then you could use the mpIndex version of <c>DataLabel.Get("MyLabel",mpIndex);</c>
             otherwise this strange behaviour will occur:
             <br />
             <c>//since no Measurement.Save() is made then Measurement.MeasIndex is 0</c><br />
             <c>Measurement.Save(1,3);//Save the fourth MP: Value=1, mpIndex=3</c><br />
             <c>// Now Measurement.MeasIndex is 4</c><br />
             <c>DataLabel.Get("MyLabel"); //If Measurement Point five (index==4) has got MyLabel then you will get it</c><br />
             <c>Measurement.Save(1,0);//Save the first MP: Value=1, mpIndex=0</c><br />
             <c>// Now Measurement.MeasIndex is 1</c><br />
             <c>DataLabel.Get("MyLabel"); //If Measurement Point two (index==1) has got MyLabel then you will get it</c><br />
             </para>
             
             
             <h5>Station Variable</h5>
             
             <para>
             To be able to use global data in the test environment, a concept of station variables is supported.
             This implies that a test method can write to such variables while other test methods could read from them.
             All variables are stored in the file C:\Data\ITP\[version]\Apps\Idefix\Init\variables.ini and if you want
             to manually add them without using e.g. <see cref="M:Idefix.TxApi.Runtime.DataLabel.SetStationVariable(System.String,System.String)"/> the 
             format used in the file is of the following:
             </para>
             
             <para>
             <c>[SECTION_VARIABLES]</c><br />
             <c>IntegerExample=5</c><br />
             <c>DoubleExample=6.14</c><br />
             <c>StringExample=text</c><br />
             </para>
             
             <br />
             <br />
             
             <h5>Known bugs / Issues</h5>
             There is a couple of strange behaviours with <c>DataLabel</c> to be aware of.<br />
             <list type = "table">
                <item>
                   <term></term>
                   <description>Two DataLabel's with the same name</description>
                   <description>In TPTool it is possible to create two DataLabel's at the same location with the same name.
                   When trying to retrieve such DataLabel's using the api you will only be able get the first one.<br />
                   Solution: you should not define two labels with the same name at the same location.
                   </description>
                </item>
                <item>
                   <term></term>
                   <description>
                   call to Get(), GetArray() or Exist() using mpIndex when mpIndex is out of scope, then a <c>DataLabel</c> will be retrieved anyhow.
                   </description>
                   <description>
                   When mpIndex is equal to the length of the <c>DataLabel</c> array, the last element will be found incorrectly.<br />
                   When mpIndex is greater than the length of the <c>DataLabel</c> array, then if the <c>DataLabel</c> exist Global in the Test Criteria (DUT) or in the Run Statement in Testplan these DataLabels will be incorrectly found.
                   </description>
                </item>
                <item>
                   <term></term>
                   <description>
                   An empty <c>DataLabel</c> is not allowed.
                   </description>
                   <description>
                   A <c>DataLabel</c> cannot be empty. If all values are deleted from a <c>DataLabel</c> within TPTool, It will still be visible in TPTool (until the project is reopened) but the <c>DataLabel</c> is actually completly removed.
                   </description>
                </item>
             </list>
             
             </remarks> 
             
             
             <example>
             This example shows how to check if a <c>DataLabel</c> exists and then print all values for that <c>DataLabel</c>.
             <code>
             try
             {
                DataLabel.ExistData existData = DataLabel.Exist("MyLabel");
                if (existData.Result != ExistResult.NotFound &amp;&amp; existData.NoOfElements &gt; 0)
                {
                   Output.TextOut("The variable is located at {0} and the length is {1} values.", existData.Result.ToString(), existData.NoOfElements.ToString());
            
                   for (int i = 0; i &lt; existData.NoOfElements; i++)
                   {
                      Output.TextOut("MyLabel[{0}] = {1}", i, DataLabel.Get("MyLabel", i).AsString);
                   }
                }
             }
             catch (Exception ex)
             {
             }
             </code>
             <br /><br />
             This example shows how to make sure where a <c>DataLabel</c> value is retreived before using it.
             Use the <c>DataLabel.ExistData</c> struct.
             <code>
             DataLabel.ExistData existData = DataLabel.Exist("MyLabel");
             switch (existData.Result)
             {
                case ExistResult.MeasurementGroup:
                   Output.TextOut("Found in Measurement Group.");
                   break;
                case ExistResult.MeasurementPoint:
                   Output.TextOut("Found in Measurement Point.");
                   break;
                case ExistResult.Dut:
                   Output.TextOut("Found in Criteria File.");
                   break;
                case ExistResult.TestPlan:
                   Output.TextOut("Found in Testplan.");
                   break;
                case ExistResult.NotFound:
                   Output.TextOut("MyLabel was Not Found.");
                   break;
             }
             </code>
             </example>
             
             <exception cref="T:System.Exception">
             A Exception is thrown if the requested <c>DataLabel</c> is not found.
             </exception>
             <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">
             If a DriverNotConnectedException occurs, then there probably is some problems within the txapi_config.xml file.
             </exception>
        </member>
        <member name="T:Idefix.TxApi.Runtime.DataLabel.ExistData">
            <summary>
            Contains information for a <c>DataLabel</c>. Where it is located and how many elements it has got.
            </summary>
            <remarks>
            Used in combination with <see cref="T:Idefix.TxApi.Runtime.DataLabel"/>
            </remarks>
        </member>
        <member name="F:Idefix.TxApi.Runtime.DataLabel.ExistData.Result">
            <summary>Information in a <c>ExistResult</c> where the <c>DataLabel</c> is located.</summary>
        </member>
        <member name="F:Idefix.TxApi.Runtime.DataLabel.ExistData.NoOfElements">
            <summary>Number of elements in the <c>DataLabel</c>.</summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.DataLabel.MultiDutHandler">
            <summary>Class for managing DataLabels for multi-dut (Device Under Test) tests.</summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.MultiDutHandler.GetArray(System.String,System.Int32)">
            <summary>
            Gets all elements in a data label.
            </summary>
            <param name="label">Name of the user data label.</param>
            <param name="mpIndex">Measurement point index to search in.</param>
            <returns>List of data label elements.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.MultiDutHandler.GetArray(System.String)">
            <summary>
            Gets all elements in a data label.
            </summary>
            <param name="label">Name of the user data label.</param>
            <returns>List of data label elements.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.MultiDutHandler.Get(System.String,System.Int32,System.Int32)">
            <summary>
            Gets a user data label.
            </summary>
            <param name="label">Name of the user data label.</param>
            <param name="element">The zero-based element in the user data label."</param>
            <param name="mpIndex">Measurement point index to search in.</param>
            <returns>Value of the data label.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.MultiDutHandler.Get(System.String,System.Int32)">
            <summary>
            Gets a user data label.
            </summary>
            <param name="label">Name of the user data label.</param>
            <param name="element">The zero-based element in the user data label."</param>
            <returns>Value of the data label.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.MultiDutHandler.Get(System.String)">
            <summary>
            Gets a user data label.
            </summary>
            <param name="label">Name of the user data label.</param>
            <returns>Value of the data label.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.MultiDutHandler.Exist(System.String,System.Int32)">
            <summary>
            Checks if a user data label exist.
            </summary>
            <param name="label">Data label to search for.</param>
            <param name="mpIndex">Measurement point index to search in.</param>
            <returns>Status of the data label.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.MultiDutHandler.Exist(System.String)">
            <summary>
            Checks if a user data label exist.
            <param name="label">Data label to search for.</param>
            <returns>Status of the data label.</returns>
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.SetStationVariable(System.String,System.String)">
            <summary>
            Sets a value to a station variable.
            </summary>
            <param name="variable">Name of the station variable.</param>
            <param name="value">New value of the station variable.</param>
            
            <example>
            This example show how to set a string value to station variable which located in C:\Data\ITP\[version]\Apps\Idefix\Init\variables.ini.
            <code>
            string svar = "Station Variable example";
            if (DataLabel.Exist("EXAMPLEVALUE_S").Result != ExistResult.NotFound)
            {
               svar = DataLabel.Get("EXAMPLEVALUE_S").AsString;
            }
            DataLabel.SetStationVariable("StringExample", svar);
            </code>
            </example>
            
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.SetStationVariable(System.String,System.Double)">
            <summary>
            Sets a value to a station variable.
            </summary>
            <param name="variable">Name of the station variable.</param>
            <param name="value">New value of the station variable.</param>
            
            <example>
            This example show how to set a double value to station variable which located in C:\Data\ITP\[version]\Apps\Idefix\Init\variables.ini.
            <code>
            double dvar = 10.0;
            if (DataLabel.Exist("EXAMPLEVALUE_D").Result != ExistResult.NotFound)
            {
                dvar = DataLabel.Get("EXAMPLEVALUE_D").AsDouble; ;
            }
            DataLabel.SetStationVariable("DoubleExample", dvar);
            </code>
            </example>
            
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.SetStationVariable(System.String,System.Int32)">
            <summary>
            Sets a value to a station variable.
            </summary>
            <param name="variable">Name of the station variable.</param>
            <param name="value">New value of the station variable.</param>
            
            <example>
            This example show how to set a string value to station variable which located in C:\Data\ITP\[version]\Apps\Idefix\Init\variables.ini.
            <code>
            int ivar = 5;
            if (DataLabel.Exist("EXAMPLEVALUE_I").Result != ExistResult.NotFound)
            {
                ivar = DataLabel.Get("EXAMPLEVALUE_I").AsInteger;
            }
            DataLabel.SetStationVariable("IntegerExample", ivar);
            </code>
            </example>
            
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.GetArray(System.String,System.Int32)">
            <summary>
            Retrieves all elements in a <c>DataLabel</c> at the specified measurment point index position (mpIndex). The mpIndex makes it possible to retrieve all <c>DataLabel</c> values outside current scope.
            </summary>
            <param name="label">Name of the <c>DataLabel</c>.</param>
            <param name="mpIndex">Measurement point index to search in.</param>
            <returns>A list of <c>DataLabel</c> elements.</returns>
            
            
            
            <remarks>
            This function doesn't take care of which Measurement Point is the current. You are able to retreive a values from any Measurment Point within current Measurement Group.
            
            <h5>Known bug / Issue</h5>
            The <c>GetArray(string label, int mpIndex)</c> function has got a known bug at the moment.<br />
            <list type = "table">
               <item>
                  <term></term>
                  <description>
                  When mpIndex is out of scope a <c>DataLabel</c> will be retrieved anyhow.
                  </description>
                  <description>
                  When mpIndex is equal to the length of the <c>DataLabel</c> array, the last element will be retrieved incorrectly.<br />
                  When mpIndex is greater than the length of the <c>DataLabel</c> array, then if the <c>DataLabel</c> exist Global in the Test Criteria (DUT) or in the Run Statement in Testplan these DataLabels will be incorrectly retrieved.
                  </description>
               </item>
            </list>
            </remarks>
            
            <example>
            This example show how to retrieve an array of values from an <c>DataLabel</c> in the second measurement point, verify that it is 10 elements and then print them to the Log Window in Test Manager.
            <code>
            try
            {
               if (DataLabel.GetArray("MyLabel",1).Count == 10)
               {
                  ValueData[] myData;
                  myData = DataLabel.GetArray("MyLabel",1).ToArray();
                  foreach (ValueData myval in myData)
                  {
                     Output.TextOut("String:{0} Integer:{1} Double:{2}", myval.AsString, myval.AsInteger, myval.AsDouble);
                  }
               }
               else
                  Output.TextOutError("The Data Label MyLabel has not got 10 values as expected...");
            }
            catch (Exception ex)
            {
               //You will end up here if the data label is not found.
               Output.TextOutError("An Exception is thrown: {0}", ex.Message.ToString());
            }
            </code>
            </example>
            
            <exception cref="T:System.Exception">
            A Exception is thrown if the requested <c>DataLabel</c> is not found.
            </exception>
            
            <overloads>This method has two overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.GetArray(System.String)">
            <summary>
            Retrieves all elements in a <c>DataLabel</c>.
            </summary>
            <param name="label">Name of the <c>DataLabel</c>.</param>
            <returns>A list of <c>DataLabel</c> elements.</returns>
            
            <example>
            This example show how to retrieve an array of values from an <c>DataLabel</c>, verify that it is 10 elements and then print them to the Log Window in Test Manager.
            <code>
            try
            {
               if (DataLabel.GetArray("MyLabel").Count == 10)
               {
                  ValueData[] myData;
                  myData = DataLabel.GetArray("MyLabel").ToArray();
                  foreach (ValueData myval in myData)
                  {
                     Output.TextOut("String:{0} Integer:{1} Double:{2}", myval.AsString, myval.AsInteger, myval.AsDouble);
                  }
               }
               else
                  Output.TextOutError("The Data Label MyLabel has not got 10 values as expected...");
            }
            catch (Exception ex)
            {
                //You will end up here if the data label is not found.
               Output.TextOutError("An Exception is thrown: {0}", ex.Message.ToString());
            }
            </code>
            </example>
            
            <exception cref="T:System.Exception">
            A Exception is thrown if the requested <c>DataLabel</c> is not found.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.Get(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves the stored value at the specified index position (element) and measurment point index position (mpIndex), in a <c>DataLabel</c>. The mpIndex makes it possible to retrieve a <c>DataLabel</c> value outside current scope.
            </summary>
            <param name="label">Name of the <c>DataLabel</c>.</param>
            <param name="element">The zero-based element in the user data label."</param>
            <param name="mpIndex">Measurement point index.</param>
            <returns>Value of the <c>DataLabel</c>.</returns>
            <returns>A single value (<c>ValueData</c>) of the data label at the specified index position and measurment point index position.</returns> 
            
            <remarks>
            This function doesn't take care of which Measurement Point is the current. You are able to retreive a value from any Measurment Point within current Measurement Group.
            
            
            <h5>Known bug / Issue</h5>
            The <c>Get(string label, int element, int mpIndex)</c> function has got a known bug at the moment.<br />
            <list type = "table">
               <item>
                  <term></term>
                  <description>
                  When mpIndex is out of scope a <c>DataLabel</c> will be retrieved anyhow.
                  </description>
                  <description>
                  When mpIndex is equal to the length of the <c>DataLabel</c> array, the last element will be retrieved incorrectly.<br />
                  When mpIndex is greater than the length of the <c>DataLabel</c> array, then if the <c>DataLabel</c> exist Global in the Test Criteria (DUT) or in the Run Statement in Testplan these DataLabels will be incorrectly retrieved.
                  </description>
               </item>
            </list>
            </remarks>
            
            <example>
            This example shows how to retreieve the first <c>DataLabel</c> values from the two first Measurment Points
            <code>
            string val;
            val = DataLabel.Get("MyLabel", 0, 0).AsString;
            val = DataLabel.Get("MyLabel", 0, 1).AsString;
            </code>
            </example>
            
            <overloads>This method has three overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.Get(System.String,System.Int32)">
            <summary>
            Retrieves the stored value at the specified index position (element) in a <c>DataLabel</c>.
            </summary>
            <param name="label">Name of the <c>DataLabel</c>.</param>
            <param name="element">The zero-based element in the data label."</param>
            <returns>A single value (<c>ValueData</c>) of the data label at the specified index position.</returns>
            
            <example>
            This example shows how to retrieve the first two values of a <c>DataLabel</c>
            <code>
            string value = DataLabel.Get("MyLabel", 0).AsString;
            string value2 = DataLabel.Get("MyLabel", 1).AsString;
            Output.TextOut("Value is: {0} {1}", value, value2);
            </code>
            </example>
            
            <remarks>
            If the requested index is outside the range of the current <c>DataLabel</c> array, then an Error dialog will be displayed. When pressing OK an Exception is thrown.
            If myLabel only holds 10 values then this call will fail: <c>string myValue = DataLabel.Get("MyLabel",100).AsString;</c>
            </remarks>
            
            <exception cref="T:System.Exception">
            A Exception is thrown if the requested <c>DataLabel</c> is not found.
            A Exception is thrown if index is outside the range of the current <c>DataLabel</c> array.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.Get(System.String)">
            <summary>
            Retrieves the first stored value of a data label (index == 0). Use this method when you like to
            get the first value of an array or if you know there is only one value to retrieve.
            </summary>
            <param name="label">Name of the <c>DataLabel</c>.</param>
            <returns>A single value (<c>ValueData</c>) of the <c>DataLabel</c> with index 0.</returns>
            
            <example>
            This example shows how to retrieve the first value of a <c>DataLabel</c>
            <code>
            string value = DataLabel.Get("MyLabel").AsString;
            Output.TextOut("Value is: {0}", value);
            </code>
            </example>
            
            <remarks>
            These two function calls are equal:<br />
            <c>DataLabel.Get("MyLabel");</c><br />
            <c>DataLabel.Get("MyLabel",0);</c>
            </remarks>
            
            <exception cref="T:System.Exception">
            A Exception is thrown if the requested <c>DataLabel</c> is not found.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.Exist(System.String,System.Int32)">
            <summary>
            Checks if a <c>DataLabel</c> exist, where it is found and how many elements it holds. The mpIndex makes it possible to check if a <c>DataLabel</c> outside current scope exist.
            </summary>
            <param name="label">Name of the <c>DataLabel</c> to search for.</param>
            <param name="mpIndex">Measurement point index to search in.</param>
            <returns><c>ExistData</c> which holds status of the data label. Use the ExistData struct to determine where (in which level) the <c>DataLabel</c> was found.</returns>
            
            <example>
            This example checks if a DataLabel exist, if it does then print how many elements it holds and in which location level the label was found.
            <code>
            DataLabel.ExistData myExistData = DataLabel.Exist("MyLabel",0);
            if (myExistData.Result != ExistResult.NotFound)
               Output.TextOut("We found {0} values in {1}", myExistData.NoOfElements.ToString(), myExistData.Result.ToString());
            else
               Output.TextOut("MyLabel was not found");
            </code>
            </example>
            
            <remarks>
            This function doesn't take care of which Measurement Point is the current. You are able to check if a <c>DataLabel</c> exists in any Measurment Point within current Measurement Group.
            
            
            <h5>Known bug / Issue</h5>
            The <c>Exist(string label, int mpIndex)</c> function has got a known bug at the moment.<br />
            <list type = "table">
               <item>
                  <term></term>
                  <description>
                  When mpIndex is out of scope a <c>DataLabel</c> will be found anyhow.
                  </description>
                  <description>
                  1.) When mpIndex is equal to the length of the <c>DataLabel</c> array, the last element will be found incorrectly.<br />
                  2.) When mpIndex is greater than the length of the DataLabel array, then if the <c>DataLabel</c> exist Global in the Test Criteria (DUT) or in the Run Statement in Testplan these DataLabels will be incorrectly found.
                  </description>
               </item>
            </list>
            </remarks>
            
            <overloads>This method has two overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.Exist(System.String)">
            <summary>
            Checks if a <c>DataLabel</c> exist, where it is found and how many elements it holds.
            </summary>
            <param name="label">Name of the <c>DataLabel</c> to search for.</param>
            <returns><c>ExistData</c> which holds status of the data label.</returns>
            
            <example>
            This example checks if a DataLabel exist, if it does then print how many elements it holds and in which location level the label was found.
            <code>
            DataLabel.ExistData myExistData = DataLabel.Exist("MyLabel");
            if (myExistData.Result != ExistResult.NotFound)
               Output.TextOut("We found {0} values in {1}", myExistData.NoOfElements.ToString(), myExistData.Result.ToString());
            else
               Output.TextOut("MyLabel was not found");
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.GetStationVariable(System.String,System.String)">
             <summary>
             Gets a station variable.
             </summary>
             <param name="variable">Name of the station variable.</param>
             <param name="defaultValue">Default value if the wanted station variable doesn't exist.</param>
             <returns>Value of the station variable.</returns>
             
             <example>
             This example show how to get a station variable value which located in C:\Data\ITP\[version]\Apps\Idefix\Init\variables.ini, if the station variable is not exist, default value will be used.
             <code>
             int intDefaultValue = DataLabel.GetStationVariable("IntegerExample", "6").AsInteger;
             Output.TextOut("Get a Station Variable {0} = {1}", "IntegerExample", intDefaultValue);
            
             double doubleDefaultValue = DataLabel.GetStationVariable("DoubleExample", "20.0").AsDouble;
             Output.TextOut("Get a Station Variable {0} = {1}", "DoubleExample", doubleDefaultValue);
            
             string stringDefaultValue = DataLabel.GetStationVariable("StringExample", "Default String").AsString;
             Output.TextOut("Get a Station Variable {0} = {1}", "StringExample", stringDefaultValue);
             </code>
             </example>
              
             <exception cref="T:System.Exception">
             A Exception is thrown if the requested <c>DataLabel</c> is have not vaule.
             </exception>
             
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.GetStationVariable(System.String)">
             <summary>
             Gets a station variable.
             </summary>
             <param name="variable">Name of the station variable.</param>
             <returns>Value of the station variable.</returns>
             
             <example>
             This example show how to get a station variable value which located in C:\Data\ITP\[version]\Apps\Idefix\Init\variables.ini
             <code>
             int integerValue = DataLabel.GetStationVariable("IntegerExample").AsInteger;
             Output.TextOut("Get a Station Variable {0} = {1}", "IntegerExample", integerValue);
            
             double doubleValue = DataLabel.GetStationVariable("DoubleExample").AsDouble;
             Output.TextOut("Get a Station Variable {0} = {1}", "DoubleExample", doubleValue);
            
             string stringValue = DataLabel.GetStationVariable("StringExample").AsString;
             Output.TextOut("Get a Station Variable {0} = {1}", "StringExample", stringValue);
             </code>
             </example>
              
             <exception cref="T:System.Exception">
             A Exception is thrown if the requested <c>DataLabel</c> not found.
             </exception>
             
        </member>
        <member name="T:Idefix.TxApi.Runtime.DataLabel.RequiredDataLabel">
            <summary>
            Class holding information about a user defined data label.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.DataLabel.RequiredDataLabel.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new user data label.
            </summary>
            <param name="Label">Name of the data label.</param>
            <param name="Description">Description text for the data label.</param>
            <param name="Value">Value of the data label.</param>
        </member>
        <member name="P:Idefix.TxApi.Runtime.DataLabel.RequiredDataLabel.Label">
            <summary>
            Gets the name of the label. 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.DataLabel.RequiredDataLabel.Description">
            <summary>
            Gets the description of the label.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.DataLabel.RequiredDataLabel.Value">
            <summary>
            Gets the value of the label.
            </summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.Dut">
            <summary>
            The <c>Dut</c> class provides runtime information about the DUT.
            </summary>
            
            <remarks>
            
            <para>
            The <c>Dut</c> class makes information available about the specific DUT that is 
            under test. It also provides functionality to alter some of the DUT information. 
            </para>
            
            <h5>Known bugs / issues</h5>
            Behaviours of the <c>Dut</c> class that are not intuitive are listed 
            here.<br />
            <list type="table">
                <item>
                    <term></term>
                    <description>DUT position can be -1.</description>
                    <description>
                    This occurs in single DUT mode when a test method does not have
                    any measurement points. The test method tries to retrive the 
                    DUT information from the measure point data but since there is
                    no such data available the default value -1 is returned 
                    instead. To resolve this issue a measurement point can be added
                    that saves either the DUT position or some dummy data. 
                    </description>
                </item>
            </list>
            
            </remarks>
            <example>
            This exampled shows how to retrive some data about the DUT, do some 
            simple error checking and displaying the result in the Idefix output 
            window. 
            <code>
            int dutPos = Dut.Position;
            int maxPos = Dut.MaxPosition;
            if (dutPos &lt; maxPos)
            {
                throw new DutException(
                    String.Format("The current DUT position ({0}) exceeds the maximum allowed positions ({1}).",
                    dutPos,
                    maxPos));
            }
            else
            {
                Output.TextOut("The DUT position is: {0}", dutPos);
            }
            </code>
            </example>
            
            <exception cref="T:Idefix.Exceptions.DutException">
            A DutException is thrown if a failure occur.
            </exception>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MaxPosition">
            <summary>
            Gets the number of DUT defined in the test plan.
            This is also the same as the highest logical position number for a DUT in the testplan.
            </summary>
            <remarks>
            When a multidut test plan is used this property returns the total 
            number of DUT's in the test plan. 
            
            </remarks>
            <example>
            This example retrieves and displays DUT's highest logical position number.<br />
            <code>
                Output.TextOut("MaxPosition: {0}", Dut.MaxPosition.ToString());
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.TestType">
            <summary>
            Gets the category (test type) name selected when doing New in the Test Manager.
            </summary>
            <example>
            This example retrieves and displays DUT test type.<br />
            <code>
                Output.TextOut("TestType: {0}", Dut.TestType);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.IdNumber">
            <summary>Serial ID of the DUT.</summary>
            <example>
            This example retrieves and displays DUT Serial ID.<br />
            <code>
                Output.TextOut("IdNumber: {0}", Dut.IdNumber);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.Position">
            <summary>Gets the logical DUT position.</summary>
            <example>
            This example retrieves and displays DUT position.<br />
            <code>
                Output.TextOut("Position: {0}", Dut.Position.ToString());
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.Usage">
            <summary>DUT usage. True if used otherwise false</summary>
            <example>
            This example retrieves and displays DUT usage status<br />
            <code>
                Output.TextOut("Usage: {0}", Dut.Usage.ToString());
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.ProductDescription">
            <summary>The product description of the DUT.</summary>
            <example>
            This example retrieves and displays DUT description.<br />
            <code>
                Output.TextOut("ProductDescription: {0}", Dut.ProductDescription);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.RealPosition">
            <summary>
            Gets the real position of a DUT. 
            This position is the position in the Multi-DUT bar of the Test Manager
            </summary>
            <example>
            This example retrieves and displays DUT real position.<br />
            <code>
                Output.TextOut("RealPosition: {0}", Dut.RealPosition.ToString());
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.ProductNumber">
            <summary>The product number for the DUT.</summary>
            <example>
            This example retrieves and displays product number of the DUT.<br />
            <code>
                Output.TextOut("ProductNumber: {0}", Dut.ProductNumber);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.LogicalName">
            <summary>Gets the logical name of the DUT.</summary>
            <example>
            This example retrieves and displays DUT logical name.<br />
            <code>
                Output.TextOut("LogicalName: {0}", Dut.LogicalName);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.Mark">
            <summary>The mark entered in test manager.</summary>
            <example>
            This example retrieves and displays DUT mark.<br />
            <code>
                Output.TextOut("Mark: {0}", Dut.Mark);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.Status">
            <summary>The current status of the DUT.</summary>
            <example>
            This example retrieves and displays DUT current status.<br />
            <code>
                Output.TextOut("Status: {0}", Dut.Status.ToString());
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.LastOkCategory">
            <summary>Not implemented.</summary>
            <remarks>
            This method is not implemented yet, it always return -1.
            
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.Rstate">
            <summary>R-state of the DUT.</summary>
            <example>
            This example retrieves and displays DUT R-state.<br />
            <code>
                Output.TextOut("Rstate: {0}", Dut.Rstate);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.BarcodeString">
            <summary>Gets the full barcode string for the DUT read by the Barcode handler</summary>
            <example>
            This example retrieves and displays DUT barcode string.<br />
            <code>
                Output.TextOut("BarcodeString: {0}", Dut.BarcodeString);
            </code>
            </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.Dut.MultiDutHandler">
            <summary>Class for managing DUTs (Devices Under Test) in multi-dut tests.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.TestType">
            <summary>Gets the category (test type) name selected when doing New in the Test Manager.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.IdNumber">
            <summary>Serial ID of the DUT.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.LogicalName">
            <summary>Gets the logical name of the DUT.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.Usage">
            <summary>DUT usage. True if used otherwise false.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.ProductDescription">
            <summary>Product description of the DUT.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.RealPosition">
            <summary>
            Gets the real position of a DUT. 
            This position is the position in the Multi-DUT bar of the Test Manager.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.ProductNumber">
            <summary>Product number for the DUT.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.Mark">
            <summary>The mark entered in test manager.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.Status">
            <summary>Current status of the DUT.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.Rstate">
            <summary>R-State of the DUT.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Dut.MultiDutHandler.BarcodeString">
            <summary>Gets the full barcode string for the DUT read by the Barcode handler.</summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.FlowControl">
            <summary>
            Class for handling different flow control functions.
            </summary>
            <remarks>
            The <c>FlowControl</c> class enables you to implement step support in your Test Methods.
            When reaching a step point the Step dialog will show which allows the user to Step to next Step point,
            Continue in normal mode, Repeat the step or stop. This featur is only valid when running in MANUAL mode.
            </remarks>
            
            <example>
            This example shows code generated by two step snippets. Type step and press tab tab to generate the code (If the snippet is added to your Visual Stuidio environment. This is dony by the Code Snippet Manager i Visual Studio).
            However this example shows 2 steps. The code inside the step is possible to repeat. 
            <br />
            <br />
            <code>
            
            
            Output.TextOut("BEFORE STEP 1");
            
            
               #region SetStep: step1
            step1:
               Idefix.TxApi.Runtime.FlowControl.SetStep();
               #endregion
               
            Output.TextOut("INSIDE STEP 1");
               
               #region Step: step1
               switch (Idefix.TxApi.Runtime.FlowControl.Step())
               {
                  case Idefix.TxApi.Runtime.FlowControl.StepState.Run:
                     break;
                  case Idefix.TxApi.Runtime.FlowControl.StepState.Stop:
                     return Idefix.TxApi.Constants.MethodResult.Abort;
                  case Idefix.TxApi.Runtime.FlowControl.StepState.Repeat:
                     goto step1;
                  case Idefix.TxApi.Runtime.FlowControl.StepState.MeasRepeat:
                     goto step1;
                  case Idefix.TxApi.Runtime.FlowControl.StepState.Step:
                     break;
               }
               #endregion
            
            
            Output.TextOut("BETWEEN STEP 1 AND STEP 2");
            
            
               #region SetStep: step2
            step2:
               Idefix.TxApi.Runtime.FlowControl.SetStep();
               #endregion
               
            Output.TextOut("INSIDE STEP 2");
               
                #region Step: step2
                switch (Idefix.TxApi.Runtime.FlowControl.Step())
                {
                case Idefix.TxApi.Runtime.FlowControl.StepState.Run:
                break;
                case Idefix.TxApi.Runtime.FlowControl.StepState.Stop:
                return Idefix.TxApi.Constants.MethodResult.Abort;
                case Idefix.TxApi.Runtime.FlowControl.StepState.Repeat:
                goto step2;
                case Idefix.TxApi.Runtime.FlowControl.StepState.MeasRepeat:
                goto step2;
                case Idefix.TxApi.Runtime.FlowControl.StepState.Step:
                break;
                }
                #endregion
                
            Output.TextOut("AFTER STEP 2");
            
            </code>
            </example> 
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopDepthFocus">
            <summary>
            The depth of nested loop. 0 is default and is the lowest level. 
            One means next level up and so on.
            </summary>
            <remarks>For setting up in test plan the predefined data labels 
            TS_LOOP_COUNT, TS_LOOP_TIME, TS_LOOP_WAIT and TS_LOOP_INTERVAL, 
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopIntervalTimeStop">
            <summary>
            Gets the total amount of loop interval time.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_INTERVAL, 
            consult "Test Developer's Guide to Idefix", EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopIntervalTimeCurrent">
            <summary>
            Gets the current amount of loop interval time elapsed..
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_INTERVAL, 
            consult "Test Developer's Guide to Idefix", EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopIntervalTimeRemaining">
            <summary>
            Gets the current amount of loop interval time remaining.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_INTERVAL, 
            consult "Test Developer's Guide to Idefix", EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopTimeStop">
            <summary>
            Gets the total amount of loop time assigned.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_TIME, 
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopTimeCurrent">
            <summary>
            Gets the current amount of loop time elapsed.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_TIME, 
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopTimeRemaining">
            <summary>
            Gets the current amount of loop time remaining.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_TIME, 
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopCountCurrent">
            <summary>
            Gets the current number of loop counts made.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_COUNT,
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopCountRemaining">
            <summary>
            Gets the current number of loop counts remaining.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_COUNT,
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopCountStop">
            <summary>
            Gets the total number of loop counts assigned.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_COUNT,
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopWaitTimeRemaining">
            <summary>
            Gets the current amount of loop wait time remaining.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_WAIT, 
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopWaitTimeStop">
            <summary>
            Gets the total amount of loop wait time assigned.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_WAIT, 
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.LoopWaitTimeCurrent">
            <summary>
            Gets the current amount of loop wait time elapsed.
            </summary>
            <remarks>For setting up in test plan the predefined data label TS_LOOP_WAIT, 
            consult "Test Developer's Guide to Idefix" EN/LZT 123 5229, R17, 2009-10-15.
            </remarks>
        </member>
        <member name="M:Idefix.TxApi.Runtime.FlowControl.DoMeas(System.Int32)">
            <summary>
            Determines if a measurement and a verification should be performed. This is necessary to do when implementing dynamic testing.
            </summary>
            <param name="MPIndex">Zero-based measurement point index.</param>
            <returns>Returns true if the measurement should be tested.</returns> 
            <example>
            This example skippes a measurement conditionally. To see the effect of DoMeas()
            set Dynamic Number and Dynamic Interval (in TP Tool or TCC) respectively to 1 and 10%
            (this means, that after the first passed test, only 10% of the tests will be done).
            In a real scenario, instead of repeating the same measurement with the same DUT, one
            measurement on several DUTs would be performed.
            <code>       
            public int Measure()
            {
               for (int i = 0; i &lt; 20; i++)
               {
                  if (Idefix.TxApi.Runtime.FlowControl.DoMeas(0))
                     {
                        Measurement.Save(1, 0);
                        Output.TextOut("measurement done");
                     }
                  else
                     Output.TextOut("measurement skipped");
               }
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.FlowControl.DoGroup">
            <summary>
            Determines if a measurement and verification should be performed on the current MPG. This is necessary to do when implementing dynamic testing.
            </summary>
            <returns>Returns true if the measurement should be tested.</returns>
            <example>
            This is a multidut example for using DoGroup(). The example is meant to be run in manual mode. 
            Select one of the three testmethods and run it over and over again to see the pattern.
            Use TCC (Test Case Creator) to create a test program with 2 DUTs, 2 MPGs and 3 RUN items. MPGs have dynamci number
            and interval respectively 1 and 25%, set either on MPG or MP level.
            <list type="bullet">
            <item>RUN item 1: Both DUTs connected to MPGs where the dynamic criteria is on MPG level.
            DoGroup() returns false here, making the testmethod skip all measurements for a DUT. DoMeas() always returns true for all MPs.</item>
            <item>RUN item 2: Both DUTs connected to MPGs where the dynamic criteria is on MP level. 
            DoGroup() never returns false here, but DoMeas() will return false, making the testmethod skip individual MPs.</item>
            <item>RUN item 3: DUT1 connected to an MPG with dynamic criteria on MPG level, DUT2 connected to an MPG with dynamic criteria on MP level. 
            DUT1 works like RUN item 1, DUT2 works like RUN item 2.</item>
            </list>
            
            Some explanations:
            <list type="bullet">
            <item>If a testmethod only has one connected MPG, and that MPG has dynamic testing enabled, 
            then Idefix will not even call the testmethod if the dynamic criteria says to skip.</item>
            <item>If a testmethod only has one connected MPG, and the MPG is not dynamic but the MPs are dynamic, 
            then Idefix will always call the testmethod and it is up to the testmethod to skip mesurements using DoMeas().</item>
            <item>If a testmethod is connected to multiple MPGs (only happens in multidut tests in the real world), 
            then Idefix always calls the testmethod and it is up to the testmethod to skip DUTs 
            (when dynamic is on MPG level) or skip measurements (when dynamic is on MP level).</item>
            </list>
            <code>
            public int Measure()
            {
                for (int i = 0; i &lt; 2; i++)     // Two DUTs
                {
                    int dutIndex = i + 1;       // The dutindex is 1-based
                    if (MultiDut.Duts[dutIndex].FlowControl.DoGroup())
                    {
                        if (MultiDut.Duts[dutIndex].FlowControl.DoMeas(0))
                            MultiDut.Duts[dutIndex].Measurement.Save(1, 0);
                        else
                            Output.TextOutError("DoMeas(0) returned false");
                        if (MultiDut.Duts[dutIndex].FlowControl.DoMeas(1))
                            MultiDut.Duts[dutIndex].Measurement.Save(2, 1);
                        else
                            Output.TextOutError("DoMeas(1) returned false");
                    }
                    else
                        Output.TextOutError("DoGroup() returned false");
            
                }
            
                return MethodResult.Ok;
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.FlowControl.BlockTpStatements(System.String)">
            <summary>
            With this method you can "dynamically" block statements with the label TS_BLOCK.
            Add the label TS_BLOCK in TCC to all Run and Do items you want to block.
            Add a data string to that label, same data string can be used for several items. 
            When you call BlockTpStatement with that particular string, the matching statements will be "dynamically" blocked
            </summary>
            <param name="ts_block">
            String to match the TS_BLOCK label data. This string has to be
            exactly the same as at least one of the strings in TS_BLOCK label
            for a Do or Run item to gain the match.
            </param>
            <returns>Number of affected items.</returns>
            <seealso cref="M:Idefix.TxApi.Runtime.FlowControl.UnBlockTpStatements(System.String)"/>
            <example>
            The codebase for test methods has been generated with the Managed Idefix Testprogram Wizard. 
            Some fields have been removed for clarity.
            <code>
            public class EventActivate : ITestMethod
            {
                public int Measure()
                {
                    Idefix.TxApi.Runtime.FlowControl.BlockTpStatements("Sector1");
                    return MethodResult.Ok;
                }
            }
            
            // FirstMethod must be attached to the RUN or DO item that is executed first.
            public class FirstMethod : ITestMethod
            {
                public int Measure()
                {
                    // Unblocking can be done based on some test condition
                    Idefix.TxApi.Runtime.FlowControl.UnBlockTpStatements("Sector1");
                    return MethodResult.Ok;
                }
            }
            
            public class SecondMethod : ITestMethod
            {
                public int Measure()
                {
                    // SecondMethod executed only if unblocked in FirstMethod.
                    Output.TextOut("Wow, it's unblocked!");
                    return MethodResult.Ok;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.FlowControl.UnBlockTpStatements(System.String)">
            <summary>
            Dynamically unblock statements.
            </summary>
            <param name="ts_block">
            String to match the TS_BLOCK label data. This string has to be
            exactly the same as at least one of the strings in TS_BLOCK label
            for a Do or Run item to gain the match.
            </param>
            <returns>Number of affected items.</returns>
            <example>See <see cref="M:Idefix.TxApi.Runtime.FlowControl.BlockTpStatements(System.String)"/></example>
            <seealso cref="M:Idefix.TxApi.Runtime.FlowControl.BlockTpStatements(System.String)"/>
        </member>
        <member name="P:Idefix.TxApi.Runtime.FlowControl.StopFlag">
            <summary>
            Checks if the execution is in stop mode. 
            </summary>
            <remarks>
            This function may be used by test methods, which should be interruptable by the operator.
            </remarks>
            <example><code>
            Dialogs.BoxInfo("Executing long running task");
            for (int j = 0; j &lt; 10; j++)
            {
               System.Threading.Thread.Sleep(1000);
               if (FlowControl.StopFlag)
                  {
                     return MethodResult.Abort;
                  }
            }
            </code></example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.FlowControl.Step">
            <summary>
            Displays the Step dialog to the user.
            </summary>
            <remarks>
            The dialog has got five buttons (Save Stop, Save Repeat, Repeat, Continue and Stop). 
            The method will return which button was pressed by the user.
            </remarks>
            <returns><c>StepState</c> for the button pressed by the user</returns>
            <example>See <see cref="M:Idefix.TxApi.Runtime.FlowControl.SetStep"/></example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.FlowControl.SetStep">
            <summary>
            Save step information such as last measurment point etc.
            </summary>
            <remarks>
            This function should be used to store and restore idefix interal data to be able to use the repeat function in the Step dialog.
            </remarks>
            <example>
            <code>
            public int Measure()
            {
                int count = 0;
                Output.TextOut("Before first Step");
            
                Dialogs.BoxInfo("Turn on Pause on failed measurement (Fault Trace -> Pause -> On Failed Measurement), and repeat until passed", "");
            
            RETURN1:
                FlowControl.SetStep();
                Output.TextOut("First Step");
                if (count &lt; 3) Measurement.Save(0); else Measurement.Save(1);
            
                switch (FlowControl.Step())
                {
                    case FlowControl.StepState.Run:
                        Output.TextOut("StepState.Run is running");
                        break;
                    case FlowControl.StepState.Stop:
                        Output.TextOut("StepState.Stop is stopping");
                        return -11;
                    case FlowControl.StepState.Repeat:
                        Output.TextOut("StepState.Repeat is jumping");
                        goto RETURN1;
                    case FlowControl.StepState.Step:
                        Output.TextOut("StepState.Step is stepping to next step");
                        break;
                    case FlowControl.StepState.MeasRepeat:
                        count++;
                        Output.TextOut("StepState.MeasRepeat is stepping to next step");
                        goto RETURN1;
                }
            
                return MethodResult.Ok;
            }
            </code>
            </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.FlowControl.StepState">
            <summary>Enumeration for the method Step return value.</summary>
            <example>See <see cref="M:Idefix.TxApi.Runtime.FlowControl.SetStep"/></example>
        </member>
        <member name="F:Idefix.TxApi.Runtime.FlowControl.StepState.Run">
            <summary>User clicked "Continue"</summary>
        </member>
        <member name="F:Idefix.TxApi.Runtime.FlowControl.StepState.Step">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.Runtime.FlowControl.StepState.Stop">
            <summary>User clicked "Save Stop"</summary>
        </member>
        <member name="F:Idefix.TxApi.Runtime.FlowControl.StepState.Repeat">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.Runtime.FlowControl.StepState.MeasRepeat">
            <summary>User clicked "Save Repeat" or "Repeat"</summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.FlowControl.MultiDutHandler">
            <summary>Class for managing FlowControl in multi-dut tests.</summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.FlowControl.MultiDutHandler.DoMeas(System.Int32)">
            <summary>
            Determines if a measurement and verification should be performed.
            </summary>
            <param name="MPIndex">The zero-based measurement point index.</param>
            <returns>Returns true if the measurement should be tested.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.FlowControl.MultiDutHandler.DoGroup">
            <summary>
            Determines if a measurement and verification should be performed on the current MPG.
            </summary>
            <returns>Returns true if the measurement should be tested.</returns>
        </member>
        <member name="T:Idefix.TxApi.Runtime.Measurement">
             <summary>
             The <c>Measurement</c> class is handling measurement data, measurement points and saving of the output log window to a file.
             </summary>
            
             <remarks>
             The Measurement class supports seven diffrent methods with a couple of overloaded method. The different methods is described below:
             
             
             <h5>Get(...) methods</h5>
             
             <para>
             The <c>Get(...)</c> methods retrieve information from a measurment point. It is possible to retrieve the stored measurment value and status on the
             measurement (If the measurment passed, failed or is not tested yet).
             </para>
             
             <h5>Save(...) methods</h5>
             
             <para>
             The <c>Save(...)</c> methods saves and compares a measurement towards the limits in the test criteria. The <c>MeasIndex</c> is set to next measurement point when a <c>Save(...)</c> is done.
             <br /><br />
             It is possible to verify a measurement without saving the measurement. This is done by setting the parameter &quot;save&quot; to false. 
             This can be useful when doing calibrations. The behaviour to print the measurement in the output tab or not can be set in SSTool and in the TM menu.
             <br />
             Note that only the last measurement value is stored when save to the same measurement point. If you want to store all values measured on one measurement point, use <c>SaveAdd(...)</c>
             </para>
             
             
             <h5>SaveAdd(...) methods</h5>
             
             <para>
             The <c>SaveAdd(...)</c> methods works like the <c>Save(...)</c> methods. 
             <c>SaveAdd(...)</c>saves and compares a measurement towards the limits in the test criteria. The <c>MeasIndex</c> is set to next MeasurementPoint when a <c>SaveAdd(...)</c> is done.
             <br /><br />
             <c>SaveAdd(...)</c> makes it possible to do more than one measurement towards a measurment point. All measurements are stored in the record file and must be passed for a measurement to become successful.
             <br /><br />
             AddSave(...) has the possibility to attach four attributes to the measurement where you can specify any circumstances for the measurement. These attributes will be stored in the record file.
             Since you can do the same measurement plenty times you are able to explain the circumstances for each measurement. Could be the current temperature for example. This could be valuable when analysing test results.
             <br /><br />
             It is not possible to verify a measurement without saving the measurement like it is in the <c>Save(...)</c> methods.
             </para>
            
             
             <h5>SaveMpNote(...) methods</h5>
             
             <para>
             With the <c>SaveMpNote(...)</c> methods it is possible to save a comment/note to a measurement. This information will be stored in the record file. To avoid meaningless text and bad format, all non-printable characters 
             in the comment are filtered so they won't appear in the Record file. 
             <br /><br />
             This is an example:<br />
             <c>
             &lt;MP:I&gt; M1_1,FAIL,2,2011-03-04 18:55:04.933<br />
             &lt;MPNOTE&gt; "Something went wrong here..."<br />
             </c>
             <br />
             The <c>Measindex</c> is set to the next measurement point after a <c>SaveMpNote(...)</c> is done.
             It is not possible to retrieve a stored MpNote using TxApi.
             <br />
             <c>SaveMpNote()</c> without using index or mpId does not have any affect before the first <c>Save(...)</c> is performed or when <c>MeasIndex</c> is equal to 0.
             </para>
             
             
             <h5>SaveOutput() method</h5>
             
             <para>
             With the <c>SaveOutput()</c> method it is possible to save the text in the output log window to a file.
             </para>
             
             
             <h5>SaveTestRecordData() method</h5>
             
             <para>
             Using <c>SaveTestRecordData()</c> method it is possible to print additional information to the test record file or to a log file.
             To write to the test record file a TRD driver must be created that support this. If "DUT (TRD)" is selected in the Debug dialog 
             in TM then a log file is created with this information.
             </para>
             
             
             <h5>SetComment(...) methods</h5>
            
             <para>
             Similar to <c>SaveMpNote(...)</c>. This will attach a comment to a measurement point.
             </para> 
             
             </remarks> 
             
             
             <example>
             This example tries to initialize a fixture. If an exception is thrown then <c>MethodResult.Error</c> is returned.
             If the 
             (Limit for the first MP is == 1)
             <code>
             private int DoSomeInitialization()
             {
                int rValue;
                Random r = new Random();
                rValue = r.Next(3); //rValue = 0, 1 or 2
                if (rValue == 0)
                   throw new Exception("Could not initiate the fixture.");
                   
                //Will return 1 if Fixture is ok and possible to communicate with DUT
                //Will return 2 if Fixture is ok but not possible to communicate with DUT
                return rValue;
             }
             
             private int InteruptExample()
             {
               try
               {
                   //Initiate the fixture and verify if it is initalized correctly.
                   if (Measurement.Save(DoSomeInitialization()) == MeasurementResult.Failed)
                       return MethodResult.Abort;
               }
               catch (Exception ex)
               {
                   Measurement.Save(0);
                   Output.TextOutError("An error occured during init: {0}", ex.Message);
                   return MethodResult.Error;
               }
            
               //Init is ok. Start the real verification
               Measurement.Save(1);
               Measurement.Save(7);
               Measurement.Save(8);
               
               return MethodResult.Ok;
             }
             </code>
             <br /><br />
             If you have defined a test method with the TS_AUTOREPEAT_..... in the test plan and would like to get information from the
             previous executions then it is not possible to use the Measurement.Get() methods. The value will be reset between each repetition.
             In the R8A release of ITP the ITP00261 bug was corrected. The result is that a new instance of the test method is not created 
             for each repetition and the implication of this is that all static data of the test method class is retained.
             <br /><br />
             Here is an example showing how to get this information using static member variables:<br />
             runCounter: stores how many times the method has been executed/repeated<br />
             lastSave: stores the measured value from the last repetition<br />
             lastRun: stores the return code from the last repetition<br />
             measResult: stores the result of the measuerment (Passed, Failed or Not tested)<br />
             <code>
             //Static variables that will remain during all repetitions with TS_AUTOREPEAT
             private static int runCounter = 0;
             private static double lastSave = Double.NaN;
             private static int lastRun = -1;
             private static MeasurementResult measResult;
             
             static void Save(double value)
             {
                 //Save the measured value for the next repetition
                 lastSave = value;
                 Measurement.Save(value);
             }
             
             public int Measure()
             {
                 //Do a calculation
                 var saveValue = runCounter &lt; DataLabel.Get("TS_AUTOREPEAT_FIRSTPASS").AsInteger / 2 ? Math.E : Math.PI;
                 
                 Output.TextOut("Number of runs: " + runCounter);
                 
                 //Is this method executed before
                 if (runCounter > 0)
                 {
                     Output.TextOut("Last saved value: " + lastSave);
                     const string lastReturnValue = "The last return value: ";
                     
                     //Print the return code for the previous execution
                     switch (lastRun)
                     {
                         case MethodResult.Ok:
                             Output.TextOut(lastReturnValue + "OK");
                             break;
                         case MethodResult.Error:
                             Output.TextOut(lastReturnValue + "ERROR");
                             break;
                         case MethodResult.Abort:
                             Output.TextOut(lastReturnValue + "ABORT");
                             break;
                         default:
                             Output.TextOut(lastReturnValue + "UNKNOWN");
                             break;
                     }
                     
                     //Print the measured value from the previous execution
                     Output.TextOut("The last measurement: " + measResult);
                 }
                 
                 Save(saveValue);
                 //Save the return code for the next repetition
                 measResult = Measurement.Get().Result;
                 
                 //Decrese the run counter
                 runCounter++;
                 return lastRun = MethodResult.Ok;
             }
             </code>
             <br /><br />
             A easy example how to save error codes during a test<br /><br />
             If you get into trouble during a test and you get an internal error code that you would like to store in the test record, then this is one way to solve that issue.
             Add a MP as the last measurement and set EQU 0 as the pass criteria. Now if a error occurs you will save the error code to the last MP. If no error ocurrs then you will 
             save 0 to the last error which means no error ocurred during this test. One important thing here is that you know for sure that at least one MP will be saved.<br /><br />
             This is how the MPG should look like in this example:<br />
             <![CDATA[<MPG>]]> MPS,"A Simple example with a error code measurement point"<br />
             <![CDATA[<MP:F>]]> MP_1,"Demo",#,N/A,LIM,10,20<br />
             <![CDATA[<MP:F>]]> MP_2,"Demo",#,N/A,LIM,10,20<br />
             <![CDATA[<MP:F>]]> MP_3,"Demo",#,N/A,LIM,10,20<br />
             <![CDATA[<MP:I>]]> MP_ERRORCODE,"Demo",#,N/A,EQU,0<br />
             <![CDATA[<END>]]><br />
             <br /><br />
             <code>
             public int Measure()
             {
                 int errorcode = 0;
             
                 Measurement.Save( Measurement_1(out errorcode) );
             
                 if( errorcode == 0 )
                     Measurement.Save( Measurement_2(out errorcode) );
             
                 if (errorcode == 0)
                     Measurement.Save( Measurement_3(out errorcode) );
             
                 // Save the error to the last measurement point
                 Measurement.MeasIndex += (Measurement.RemainingCount - 1);
                 Measurement.Save(errorcode);
             
                 return MethodResult.Ok;
             }
              
             // Simulate a measurement with no error
             private double Measurement_1(out int out_errorcode) 
             {
                 out_errorcode = 0; //No error code
                 return 12.34; 
             }
             // Simulate a measurement with a error
             private double Measurement_2(out int out_errorcode)
             {
                 out_errorcode = -10; //an error occured
                 return 1005.34;
             }
             // Simulate a measurement with no error
             private double Measurement_3(out int out_errorcode)
             {
                 out_errorcode = 0; //No error code
                 return 3.14;
             }
             </code>
             <br /><br />
             
             A simple example for error handling.
             <code>
             try{
                 Measurement.SaveMpNote("Bad index", 100);
             }
             catch (MeasurementException e){
                 Output.TextOutError("MeasurementException: " + e.Message);
             }
             </code>
             <br /><br />
             
             A advanced example that shows how you can save error information to a global MPG group during test.
             When the error occurs the error information is saved to a global storage. Later in the abort event that information is retrieved and saved to the MPs connected to the abort event.<br /><br />
             <code>
             //================================= MyTestmethod.cs
             // This is the test method that can generate an error.
             // The class inherits from TMBaseClass shown below.
             
             public class Example : TMBaseClass
             {
                 protected override int MethodInit()
                 {
                     return MethodResult.Ok;
                 }
             
                 protected override int MethodMeasure()
                 {
                     Measurement.Save(1);
                     if (Dialogs.BoxQuestion("Generate Error?"))
                     {
                         // An error has ocurred. Throw an exception to the base class
                         throw new TMErrorException(Dialogs.BoxInput("Error message"), 95);
                     }
                     Measurement.Save(1);
                     
                     return MethodResult.Ok;
                 }
             
                 protected override int MethodExit()
                 {
                     return MethodResult.Ok;
                 }
             }
             
             //================================= Base.cs
             // This is the base class that all methods must inherit from.
             // This exceptions shall be thrown when a error occur in a test.
             public class TMErrorException : SystemException
             {
                 public int code;
             
                 public TMErrorException() { }
                 public TMErrorException(string message) : base(message) { }
                 public TMErrorException(string message, int code) : base(message) { this.code = code; }
             };
             
             // This is a example struct to store error information in
             public struct ErrorInformation
             {
                 public int code;
                 public string message;
                 public string stackTrace;
                 public string lastMp;
                 public string nextMp;
                 public bool exist;
             }
             
             // This is the base class that all methods must inherit from to be able to store error information.
             public class TMBaseClass : ITestMethod
             {
                 public int Measure()
                 {
                     try
                     {
                         return MethodMeasure();
                     }
                     catch (TMErrorException e)
                     {
                         // An error has ocurred. Save the error
                         SaveErrorInfo((Exception)e, e.code);
             
                         //Show the error in the Output window
                         Output.TextOutError("Error Message: " + e.Message);
                         Output.TextOutError("Error Code: " + e.code.ToString());
                         Output.TextOutError("Stack Trace: " + e.StackTrace);
             
                         //Do a abort. This will raise the abort event
                         return MethodResult.Abort;
                     }
                     catch (Exception e)
                     {
                         // An error has ocurred. Save the error
                         SaveErrorInfo(e, int.MinValue);
             
                         //Show the error in the Output window
                         Output.TextOutError("Error Message: " + e.Message);
                         Output.TextOutError("Stack Trace: " + e.StackTrace);
             
                         //Do a abort. This will raise the abort event
                         return MethodResult.Abort;
                     }
                 }
                 
                 // This method is to be used to retrieve error information by the test method that is connectet to the abort event
                 public ErrorInformation LastError
                 {
                     get { return RetrieveErrorInfo(); }
                 }
             
                 // Virtual class that can be implemented by all TM-Methods.
                 protected virtual int MethodExit() { return 1; }
                 protected virtual int MethodInit() { return 1; }
                 protected virtual int MethodMeasure() { return 1; }
                 protected virtual int NoOfMeas { get { return 0; } }
                 protected virtual string MethodDesc { get { return ""; } }
             
                 // When an error occurs, this method is called to store the error information
                 private void SaveErrorInfo(Exception e, int errorCode)
                 {
                     // Now save the error information where you later can retreive the information.
                     // It could be in a GlobalObjectStore, Serialize or somewhere else.
                     .
                     .
                     .
                 }
                 
                 // When the test method connected to the abort event would like to retrieve the data information, then this method is called.
                 private ErrorInformation RetrieveErrorInfo()
                 {
                     ErrorInformation err = new ErrorInformation();
                     // Now retrieve the error information where you previously stored it.
                     // It could be from the GlobalObjectStore, Serialize or somewhere else.
                     .
                     .
                     .
             
                     return err;
                 }
             }
             
             //================================= MyEventAbort.cs
             // This test method should be connected to the abort event
             public class EventAbort : TMBaseClass
             {
                 protected override int MethodInit()
                 {
                     return MethodResult.Ok;
                 }
                 
                 protected override int MethodMeasure()
                 {
                     TestCriteria.MPInfoAccessor d = Idefix.TxApi.Runtime.TestCriteria.MeasurePoint;
                     int count = Idefix.TxApi.Runtime.Measurement.RemainingCount;
             
                     string[] mpNames = new string[count];
             
                     <![CDATA[for (int i = 0; i < count; i++) ]]>
                         mpNames[i] = d[i].Name;
             
                     // Retreive the error an save it in the MPs connected to this Event Abort
                     SaveError(LastError.code, "ERRORCOD", mpNames);
                     SaveError(LastError.message, "ERRORME", mpNames);
                     SaveError(LastError.stackTrace, "ERRSTACK", mpNames);
                     SaveError(LastError.lastMp, "ERRLMP", mpNames);
                     SaveError(LastError.nextMp, "ERRNMP", mpNames);
                     
                     return MethodResult.Ok;
                 }
             
                 protected override int MethodExit()
                 {
                     return MethodResult.Ok;
                 }
             
                 private void SaveError(string value, string mpName, string[] mpList)
                 {
                     //Remove all line field characters.
                     value = value.Replace("\n", "");
                     value = value.Replace("\r", "");
             
                     int numberOfMp = (int)Math.Ceiling((double)value.Length / 128);
                     string[] valueDivided = new string[numberOfMp];
                     string mp;
                     int lengthToCopy = 0;
                     int pos = 0;
                     int mpFound = 0;
             
                     <![CDATA[ for (int i = 0; i < numberOfMp; i++) ]]>
                     {
                        <![CDATA[ if ((pos + 128) <= value.Length) ]]>
                             lengthToCopy = 128;
                         else
                             lengthToCopy = value.Length - pos;
             
                         valueDivided[i] = value.Substring(pos, lengthToCopy);
             
                         pos += 128;
                     }
             
                    <![CDATA[for (int i = 0; i < mpList.Length; i++) ]]>
                     {
                         mp = mpName + mpFound.ToString();
                         if (mpList[i] == mp)
                         {
                             Measurement.Save(valueDivided[mpFound], i);
                             mpFound++;
                             if (mpFound == numberOfMp)
                                 return;
                         }
                     }
                 }
             
                 private void SaveError(int value, string mpName, string[] mpList)
                 {
                     <![CDATA[for (int i = 0; i < mpList.Length; i++) ]]>
                     {
                         if (mpList[i] == mpName)
                         {
                             Measurement.Save(value, i);
                             return;
                         }
                     }
                 }
             }
             
             </code>
             </example>
             
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
             <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">
             If a DriverNotConnectedException occurs, then there probably is some problems within the txapi_config.xml file.
             </exception>
        </member>
        <member name="T:Idefix.TxApi.Runtime.Measurement.MeasurementData">
            <summary>
            The class contains information about a measurement. The value of the measurement and the test result of the measurement.
            </summary>
            
            <remarks>
            The MeasurementData includes:<br />
            ValueData Value<br />
            MeasurementResult Result<br />
            </remarks>
            <seealso cref="T:Idefix.TxApi.Constants.MeasurementResult"/>
            <seealso cref="T:Idefix.TxApi.Runtime.ValueData"/>
        </member>
        <member name="F:Idefix.TxApi.Runtime.Measurement.MeasurementData.Value">
            <summary>Measured data.</summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MeasurementData.#ctor(System.String,Idefix.TxApi.Constants.MeasurementResult)">
            <summary>
                Constructor.
            </summary>
            <param name="variable">The variable name</param>
            <param name="result">The measurement result.</param>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Measurement.MeasurementData.Result">
            <summary>Result of the measurement.</summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.Measurement.MultiDutHandler">
            <summary>Class for managing measurement data for multi-dut tests.</summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SetComment(System.String,System.Int32)">
            <summary>
            Writes a comment to a measurement point.
            </summary>
            <param name="Comment">Comment text.</param>
            <param name="Index">Measurement point index.</param>
            <seealso cref="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveMpNote(System.String,System.Int32)"/>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SetComment(System.String)">
            <summary>
            Writes a comment to a measurement point.
            </summary>
            <param name="Comment">Comment text.</param>
            <seealso cref="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveMpNote(System.String)"/>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.FirstFailed">
            <summary>
                The first MP (Measurement Point) in the MPG (Measurement Point Group) that has failed the verification.
                The format is "MPG:MP".
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.FirstFailedMp">
            <summary>
                Alias for <see cref="P:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.FirstFailed"/>
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Get(System.Int32)">
            <summary>
            Gets information from a previously saved measurement.
            </summary>
            <param name="index">Zero-based index of the measurement point.</param>
            <returns>Information about the selected measurement.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Get">
            <summary>
            Gets information from a previously saved measurement.
            </summary>
            <returns>Information about the selected measurement.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Get(System.String)">
            <summary>
            Gets information from a previously saved measurement.
            </summary>
            <param name="mpId">String defining MPG and MP separated with a colon.
            <example><c>Get("MPG2:MP4");</c></example> 
            </param>
            <returns>Information about the selected measurement.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveOutput(System.String)">
            <summary>
            Saves the output log window for the current test plan.
            </summary>
            <param name="filename">
            Filename of the file to be saved. The filename could be an relative
            path, then the file will be saved in the same directory as the test plan
            resides.
            </param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveTestRecordData(System.String,System.String)">
            <summary>
            Saves any arbitrary data to the test record. Note that the
            Test Record Driver, TRD, must support this in order to get this data out to
            the test record.
            </summary>
            <param name="label">Label for the value to save.</param>
            <param name="data">Data value to be saved.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String,System.Boolean)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <param name="mpId">String defining the MP.</param>
            <param name="save">TRUE if the measurement shall be saved in the test record, else FALSE.</param>
            <returns>The verified measurement result.</returns>
            <overloads>This method has twenty overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <param name="mpId">String defining the MP.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Boolean)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <param name="save">TRUE if the measurement shall be saved in the test record, else FALSE.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.String,System.String,System.Boolean)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <param name="save">TRUE if the measurement shall be saved in the test record, else FALSE.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Int32,System.String,System.Boolean)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <param name="save">TRUE if the measurement shall be saved in the test record, else FALSE.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Double,System.String,System.Boolean)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <param name="save">TRUE if the measurement shall be saved in the test record, else FALSE.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.String,System.String)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Int32,System.String)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Double,System.String)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.String,System.Int32,System.Boolean)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <param name="save">TRUE if the measurement shall be saved in the test record, else FALSE.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <param name="save">TRUE if the measurement shall be saved in the test record, else FALSE.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Double,System.Int32,System.Boolean)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <param name="save">TRUE if the measurement shall be saved in the test record, else FALSE.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.String,System.Int32)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Int32,System.Int32)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Double,System.Int32)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="index">Zero-based index of the measurement point.</param>
            <param name="data">Measured value.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.String)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Int32)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.Save(System.Double)">
            <summary>
            Saves and compares a measurement towards the limits in the test criteria.
            The index is increased by one for each Save.
            </summary>
            <param name="data">Measured value.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveMpNote(System.String,System.String)">
            <summary>
            Writes a comment to a measurement point.
            </summary>
            <param name="comment">Comment text.</param>
            <param name="mpId">String defining the MP.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveMpNote(System.String,System.Int32)">
            <summary>
            Writes a comment to a measurement point.
            </summary>
            <param name="comment">Comment text.</param>
            <param name="index">Zero-based index of the measurement point.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveMpNote(System.String)">
            <summary>
            Writes a comment to a measurement point.
            </summary>
            <param name="comment">Comment text.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <param name="mpId">String defining the MP.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.String,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Int32,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Double,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.String,System.Int32)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Int32,System.Int32)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Double,System.Int32)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Int32)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Double)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="xValues">List of measured x-curve values.</param>
            <param name="yValues">List of measured y-curve values.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <param name="attribute1"></param>
            <param name="attribute2"></param>
            <param name="attribute3"></param>
            <param name="attribute4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <param name="attribute1"></param>
            <param name="attribute2"></param>
            <param name="attribute3"></param>
            <param name="attribute4"></param>
            <returns>Result of the measurement.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <param name="attribute1"></param>
            <param name="attribute2"></param>
            <param name="attribute3"></param>
            <param name="attribute4"></param>
            <returns>Result of the measurement.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Double,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <param name="attribute1"></param>
            <param name="attribute2"></param>
            <param name="attribute3"></param>
            <param name="attribute4"></param>
            <returns>Result of the measurement.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="xValues">List of measured x-curve values.</param>
            <param name="yValues">List of measured y-curve values.</param>
            <param name="mpId">String defining the MP.</param>
            <param name="attribute1"></param>
            <param name="attribute2"></param>
            <param name="attribute3"></param>
            <param name="attribute4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <param name="attribute1"></param>
            <param name="attribute2"></param>
            <param name="attribute3"></param>
            <param name="attribute4"></param>
            <returns>Result of the measurement.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <param name="attribute1"></param>
            <param name="attribute2"></param>
            <param name="attribute3"></param>
            <param name="attribute4"></param>
            <returns>Result of the measurement.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.SaveAdd(System.Double,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Compares the measurement towards the limits in the test criteria and saves
            the measurement by adding it to a record list for this measurement point.
            </summary>
            <param name="data">Measured value.</param>
            <param name="mpId">String defining the MP.</param>
            <param name="attribute1"></param>
            <param name="attribute2"></param>
            <param name="attribute3"></param>
            <param name="attribute4"></param>
            <returns>Result of the measurement.</returns>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.RemainingCount">
            <summary>Gets the remaining number of measurement points.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Measurement.MultiDutHandler.MeasIndex">
            <summary>Current measurement point index.</summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SetComment(System.String,System.Int32)">
            <summary>
            This should Write a comment to a future measurement point. This information will be stored in the Record file.        
            </summary>
            <param name="Comment">Comment text.</param>
            <param name="Index">Measurement index.</param>
            
            <remarks>
            The comment is saved to the measurement point, pointed out by <c>Index</c>.        
            To avoid meaningless text and bad format, all non-printable characters in the comment are filtered so they won't appear in the Record file.
            All previously saved comments for current measurement point is erased during a new <c>SaveMpNote()</c>
            </remarks>    
            
            <example>
            This example show how to save some comments.
            <code>
            Measurement.SetComment("Saving a comment to the first MP", 1);
            Measurement.SetComment("Saving a comment to the second MP", 2);
            Measurement.SetComment("Saving a comment, which will be overwritten", 3);
            Measurement.Save(1); // first comment will be applied here
            Measurement.Save(2); // second comment will be applied here
            Measurement.Save(3); // third comment will be applied here
            Measurement.SaveMpNote("This overwrites the comment added before the third MP");
            </code>
            </example>
            
            <seealso cref="M:Idefix.TxApi.Runtime.Measurement.SaveMpNote(System.String,System.Int32)"/>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SetComment(System.String)">
            <summary>
            Writes a comment to the next measurement point. This information will be stored in the Record file.        
            </summary>
            <param name="Comment">Comment text.</param>
            <param name="Index">Measurement point index.</param>
            
            <remarks>
            The comment is saved to the next measurement point.        
            To avoid meaningless text and bad format, all non-printable characters in the comment are filtered so they won't appear in the Record file.
            All previously saved comments for current measurement point is erased during a new <c>SaveMpNote()</c>
            </remarks>    
            
            <example>
            This example show how to save some comments.
            <code>
            Measurement.SetComment("Saving a comment to the first MP");
            Measurement.Save(1);
            Measurement.SetComment("Saving a comment to the second MP");
            Measurement.Save(2);
            Measurement.SetComment("Saving a comment, which will be overwritten");
            Measurement.Save(3);
            Measurement.SaveMpNote("This overwrites the comment added before the third MP");
            </code>
            </example>
            
            <seealso cref="M:Idefix.TxApi.Runtime.Measurement.SaveMpNote(System.String,System.Int32)"/>
            <overloads>This method has two overloads.</overloads>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Measurement.FirstFailed">
             <summary>Get first failed measurement point connected to current Run Item.</summary>
             <remarks>
             The <c>FirstFailed</c> property could be used to retrieve the first MP with a fail. i no fila has occured then an empty string is returned.
             It is only possible to retrieve the <c>FirstFailed</c> property.
             </remarks>
             
             <example>
             This example show how to find out if a failed measurement has occurred within this run item.
             <code>
             //First do some measurements
             Measurement.Save(1);
             Measurement.Save(1);
             Measurement.Save(1);
             Measurement.Save(1);
             Measurement.Save(1);
             
             //check if a fail has occured
             string FirstError = Measurement.FirstFailed;
            
             if ( FirstError.Length > 0)
                Output.TextOutError("There was at least one error during this run item. The first error occurred at {0}", FirstError);
             </code>
             </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Get(System.Int32)">
             <summary>
             Retrieves information from a measurement point, It is possible to retrieve the stored measurment value and status on the measurement (If the measurment passed, failed or is not tested yet).
             </summary>
             <param name="index">Zero-based index of the measurement point to retrieve information from.</param>
             <returns><c>MeasurementData</c> which holds the measured value of the measurement point and a <c>MeasurementResult</c> with the status: Passed, Failed or NotTested</returns>
            
             <example>
             This example retrieves status for all measurments whithin this this test method an prints the result in the log window in Test Manager.
             <code>
             private void SummarizeMeasurmentresults()
             {
                int iFailed = 0;
                int iPassed = 0;
                int iNotTested = 0;
                Measurement.MeasurementData mdata;
            
                for (Measurement.MeasIndex = 0; Measurement.RemainingCount > 0; Measurement.MeasIndex++)
                {
                    mdata = Measurement.Get(Measurement.MeasIndex);
                    switch (mdata.Result)
                    {
                        case MeasurementResult.Passed:
                            iPassed++;
                            break;
                        case MeasurementResult.Failed:
                            iFailed++;
                            break;
                        case MeasurementResult.NotTested:
                            iNotTested++;
                            break;
                    }
                }
                Output.TextOut("Passed: {0}    Failed: {1}   Not Testes: {2}", iPassed, iFailed, iNotTested);
             }
             </code>
             </example>
             
             <remarks>
             Retrieves information from the measurement point where the mpIndex is pointing to.
             You can get the measured value. If no measurement has occured the value will be 0. Use
             the <c>MeasurementResult</c> to figure out whether the measurement is saved or not.
             </remarks>
             
             <overloads>This method has three overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Get">
             <summary>
             Retrieves information from a measurement point, It is possible to retrieve the stored measurment value and status on the measurement (If the measurment passed, failed or is not tested yet).
             </summary>
             <returns><c>MeasurementData</c> which holds the measured value of the measurement point and a <c>MeasurementResult</c> with the status: Passed, Failed or NotTested</returns>
            
             <example>
             This example stores an MPNote in the record file if a measured value failed.
             <code>
             Measurement.Save(iMeasuredValue1);
             if ( Measurement.Get().Result == MeasurementResult.Failed )
                Measurement.SaveMpNote("Something went wrong here.");
            
             Measurement.Save(iMeasuredValue2);
             Measurement.MeasurementData mdata = Measurement.Get();
             if (mdata.Result == MeasurementResult.Failed)
                Measurement.SaveMpNote("Something went wrong here.");
             </code>
             </example>
             
             <remarks>
             Retrieves information from the previously saved measurement point.
             Actually the function retrieves information from the measurement point, the built in <c>MeasIndex</c> is pointing to.
             
             You can get the measured value. If no measurement has occured the value will be 0. Use
             the <c>MeasurementResult</c> to figure out whether the measurement is saved or not.
             </remarks>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Get(System.String)">
             <summary>
             Retrieves information from a measurement point, It is possible to retrieve the stored measurment value and status on the measurement (If the measurment passed, failed or is not tested yet).
             </summary>
             <param name="mpId">String with the ID name of the MP or the MPG and MP<br/>
             Syntax:<br/>
             "MP" Retrieves the information from the Measurement Point connected to current Run item<br/>
             "MPG:MP" Retrieves the information from the Measurement Point within current Test Plan<br/>
             </param>
             <returns><c>MeasurementData</c> which holds the measured value of the measurement point and a <c>MeasurementResult</c> with the status: Passed, Failed or NotTested</returns>
             
             <example>
             This example stores an MPNote in the record file if a measured value failed.
             <code>
             Measurement.MeasurementData mdata;
            
             //It is possible to retrieve all Measurement Points whitin scope using the ID string
             //(connected to current Run Item in the testplan).
             mdata = Measurement.Get("M1_1");
            
             //It is possible to retrieve Measurement Points not whitin scope
             //(not connected to current Run Item in the testplan) using colon syntax.
             mdata = Measurement.Get("M2:M2_1");
             </code>
             </example>
             
             <remarks>
             Retrieves information from the measurement point with string ID equal to mpId.
             You can get the measured value. If no measurement has occured the value will be 0. Use
             the <c>MeasurementResult</c> to figure out whether the measurement is saved or not.
             </remarks>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveOutput(System.String)">
            <summary>
            Saves the output log window for the current test plan to a file.
            </summary>
            <param name="filename">
            Filename of the file to be saved. The filename could be an relative
            path, then the file will be saved in the same directory as the test plan resides.
            </param>
            
            
            <remarks>
            
            <h5>Known bugs / Issues</h5>
            There has been a previous bug with <c>SaveOutput()</c>.<br />
            <list type = "table">
               <item>
                  <term></term>
                  <description><c>SaveOutput(...)</c> didn't take care of the delay settings in Test Manager</description>
                  <description>In TxApi revision R6D and earlier, <c>SaveOutput(...)</c> didn't take care of the delay setting in Test Manager.
                  The <c>TextOut()</c> didn't print text that was not printed to the log window due to the delay setting in Test Manager. This problem is fixed now.
                  </description>
               </item>
            </list>
            
            </remarks>
            
            <example>
            This example shows how to save the the log window in Test Manager to a file.
            <code>
            Output.TextOut("Writing to the log window in Test Manager...");
            try
            {
                Measurement.SaveOutput(@"C:\DATA\ITP\TEMP\MY_LOG.TXT"); //Make sure to write where you have permissions.
                Measurement.SaveOutput("MY_LOG.TXT"); //Saved in the same directory as the testplan.
            }
            catch (Idefix.Exceptions.MeasurementException ex)
            {
            }
            </code>
            </example>
            
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A Idefix.Exceptions.MeasurementException is thrown if it was not possible to create the file.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveTestRecordData(System.String,System.String)">
            <summary>
            Saves any arbitrary data to the test record. Note that the Test Record Driver (TRD), must
            support this in order to get this data out to the test record file. If enabling the TRD log in TM then this data is written to the log file.
            </summary>
            <param name="label">Label for the value to save.</param>
            <param name="data">Data value to be saved.</param>
            
            <remarks>
            <para>
            The <c>SaveTestRecordData()</c> method pair a label with a string value and stores this in the test record.
            The label has nothing to do with any data labels in the test criteria or the test plan, nor has it anything to do with the 
            saved results from measurement points. The test method implementing this function must be connected to at least one measurement point. 
            The log file is created when the test record is saved.
            </para>
            
            <para>
            Neither the Pamela TRD driver nor the PamelaNet TRD driver supports writing these values to the test record file. However by selecting
            "Fault Trace->Debug" and checking DUT (TRD) in Test Manager you can get a printout of the information to 
            <![CDATA[C:\Data\ITP\Temp\TestRecord_Dbg_1.csv ]]>. This file can easily be opened in Excel.
            </para>
            
            <para>
            By using this method a test developer could printout values of interest that would be “invisible” until you check the 
            DUT (TRD) box in the Test Manager.
            </para>
            
            <para>
            It is possible to write your own TRD driver which could send these values to the test record file. 
            </para>
            
            </remarks>
            
            <example>This example shows how to write data to the log file or test record file.
            <code>
            // Save something to be written to a log file
            Measurement.SaveTestRecordData("LABEL1", "STRING 1");
            Measurement.SaveTestRecordData("LABEL2", "STRING 2");
            </code>
            
            <b>Output:</b><br />
            This line is written to the Log file <![CDATA[C:\Data\ITP\Temp\TestRecord_Dbg_1.csv ]]> if "DUT (TRD)" is enabled in the Debug dialog in Test Manager<br />
            <br />
            .<br />
            .<br />
            .<br />
            RecordData;LABEL1;"STRING 1";;LABEL2;"STRING 2";;;<br />
            .<br />
            .<br />
            .<br />
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String,System.Boolean)">
             <summary>
             Verifies the measured curve values towards the measurement point in the test criteria. The measurement is not saved if the save parameter is <c>false</c>.
             The measurement point according to the mpId string will be used.
             </summary>
             
             <param name="xValues">List of measured curve x-values.</param>
             <param name="yValues">List of measured curve y-values.</param>
             <param name="mpId">String with the ID name of the measurement point.</param>
             <param name="save"><c>true</c> if the measurement shall be saved in the test record, else <c>false</c></param> 
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             If the save argument is equal to <c>false</c> then the measurement is verified but not saved (print to output tab is configurable). This can be useful if you like to verify a measurement without saving the result to the record file.
             The <c>MeasIndex</c> is set to the next measurment point after save using mpId.
             </remarks>
             
             <example>
             This example show how to try to save a curve. If it fails then some adjusment/calibrations is performed up to 10 times.
             <code>
             static int iValueX = 0;
             private void DoMeasure(ref List&lt;double&gt; xValues, ref List&lt;double&gt; yValues)
             {
                xValues.Clear();
                yValues.Clear();
            
                xValues.Add(1 + iValueX);
                yValues.Add(1);
            
                xValues.Add(2 + iValueX);
                yValues.Add(2);
            
                xValues.Add(4 + iValueX);
                yValues.Add(4);
             }
             
             private void MeasureRepeat()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                int iLoop = 0;
                string strMPNote = "Failed {0} times.";
                iValueX = -3;
            
                for (iLoop = 0; iLoop &lt; 10; iLoop++)
                {
                    DoMeasure(ref xValues, ref yValues);
                    if (Measurement.Save(xValues, yValues, "M1_6", false) == MeasurementResult.Passed)
                    {
                        strMPNote = "Passed after {0} measurements. Calibration set to {1}";
                        break;
                    }
                    DoAdjustment();
                }
                 Measurement.Save(xValues, yValues, "M1_6");
                 Measurement.SaveMpNote(string.Format(strMPNote, iLoop, iValueX));
             }
             
             private void DoAdjustment()
             {
                 iValueX++;
             }
             </code>
             </example>
             <overloads>This method has twenty overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            Saves and verifies the measured curve values towards current measurement point in the test criteria.
            The measurement point according to the mpId string will be used.
            </summary>
            
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <param name="mpId">String with the ID name of the measurement point.</param>
            <returns>The verified <c>MeasurementResult</c></returns> 
            
            <remarks>
            The <c>MeasIndex</c> is set to the next measurment point after save using mpId.
            It is only possible to save to a measurement point connected to current Run item.
            </remarks>
            
            <example>
            This example show how to save four measurments. A string, integer, double and a curve
            <code>
            private void SaveExampleMPID()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", "M1_8"); //Save an string to M1_8
                Measurement.Save(1, "M1_2");  //Save an integer to M1_2
                Measurement.Save(11.1, "M1_7"); //Save an double to M1_7
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, "M1_6"); //Save a curve to M1_6
            }
            </code>
            </example>
            
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.<br />
            A MeasurementException is thrown if the size xValues and yValues is not equal.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Boolean)">
             <summary>
             Verifies the measured curve values towards the measurement point in the test criteria. The measurement is not saved if the save parameter is <c>false</c>.
             The verification will use the measurement point according to the zero based index.
             </summary>
             
             <param name="xValues">List of measured curve x-values.</param>
             <param name="yValues">List of measured curve y-values.</param>
             <param name="index">Zero-based index of the measurement point.</param>
             <param name="save"><c>true</c> if the measurement shall be saved in the test record, else <c>false</c></param> 
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             If the save argument is equal to <c>false</c> then the measurement is verified but not saved (print to output tab is configurable). This can be useful if you like to verify a measurement without saving the result to the record file.
             The <c>MeasIndex</c> is set to the next measurment point after save using an index.
             </remarks>
             
             <example>
             This example show how to try to save a curve. If it fails then some adjusment/calibrations is performed up to 10 times.
             <code>
             static int iValueX = 0;
             private void DoMeasure(ref List&lt;tdouble&gt; xValues, ref List&lt;double&gt; yValues)
             {
                xValues.Clear();
                yValues.Clear();
            
                xValues.Add(1 + iValueX);
                yValues.Add(1);
            
                xValues.Add(2 + iValueX);
                yValues.Add(2);
            
                xValues.Add(4 + iValueX);
                yValues.Add(4);
             }
             private void MeasureRepeat()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                int iLoop = 0;
                string strMPNote = "Failed {0} times.";
                iValueX = -3;
            
                for (iLoop = 0; iLoop &lt; 10; iLoop++)
                {
                    DoMeasure(ref xValues, ref yValues);
                    if (Measurement.Save(xValues, yValues, 0, false) == MeasurementResult.Passed)
                    {
                        strMPNote = "Passed after {0} measurements. Calibration set to {1}";
                        break;
                    }
                    DoAdjustment();
                }
                 Measurement.Save(xValues, yValues, 0);
                 Measurement.SaveMpNote(string.Format(strMPNote, iLoop, iValueX));
             }
             
             private void DoAdjustment()
             {
                 iValueX++;
             }
             </code>
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.<br />
             A MeasurementException is thrown if the size xValues and yValues is not equal.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Saves and verifies the measured curve values towards current measurement point in the test criteria.
            The measurement point according to the zero based index will be used.
            </summary>
            
            <param name="xValues">List of measured curve x-values.</param>
            <param name="yValues">List of measured curve y-values.</param>
            <param name="index">Zero-based index of the measurement point.</param>
            <returns>The verified <c>MeasurementResult</c></returns> 
            
            <remarks>
            The <c>MeasIndex</c> is set to the next measurment point after save using an index.
            </remarks>
            
            <example>
            This example show how to save four measurments using the zero based index. A string, integer, double and a curve
            <code>
            private void SaveExampleIndex()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", 2); //Save an string to the third MP
                Measurement.Save(4, 0);  //Save an integer to the first MP
                Measurement.Save(7.8, 1); //Save an double to the second MP
            
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, 3); //Save a curve to the fourth MP
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.<br />
            A MeasurementException is thrown if the size xValues and yValues is not equal.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
             <summary>
             Saves and verifies the measured curve values towards current measurement point in the test criteria.
             </summary>
             
             <param name="xValues">List of measured curve x-values.</param>
             <param name="yValues">List of measured curve y-values.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The measurement point used for the verification is the one pointed out by <c>MeasIndex</c>
             The <c>MeasIndex</c> is increased by one (pointing to the next measurement point) for each Save.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve
             <code>
             private void SaveExample()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123"); //Save an string
                Measurement.Save(4);  //Save an integer
                Measurement.Save(7.8); //Save an double
            
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues); //Save a curve
            }
             </code>
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.<br />
             A MeasurementException is thrown if the size xValues and yValues is not equal.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.String,System.String,System.Boolean)">
            <summary>
            Verifies the measured string value towards the measurement point in the test criteria. The measurement is not saved if the save parameter is <c>false</c>.
            The measurement point according to the mpId string will be used.
            </summary>
            <param name="data">Measured string value.</param>
            <param name="mpId">String with the ID name of the measurement point.</param>
            <param name="save"><c>true</c> if the measurement shall be saved in the test record, else <c>false</c></param>
            <returns>The verified <c>MeasurementResult</c></returns>
            
            <remarks>
            If the save argument is equal to <c>false</c> then the measurement is verified but not saved (print to output tab is configurable). This can be useful if you like to verify a measurement without saving the result to the record file.
            The <c>MeasIndex</c> is set to the next measurment point after save using mpId.
            </remarks>
            
            <example>
            This example show how to verify but not save four measurments. A string, integer, double and a curve.
            These measurements will not be stored in the record file.
            <code>
            private void SaveExampleMPID()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", "M1_8", false); //Verify but not save an string to M1_8
                Measurement.Save(1, "M1_2", false);  //Verify but not save an integer to M1_2
                Measurement.Save(11.1, "M1_7", false); //Verify but not save an double to M1_7
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, "M1_6", false); //Verify but not save a curve to M1_6
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Int32,System.String,System.Boolean)">
            <summary>
            Verifies the measured integer value towards the measurement point in the test criteria. The measurement is not saved if the save parameter is <c>false</c>.
            The measurement point according to the mpId string will be used.
            </summary>
            <param name="data">Measured integer value.</param>
            <param name="mpId">String with the ID name of the measurement point.</param>
            <param name="save"><c>true</c> if the measurement shall be saved in the test record, else <c>false</c></param>
            <returns>The verified <c>MeasurementResult</c></returns>
            
            <remarks>
            If the save argument is equal to <c>false</c> then the measurement is verified but not saved (print to output tab is configurable). This can be useful if you like to verify a measurement without saving the result to the record file.
            The <c>MeasIndex</c> is set to the next measurment point after save using mpId.
            </remarks>
            
            <example>
            This example show how to verify but not save four measurments. A string, integer, double and a curve.
            These measurements will not be stored in the record file.
            <code>
            private void SaveExampleMPID()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", "M1_8", false); //Verify but not save an string to M1_8
                Measurement.Save(1, "M1_2", false);  //Verify but not save an integer to M1_2
                Measurement.Save(11.1, "M1_7", false); //Verify but not save an double to M1_7
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, "M1_6", false); //Verify but not save a curve to M1_6
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Double,System.String,System.Boolean)">
            <summary>
            Verifies the measured double value towards the measurement point in the test criteria. The measurement is not saved if the save parameter is <c>false</c>.
            The measurement point according to the mpId string will be used.
            </summary>
            <param name="data">Measured double value.</param>
            <param name="mpId">String with the ID name of the measurement point.</param>
            <param name="save"><c>true</c> if the measurement shall be saved in the test record, else <c>false</c></param>
            <returns>The verified <c>MeasurementResult</c></returns>
            
            <remarks>
            If the save argument is equal to <c>false</c> then the measurement is verified but not saved (print to output tab is configurable). This can be useful if you like to verify a measurement without saving the result to the record file.
            The <c>MeasIndex</c> is set to the next measurment point after save using mpId.
            </remarks>
            
            <example>
            This example show how to verify but not save four measurments. A string, integer, double and a curve.
            These measurements will not be stored in the record file.
            <code>
            private void SaveExampleMPID()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", "M1_8", false); //Verify but not save an string to M1_8
                Measurement.Save(1, "M1_2", false);  //Verify but not save an integer to M1_2
                Measurement.Save(11.1, "M1_7", false); //Verify but not save an double to M1_7
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, "M1_6", false); //Verify but not save a curve to M1_6
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.String,System.String)">
            <summary>
            Saves and verifies the measured string value towards the measurement point in the test criteria.
            The measurement point according to the mpId string will be used.
            </summary>
            <param name="data">Measured string value.</param>
            <param name="mpId">String with the ID name of the measurement point.</param>
            <returns>The verified <c>MeasurementResult</c></returns>
            
            <remarks>
            The <c>MeasIndex</c> is set to the next measurment point after save using mpId.
            It is only possible to save to a measurement point connected to current Run item.
            </remarks>
            <example>
            This example show how to save four measurments. A string, integer, double and a curve
            <code>
            private void SaveExampleMPID()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", "M1_8"); //Save an string to M1_8
                Measurement.Save(1, "M1_2");  //Save an integer to M1_2
                Measurement.Save(11.1, "M1_7"); //Save an double to M1_7
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, "M1_6"); //Save a curve to M1_6
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Int32,System.String)">
            <summary>
            Saves and verifies the measured integer value towards the measurement point in the test criteria.
            The measurement point according to the mpId string will be used.
            </summary>
            <param name="data">Measured integer value.</param>
            <param name="mpId">String with the ID name of the measurement point.</param>
            <returns>The verified <c>MeasurementResult</c></returns>
            
            <remarks>
            The <c>MeasIndex</c> is set to the next measurment point after save using mpId.
            It is only possible to save to a measurement point connected to current Run item.
            </remarks>
            <example>
            This example show how to save four measurments. A string, integer, double and a curve
            <code>
            private void SaveExampleMPID()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", "M1_8"); //Save an string to M1_8
                Measurement.Save(1, "M1_2");  //Save an integer to M1_2
                Measurement.Save(11.1, "M1_7"); //Save an double to M1_7
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, "M1_6"); //Save a curve to M1_6
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Double,System.String)">
            <summary>
            Saves and verifies the measured double value towards the measurement point in the test criteria.
            The measurement point according to the mpId string will be used.
            </summary>
            <param name="data">Measured double value.</param>
            <param name="mpId">String with the ID name of the measurement point.</param>
            <returns>The verified <c>MeasurementResult</c></returns>
            
            <remarks>
            The <c>MeasIndex</c> is set to the next measurment point after save using mpId.
            It is only possible to save to a measurement point connected to current Run item.
            </remarks>
            <example>
            This example show how to save four measurments. A string, integer, double and a curve
            <code>
            private void SaveExampleMPID()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", "M1_8"); //Save an string to M1_8
                Measurement.Save(1, "M1_2");  //Save an integer to M1_2
                Measurement.Save(11.1, "M1_7"); //Save an double to M1_7
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, "M1_6"); //Save a curve to M1_6
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.String,System.Int32,System.Boolean)">
            <summary>
            Verifies the measured string value towards the measurement point in the test criteria. The measurement is not saved if the save parameter is <c>false</c>.
            The verification will use the measurement point according to the zero based index.
            </summary>
            
            <param name="data">Measured string value.</param>
            <param name="index">Zero based index of the measurement point.</param>
            <param name="save"><c>true</c> if the measurement shall be saved in the test record, else <c>false</c></param>
            <returns>The verified <c>MeasurementResult</c></returns> 
            
            <remarks>
            If the save argument is equal to <c>false</c> then the measurement is verified but not saved (print to output tab is configurable). This can be useful if you like to verify a measurement without saving the result to the record file.
            The <c>MeasIndex</c> is set to the next measurment point after save using an index.
            </remarks>
            
            <example>
            This example show how to repeat a measurment up to 10 times to get it passed. 
            A MpNote is saved in the record file to trace what happend.
            <code>
            static string strValue="";
            private string DoMeasure()
            {
                strValue = strValue + "Z";
                return strValue;
            }
            private void MeasureRepeat()
            {
                int iLoop = 0;
                string strMPNote = "Failed {0} times.";
                strValue = 0;
            
                for (iLoop = 0; iLoop &lt; 10; iLoop++)
                {
                    strValue = DoMeasure();
                    if (Measurement.Save(strValue, 0, false) == MeasurementResult.Passed)
                    {
                        strMPNote = "Passed after {0} measurements.";
                        break;
                    }
                }
                Measurement.Save(strValue, 0);
                Measurement.SaveMpNote(string.Format(strMPNote, iLoop));
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifies the measured integer value towards the measurement point in the test criteria. The measurement is not saved if the save parameter is <c>false</c>.
            The verification will use the measurement point according to the zero based index.
            </summary>
            
            <param name="data">Measured integer value.</param>
            <param name="index">Zero based index of the measurement point.</param>
            <param name="save"><c>true</c> if the measurement shall be saved in the test record, else <c>false</c></param>
            <returns>The verified <c>MeasurementResult</c></returns> 
            
            <remarks>
            If the save argument is equal to <c>false</c> then the measurement is verified but not saved (print to output tab is configurable). This can be useful if you like to verify a measurement without saving the result to the record file.
            The <c>MeasIndex</c> is set to the next measurment point after save using an index.
            </remarks>
            
            <example>
            This example show how to repeat a measurment up to 10 times to get it passed. 
            A MpNote is saved in the record file to trace what happend.
            <code>
            static int iValue=0;
            private int DoMeasure()
            {
                iValue++;
                return iValue;
            }
            private void MeasureRepeat()
            {
                int iLoop = 0;
                string strMPNote = "Failed {0} times.";
                iValue = 0;
            
                for (iLoop = 0; iLoop &lt; 10; iLoop++)
                {
                    iValue = DoMeasure();
                    if (Measurement.Save(iValue, 0, false) == MeasurementResult.Passed)
                    {
                        strMPNote = "Passed after {0} measurements.";
                        break;
                    }
                }
                Measurement.Save(iValue, 0);
                Measurement.SaveMpNote(string.Format(strMPNote, iLoop));
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Double,System.Int32,System.Boolean)">
            <summary>
            Verifies the measured double value towards the measurement point in the test criteria. The measurement is not saved if the save parameter is <c>false</c>.
            The verification will use the measurement point according to the zero based index.
            </summary>
            
            <param name="data">Measured double value.</param>
            <param name="index">Zero based index of the measurement point.</param>
            <param name="save"><c>true</c> if the measurement shall be saved in the test record, else <c>false</c></param>
            <returns>The verified <c>MeasurementResult</c></returns> 
            
            <remarks>
            If the save argument is equal to <c>false</c> then the measurement is verified but not saved (print to output tab is configurable). This can be useful if you like to verify a measurement without saving the result to the record file.
            The <c>MeasIndex</c> is set to the next measurment point after save using an index.
            </remarks>
            
            <example>
            This example show how to repeat a measurment up to 10 times to get it passed. 
            A MPNote is saved in the record file to trace what happend.
            <code>
            static int iValue=0;
            private int DoMeasure()
            {
                iValue++;
                return iValue;
            }
            private void MeasureRepeat()
            {
                int iLoop = 0;
                string strMPNote = "Failed {0} times.";
                iValue = 0;
            
                for (iLoop = 0; iLoop &lt; 10; iLoop++)
                {
                    iValue = DoMeasure();
                    if (Measurement.Save(iValue, 0, false) == MeasurementResult.Passed)
                    {
                        strMPNote = "Passed after {0} measurements.";
                        break;
                    }
                }
                Measurement.Save(iValue, 0);
                Measurement.SaveMpNote(string.Format(strMPNote, iLoop));
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.String,System.Int32)">
            <summary>
            Saves and verifies the measured string value towards the measurement point in the test criteria.
            The measurement point according to the zero based index will be used.
            </summary>
            
            <param name="data">Measured string value.</param>
            <param name="index">Zero based index of the measurement point.</param>
            <returns>The verified <c>MeasurementResult</c></returns> 
            
            <remarks>
            The <c>MeasIndex</c> is set to the next measurment point after save using an index.
            </remarks>
            
            <example>
            This example show how to save four measurments using the zero based index. A string, integer, double and a curve
            <code>
            private void SaveExampleIndex()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", 2); //Save an string to the third MP
                Measurement.Save(4, 0);  //Save an integer to the first MP
                Measurement.Save(7.8, 1); //Save an double to the second MP
            
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, 3); //Save a curve to the fourth MP
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Int32,System.Int32)">
            <summary>
            Saves and verifies the measured integer value towards the measurement point in the test criteria.
            The measurement point according to the zero based index will be used.
            </summary>
            
            <param name="data">Measured integer value.</param>
            <param name="index">Zero based index of the measurement point.</param>
            <returns>The verified <c>MeasurementResult</c></returns> 
            
            <remarks>
            The <c>MeasIndex</c> is set to the next measurment point after save using an index.
            </remarks>
            
            <example>
            This example show how to save four measurments using the zero based index. A string, integer, double and a curve
            <code>
            private void SaveExampleIndex()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", 2); //Save an string to the third MP
                Measurement.Save(4, 0);  //Save an integer to the first MP
                Measurement.Save(7.8, 1); //Save an double to the second MP
            
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, 3); //Save a curve to the fourth MP
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Double,System.Int32)">
            <summary>
            Saves and verifies the measured double value towards the measurement point in the test criteria.
            The measurement point according to the zero based index will be used.
            </summary>
            
            <param name="data">Measured double value.</param>
            <param name="index">Zero based index of the measurement point.</param>
            <returns>The verified <c>MeasurementResult</c></returns> 
            
            <remarks>
            The <c>MeasIndex</c> is set to the next measurment point after save using an index.
            </remarks>
            
            <example>
            This example show how to save four measurments using the zero based index. A string, integer, double and a curve
            <code>
            private void SaveExampleIndex()
            {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123", 2); //Save an string to the third MP
                Measurement.Save(4, 0);  //Save an integer to the first MP
                Measurement.Save(7.8, 1); //Save an double to the second MP
            
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues, 3); //Save a curve to the fourth MP
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.String)">
             <summary>
             Saves and verifies the measured string value towards current measurement point in the test criteria.
             </summary>
             
             <param name="data">Measured string value.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The measurement point used for the verification is the one pointed out by <c>MeasIndex</c>.
             The <c>MeasIndex</c> is increased by one (pointing to the next measurement point) for each Save.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve
             <code>
             private void SaveExample()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123"); //Save an string
                Measurement.Save(4);  //Save an integer
                Measurement.Save(7.8); //Save an double
            
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues); //Save a curve
            }
             </code>
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Int32)">
             <summary>
             Saves and verifies the measured integer value towards current measurement point in the test criteria.
             </summary>
             
             <param name="data">Measured integer value.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The measurement point used for the verification is the one pointed out by <c>MeasIndex</c>.
             The <c>MeasIndex</c> is increased by one (pointing to the next measurement point) for each Save.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve
             <code>
             private void SaveExample()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123"); //Save an string
                Measurement.Save(4);  //Save an integer
                Measurement.Save(7.8); //Save an double
            
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues); //Save a curve
            }
             </code>
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.Save(System.Double)">
             <summary>
             Saves and verifies the measured double value towards current measurement point in the test criteria.
             </summary>
             
             <param name="data">Measured double value.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The measurement point used for the verification is the one pointed out by <c>MeasIndex</c>.
             The <c>MeasIndex</c> is increased by one (pointing to the next measurement point) for each Save.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve
             <code>
             private void SaveExample()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.Save("XYZ123"); //Save an string
                Measurement.Save(4);  //Save an integer
                Measurement.Save(7.8); //Save an double
            
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.Save(xValues, yValues); //Save a curve
            }
             </code>
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveMpNote(System.String,System.String)">
             <summary>
             Writes a comment to a measurement point. This information will be stored in the Record file.
             The measurement with the name equal the parameter mpId will be used.
             </summary>
             
             <param name="comment">Comment string, which will be stored in the record file.</param>
             <param name="mpId">String specifying the name of the measurement point.</param>
             
             <remarks>
             The comment is saved to the measurement point, pointed out by mpId which is part of the call.
             The <c>MeasIndex</c> is changed after the call to point at the same measurement point affected by the call. If you directly after this call makes a call to <c>Save(...)</c>
             without any index parameters then the save will be performed on the next measurement point, but if you call <c>SaveMpNote(string)</c> instead then that save will be on the previous measurement point.
             This is probably not what you excpect. To avoid this problem please don't mix your code using index and not index.
             <br />
             Only one comment could be saved for each measurement point.
             To avoid meaningless text and bad format, all non-printable characters in the comment are filtered so they won't appear in the Record file.
             All previously saved comments for current measurement point is erased during a new <c>SaveMpNote()</c>
             </remarks>        
             
             <example>
             This example show how to save measurements and MPNotes in differents ways using index and not using index.
             <code>
                //Save without using index
                Measurement.Save(1);//save 1 to first MP
                Measurement.SaveMpNote("Save a comment to the first MP");
            
                Measurement.Save(2);//save 2 to second MP
                Measurement.SaveMpNote("Save a comment to the second MP");
            
                //Save the note first using index and the measurement after.
                Measurement.SaveMpNote("Save a comment to the third MP", 2);
                Measurement.Save(3);//save 3 to third MP
            
                //Save the measurement first using index and a note after.
                Measurement.Save(4, 3);//save 4 to fourth MP
                Measurement.SaveMpNote("Save a comment to the fourth MP");
            
                //Save the measurement first using MP name and a note after.
                Measurement.Save(5, "M1_5");//save 5 to MP M1_5
                //Illegal characters in this string will not be stored to the Record File
                Measurement.SaveMpNote("Save a \u0006comment \u000ato \u000d\u000a MP " + Environment.NewLine  + "M1_5" );
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file.<br />
             <br />
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-26 13:14:47.344<br />
             &lt;MPNOTE&gt; "Save a comment to the first MP"<br />
             &lt;MP:I&gt; M1_2,PASS,2,2011-04-26 13:14:47.344<br />
             &lt;MPNOTE&gt; "Save a comment to the second MP"<br />
             &lt;MP:I&gt; M1_3,PASS,3,2011-04-26 13:14:47.344<br />
             &lt;MPNOTE&gt; "Save a comment to the third MP"<br />
             &lt;MP:I&gt; M1_4,PASS,4,2011-04-26 13:14:47.344<br />
             &lt;MPNOTE&gt; "Save a comment to the fourth MP"<br />
             &lt;MP:I&gt; M1_5,PASS,5,2011-04-26 13:14:47.359<br />
             &lt;MPNOTE&gt; "Save a comment to MP M1_5"<br />
             
             </example>
             
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             For example when trying to save a comment to a measurement point which does not exist.<br />
             </exception>
             <overloads>This method has three overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveMpNote(System.String,System.Int32)">
             <summary>
             Writes a comment to a measurement point. This information will be stored in the Record file.
             The measurement point according to the zero based index will be used.
             </summary>
             
             <param name="comment">Comment string, which will be stored in the record file.</param>
             <param name="index">Zero-based index of the measurement point.</param>
             
             <remarks>
             The comment is saved to the measurement point, pointed out by the zero based index which is part of the call.
             The <c>MeasIndex</c> is changed after the call to point at the same measurement point affected by the call. If you directly after this call makes a call to <c>Save(...)</c>
             without any index parameters then the save will be performed on the next measurement point, but if you call <c>SaveMpNote(string)</c> instead then that save will be on the previous measurement point.
             This is probably not what you excpect. To avoid this problem please don't mix your code using index and not index.
             <br />
             Only one comment could be saved for each measurement point. 
             To avoid meaningless text and bad format, all non-printable characters in the comment are filtered so they won't appear in the Record file.
             All previously saved comments for current measurement point is erased during a new <c>SaveMpNote()</c>
             </remarks>        
             
             <example>
             This example show how to save measurements and MPNotes in differents ways using index and not using index.
             <code>
                //Save without using index
                Measurement.Save(1);//save 1 to first MP
                Measurement.SaveMpNote("Save a comment to the first MP" );
            
                Measurement.Save(2);//save 2 to second MP
                Measurement.SaveMpNote("Save a comment to the second MP");
            
                //Save the note first using index and the measurement after.
                Measurement.SaveMpNote("Save a comment to the third MP", 2);
                Measurement.Save(3);//save 3 to third MP
            
                //Save the measurement first using index and a note after.
                Measurement.Save(4, 3);//save 4 to fourth MP
                Measurement.SaveMpNote("Save a comment to the fourth MP");
            
                //Save the measurement first using MP name and a note after.
                Measurement.Save(5, "M1_5");//save 5 to MP M1_5
                //Illegal  characters in this string will not be stored to the Record File
                Measurement.SaveMpNote("Save a \u0006comment \u000ato \u000d\u000a MP " + Environment.NewLine  + "M1_5" );
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file.<br />
             <br />
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-26 13:14:47.344<br />
             &lt;MPNOTE&gt; "Save a comment to the first MP"<br />
             &lt;MP:I&gt; M1_2,PASS,2,2011-04-26 13:14:47.344<br />
             &lt;MPNOTE&gt; "Save a comment to the second MP"<br />
             &lt;MP:I&gt; M1_3,PASS,3,2011-04-26 13:14:47.344<br />
             &lt;MPNOTE&gt; "Save a comment to the third MP"<br />
             &lt;MP:I&gt; M1_4,PASS,4,2011-04-26 13:14:47.344<br />
             &lt;MPNOTE&gt; "Save a comment to the fourth MP"<br />
             &lt;MP:I&gt; M1_5,PASS,5,2011-04-26 13:14:47.359<br />
             &lt;MPNOTE&gt; "Save a comment to MP M1_5"<br />
             
             </example>
             
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             For example when trying to save a comment to a measurement point which does not exist.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveMpNote(System.String)">
            <summary>
            Writes a comment to the current measurement point. This information will be stored in the Record file.
            </summary>
            
            <param name="comment">Comment string, which will be stored in the record file.</param>
            
            <remarks>
            The comment is saved to the measurement point, pointed out by <c>MeasIndex</c>.
            The <c>MeasIndex</c> is unchanged after the call to <c>SaveMpNote(string)</c> is performed. Only one comment could be saved for each measurement point.
            To avoid meaningless text and bad format, all non-printable characters in the comment are filtered so they won't appear in the Record file.
            All previously saved comments for current measurement point is erased during a new <c>SaveMpNote()</c>
            </remarks>        
            
            <example>
            This example show how to save some MPNotes comments.
            <code>
            Measurement.Save(1);
            Measurement.SaveMpNote("Saving a comment to the first MP");
            Measurement.Save(1);
            Measurement.SaveMpNote("Saving a comment to the second MP");
            Measurement.Save(1);
            Measurement.Save(1);
            Measurement.SaveMpNote("Saving a comment to the fourth MP");
            </code>
            <br /><br />
            Illegal characters in this example are not stored to the record file.
            <code>
            Measurement.Save(1);
            Measurement.SaveMpNote("Saving a comment to the first MP" + Environment.NewLine);
            Measurement.Save(1);
            Measurement.SaveMpNote("Saving a comment to the second \u000d\u000aMP");
            Measurement.Save(1);
            Measurement.Save(1);
            Measurement.SaveMpNote("Saving a comment to the fourth MP");
            </code>
            <br /><br />
            This example writes a comment to the record file if the last measurement failed.
            <code>
            Measurement.Save(-1);
            if (Measurement.Get().Result == MeasurementResult.Failed)
            {
                Measurement.SaveMpNote("Something went wrong here...");
            }
            </code>
            
            This example show how saving an MPNotes comment can be done previously to the first measurement point. This will only work for the first measurement point.
            <code>
            Measurement.SaveMpNote("Saving a comment to the first MP");
            Measurement.Save(1);
            Measurement.Save(2);
            Measurement.SaveMpNote("Saving a comment to the second MP");
            </code>
            </example>
            
            <exception cref="T:Idefix.Exceptions.MeasurementException">
            A MeasurementException is thrown if a failure occur.
            For example when trying to save a comment to a measurement point which does not exist.<br />
            <br />
            However, when saving a comment before any measurement points have been carried out will add it to the first measurement point.<br />
            For any other occurence it will apply to the measurement point just carried out.<br />
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String)">
             <summary>
             Saves and verifies the measured curve values towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the mpId string will be used.
             </summary>
             
             <param name="xValues">List of measured curve x-values.</param>
             <param name="yValues">List of measured curve y-values.</param>
             <param name="mpId">String with the ID name of the measurement point.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using mpId.
             It is only possible to saveadd to a measurement point connected to current Run item.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             private void SaveAddWithMpIdExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1, "M1_1");  //Save an integer to the first MP
                        
                Measurement.SaveAdd(11.1, "M1_3"); //Save an double to the third MP
                
                Measurement.SaveAdd("XYZ123", "M1_4"); //Save an string to the fourth MP
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues, "M1_2"); //Save a curve to the second MP
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
            &lt;MP:I&gt; M1_1,PASS,1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,1,2011-04-29 10:23:22.280<br />
            &lt;MP:C&gt; M1_2,PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 10:23:22.280<br />
            
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
             <overloads>This method has twenty overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
             <summary>
             Saves and verifies the measured curve values towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the zero based index will be used.
             </summary>
             
             <param name="xValues">List of measured curve x-values.</param>
             <param name="yValues">List of measured curve y-values.</param>
             <param name="index">Zero based index of the measurement point.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using an index.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             private void SaveAddWithIndexExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1, 0);  //Save an integer to the first MP
                        
                Measurement.SaveAdd(11.1, 2); //Save an double to the third MP
                
                Measurement.SaveAdd("XYZ123", 3); //Save an string to the fourth MP
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues, 1); //Save a curve to the second MP
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-28 14:53:16.330<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.345<br />
             &lt;MP:C&gt; M1_2,PASS,3,2011-04-28 14:53:16.333<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.343<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.345<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.345<br />
             &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.345<br />
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
             <summary>
             Saves and verifies the measured curve values towards current measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             </summary>
             
             <param name="xValues">List of measured curve x-values.</param>
             <param name="yValues">List of measured curve y-values.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The measurement point used for the verification is the one pointed out by <c>MeasIndex</c>
             The <c>MeasIndex</c> is increased by one (pointing to the next measurement point) for each SaveAdd.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             Each SaveAdd will increase the MeasIndex by one. Each time the testmethod i called by Idefix the MeasIndex is reset to 0.
             <code>
             private void SaveAddExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1);  //Save an integer
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues); //Save a curve
            
                Measurement.SaveAdd(11.1); //Save an double
                
                Measurement.SaveAdd("XYZ123"); //Save an string
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-28 14:53:16.330<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.345<br />
             &lt;MP:C&gt; M1_2,PASS,3,2011-04-28 14:53:16.333<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.343<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.345<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.345<br />
             &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.345<br />
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.String,System.String)">
             <summary>
             Saves and verifies the measured string value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the mpId string will be used.
             </summary>
             
             <param name="data">Measured string value.</param>
             <param name="mpId">String with the ID name of the measurement point.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using mpId.
             It is only possible to saveadd to a measurement point connected to current Run item.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             private void SaveAddWithMpIdExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1, "M1_1");  //Save an integer to the first MP
                        
                Measurement.SaveAdd(11.1, "M1_3"); //Save an double to the third MP
                
                Measurement.SaveAdd("XYZ123", "M1_4"); //Save an string to the fourth MP
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues, "M1_2"); //Save a curve to the second MP
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
            &lt;MP:I&gt; M1_1,PASS,1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,1,2011-04-29 10:23:22.280<br />
            &lt;MP:C&gt; M1_2,PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 10:23:22.280<br />
            
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Int32,System.String)">
             <summary>
             Saves and verifies the measured integer value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the mpId string will be used.
             </summary>
             
             <param name="data">Measured integer value.</param>
             <param name="mpId">String with the ID name of the measurement point.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using mpId.
             It is only possible to saveadd to a measurement point connected to current Run item.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             private void SaveAddWithMpIdExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1, "M1_1");  //Save an integer to the first MP
                        
                Measurement.SaveAdd(11.1, "M1_3"); //Save an double to the third MP
                
                Measurement.SaveAdd("XYZ123", "M1_4"); //Save an string to the fourth MP
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues, "M1_2"); //Save a curve to the second MP
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
            &lt;MP:I&gt; M1_1,PASS,1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,1,2011-04-29 10:23:22.280<br />
            &lt;MP:C&gt; M1_2,PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 10:23:22.280<br />
            
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Double,System.String)">
             <summary>
             Saves and verifies the measured double value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the mpId string will be used.
             </summary>
             
             <param name="data">Measured double value.</param>
             <param name="mpId">String with the ID name of the measurement point.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using mpId.
             It is only possible to saveadd to a measurement point connected to current Run item.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             private void SaveAddWithMpIdExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1, "M1_1");  //Save an integer to the first MP
                        
                Measurement.SaveAdd(11.1, "M1_3"); //Save an double to the third MP
                
                Measurement.SaveAdd("XYZ123", "M1_4"); //Save an string to the fourth MP
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues, "M1_2"); //Save a curve to the second MP
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
            &lt;MP:I&gt; M1_1,PASS,1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,1,2011-04-29 10:23:22.280<br />
            &lt;MP:C&gt; M1_2,PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 10:23:22.280<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 10:23:22.280<br />
            &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 10:23:22.280<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 10:23:22.280<br />
            
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.String,System.Int32)">
             <summary>
             Saves and verifies the measured string value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the zero based index will be used.
             </summary>
             
             <param name="data">Measured string value.</param>
             <param name="index">Zero based index of the measurement point.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using an index.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             private void SaveAddWithIndexExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1, 0);  //Save an integer to the first MP
                        
                Measurement.SaveAdd(11.1, 2); //Save an double to the third MP
                
                Measurement.SaveAdd("XYZ123", 3); //Save an string to the fourth MP
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues, 1); //Save a curve to the second MP
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-28 14:53:16.330<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.345<br />
             &lt;MP:C&gt; M1_2,PASS,3,2011-04-28 14:53:16.333<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.343<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.345<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.345<br />
             &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.345<br />
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Int32,System.Int32)">
             <summary>
             Saves and verifies the measured integer value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the zero based index will be used.
             </summary>
             
             <param name="data">Measured integer value.</param>
             <param name="index">Zero based index of the measurement point.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using an index.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             private void SaveAddWithIndexExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1, 0);  //Save an integer to the first MP
                        
                Measurement.SaveAdd(11.1, 2); //Save an double to the third MP
                
                Measurement.SaveAdd("XYZ123", 3); //Save an string to the fourth MP
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues, 1); //Save a curve to the second MP
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-28 14:53:16.330<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.345<br />
             &lt;MP:C&gt; M1_2,PASS,3,2011-04-28 14:53:16.333<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.343<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.345<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.345<br />
             &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.345<br />
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Double,System.Int32)">
             <summary>
             Saves and verifies the measured double value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the zero based index will be used.
             </summary>
             
             <param name="data">Measured double value.</param>
             <param name="index">Zero based index of the measurement point.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using an index.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             private void SaveAddWithIndexExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1, 0);  //Save an integer to the first MP
                        
                Measurement.SaveAdd(11.1, 2); //Save an double to the third MP
                
                Measurement.SaveAdd("XYZ123", 3); //Save an string to the fourth MP
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues, 1); //Save a curve to the second MP
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-28 14:53:16.330<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.345<br />
             &lt;MP:C&gt; M1_2,PASS,3,2011-04-28 14:53:16.333<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.343<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.345<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.345<br />
             &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.345<br />
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.String)">
             <summary>
             Saves and verifies the measured string value towards current measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             </summary>
             
             <param name="data">Measured string value.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The measurement point used for the verification is the one pointed out by <c>MeasIndex</c>.
             The <c>MeasIndex</c> is increased by one (pointing to the next measurement point) for each SaveAdd.
             </remarks>
             
             <example>
             This example shows how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             Each SaveAdd will increase the <c>MeasIndex</c> by one. Each time the testmethod is called by Idefix the <c>MeasIndex</c> is reset to 0.
             <code>
             private void SaveAddExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1);  //Save an integer
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues); //Save a curve
            
                Measurement.SaveAdd(11.1); //Save an double
                
                Measurement.SaveAdd("XYZ123"); //Save an string
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-28 14:53:16.330<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.345<br />
             &lt;MP:C&gt; M1_2,PASS,3,2011-04-28 14:53:16.333<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.343<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.345<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.345<br />
             &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.345<br />
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Int32)">
             <summary>
             Saves and verifies the measured integer value towards current measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             </summary>
             
             <param name="data">Measured integer value.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The measurement point used for the verification is the one pointed out by <c>MeasIndex</c>.
             The <c>MeasIndex</c> is increased by one (pointing to the next measurement point) for each SaveAdd.
             </remarks>
             
             <example>
             This example shows how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             Each SaveAdd will increase the <c>MeasIndex</c> by one. Each time the testmethod is called by Idefix the <c>MeasIndex</c> is reset to 0.
             <code>
             private void SaveAddExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1);  //Save an integer
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues); //Save a curve
            
                Measurement.SaveAdd(11.1); //Save an double
                
                Measurement.SaveAdd("XYZ123"); //Save an string
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-28 14:53:16.330<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.345<br />
             &lt;MP:C&gt; M1_2,PASS,3,2011-04-28 14:53:16.333<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.343<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.345<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.345<br />
             &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.345<br />
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Double)">
             <summary>
             Saves and verifies the measured double value towards current measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             </summary>
             
             <param name="data">Measured double value.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The measurement point used for the verification is the one pointed out by <c>MeasIndex</c>.
             The <c>MeasIndex</c> is increased by one (pointing to the next measurement point) for each SaveAdd.
             </remarks>
             
             <example>
             This example shows how to save four measurments. A string, integer, double and a curve.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             Each SaveAdd will increase the <c>MeasIndex</c> by one. Each time the testmethod is called by Idefix the <c>MeasIndex</c> is reset to 0.
             <code>
             private void SaveAddExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                Measurement.SaveAdd(1);  //Save an integer
                
                xValues.Add(1);
                yValues.Add(1);
                xValues.Add(2);
                yValues.Add(2);
                xValues.Add(4);
                yValues.Add(4);
                Measurement.SaveAdd(xValues, yValues); //Save a curve
            
                Measurement.SaveAdd(11.1); //Save an double
                
                Measurement.SaveAdd("XYZ123"); //Save an string
            }
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             &lt;MP:I&gt; M1_1,PASS,1,2011-04-28 14:53:16.330<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,1,2011-04-28 14:53:16.345<br />
             &lt;MP:C&gt; M1_2,PASS,3,2011-04-28 14:53:16.333<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.343<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;CONT&gt; PASS,3,2011-04-28 14:53:16.345<br />
             &lt;X&gt; 1,2,4<br />
             &lt;Y&gt; 1,2,4<br />
             &lt;MP:F&gt; M1_3,PASS,11.1,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,11.1,2011-04-28 14:53:16.345<br />
             &lt;MP:T&gt; M1_4,PASS,XYZ123,2011-04-28 14:53:16.334<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.343<br />
             &lt;CONT&gt; PASS,XYZ123,2011-04-28 14:53:16.345<br />
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.String,System.String,System.String,System.String)">
             <summary>
             Saves and verifies the measured curve values towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the zero based index will be used.
             </summary>
             
             <param name="xValues">List of measured x-curve values.</param>
             <param name="yValues">List of measured y-curve values.</param>
             <param name="index">Zero based index of the measurement point.</param>
             <param name="attribute1">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute2">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute3">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute4">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using an index.
             It is only possible to saveadd to a measurement point connected to current Run item.
             The four attributes can be used to specify any circumstances for the measurement. These attributes will be
             stored in the record file. Since you can do the same measurement plenty times you are able to explain the
             circumstances for each measurement. Could be the current temperature for example. This could be valuable when analysing test results.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve and attach a temperature for each measurment.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             static Random r = new Random();
             private string GetTemp()
             {
                 return String.Format("{0:0}°C", r.Next(60) - 30);
             }
             private void SaveAddIndexArgumentsExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                 string temperature = GetTemp();
             
                 Measurement.SaveAdd(1, 0, GetTemp(), "Any custom string", "", "");  //Save an integer
             
                 Measurement.SaveAdd(11.1, 2, GetTemp(), "", "", ""); //Save an double
             
                 Measurement.SaveAdd("XYZ123", 3, GetTemp(), "", "", ""); //Save an string
             
                 xValues.Add(1);
                 yValues.Add(1);
                 xValues.Add(2);
                 yValues.Add(2);
                 xValues.Add(4);
                 yValues.Add(4);
                 Measurement.SaveAdd(xValues, yValues, 1, GetTemp(), "", "", ""); //Save a curve
             }        
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             
            &lt;MP:I&gt; M1_5,PASS,1,2011-04-29 13:33:23.483,-18°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,-9°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,15°C,Any custom string<br />
            &lt;MP:C&gt; M1_6,PASS,3,2011-04-29 13:33:23.483,-28°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,17°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,-9°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_7,PASS,11.1,2011-04-29 13:33:23.483,-28°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-1°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-13°C<br />
            &lt;MP:T&gt; M1_8,PASS,XYZ123,2011-04-29 13:33:23.483,27°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,-3°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,16°C<br />
             
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.String,System.Int32,System.String,System.String,System.String,System.String)">
             <summary>
             Saves and verifies the measured string value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the zero based index will be used.
             </summary>
             
             <param name="data">Measured string value.</param>
             <param name="index">Zero based index of the measurement point.</param>
             <param name="attribute1">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute2">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute3">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute4">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using an index.
             It is only possible to saveadd to a measurement point connected to current Run item.
             The four attributes can be used to specify any circumstances for the measurement. These attributes will be
             stored in the record file. Since you can do the same measurement plenty times you are able to explain the
             circumstances for each measurement. Could be the current temperature for example. This could be valuable when analysing test results.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve and attach a temperature for each measurment.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             static Random r = new Random();
             private string GetTemp()
             {
                 return String.Format("{0:0}°C", r.Next(60) - 30);
             }
             private void SaveAddIndexArgumentsExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                 string temperature = GetTemp();
             
                 Measurement.SaveAdd(1, 0, GetTemp(), "Any custom string", "", "");  //Save an integer
             
                 Measurement.SaveAdd(11.1, 2, GetTemp(), "", "", ""); //Save an double
             
                 Measurement.SaveAdd("XYZ123", 3, GetTemp(), "", "", ""); //Save an string
             
                 xValues.Add(1);
                 yValues.Add(1);
                 xValues.Add(2);
                 yValues.Add(2);
                 xValues.Add(4);
                 yValues.Add(4);
                 Measurement.SaveAdd(xValues, yValues, 1, GetTemp(), "", "", ""); //Save a curve
             }        
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             
            &lt;MP:I&gt; M1_5,PASS,1,2011-04-29 13:33:23.483,-18°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,-9°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,15°C,Any custom string<br />
            &lt;MP:C&gt; M1_6,PASS,3,2011-04-29 13:33:23.483,-28°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,17°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,-9°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_7,PASS,11.1,2011-04-29 13:33:23.483,-28°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-1°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-13°C<br />
            &lt;MP:T&gt; M1_8,PASS,XYZ123,2011-04-29 13:33:23.483,27°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,-3°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,16°C<br />
             
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
             <summary>
             Saves and verifies the measured integer value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the zero based index will be used.
             </summary>
             
             <param name="data">Measured integer value.</param>
             <param name="index">Zero based index of the measurement point.</param>
             <param name="attribute1">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute2">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute3">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute4">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using an index.
             It is only possible to saveadd to a measurement point connected to current Run item.
             The four attributes can be used to specify any circumstances for the measurement. These attributes will be
             stored in the record file. Since you can do the same measurement plenty times you are able to explain the
             circumstances for each measurement. Could be the current temperature for example. This could be valuable when analysing test results.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve and attach a temperature for each measurment.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             static Random r = new Random();
             private string GetTemp()
             {
                 return String.Format("{0:0}°C", r.Next(60) - 30);
             }
             private void SaveAddIndexArgumentsExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                 string temperature = GetTemp();
             
                 Measurement.SaveAdd(1, 0, GetTemp(), "Any custom string", "", "");  //Save an integer
             
                 Measurement.SaveAdd(11.1, 2, GetTemp(), "", "", ""); //Save an double
             
                 Measurement.SaveAdd("XYZ123", 3, GetTemp(), "", "", ""); //Save an string
             
                 xValues.Add(1);
                 yValues.Add(1);
                 xValues.Add(2);
                 yValues.Add(2);
                 xValues.Add(4);
                 yValues.Add(4);
                 Measurement.SaveAdd(xValues, yValues, 1, GetTemp(), "", "", ""); //Save a curve
             }        
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             
            &lt;MP:I&gt; M1_5,PASS,1,2011-04-29 13:33:23.483,-18°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,-9°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,15°C,Any custom string<br />
            &lt;MP:C&gt; M1_6,PASS,3,2011-04-29 13:33:23.483,-28°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,17°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,-9°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_7,PASS,11.1,2011-04-29 13:33:23.483,-28°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-1°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-13°C<br />
            &lt;MP:T&gt; M1_8,PASS,XYZ123,2011-04-29 13:33:23.483,27°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,-3°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,16°C<br />
             
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Double,System.Int32,System.String,System.String,System.String,System.String)">
             <summary>
             Saves and verifies the measured double value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the zero based index will be used.
             </summary>
             
             <param name="data">Measured double value.</param>
             <param name="index">Zero based index of the measurement point.</param>
             <param name="attribute1">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute2">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute3">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute4">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using an index.
             It is only possible to saveadd to a measurement point connected to current Run item.
             The four attributes can be used to specify any circumstances for the measurement. These attributes will be
             stored in the record file. Since you can do the same measurement plenty times you are able to explain the
             circumstances for each measurement. Could be the current temperature for example. This could be valuable when analysing test results.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve and attach a temperature for each measurment.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             static Random r = new Random();
             private string GetTemp()
             {
                 return String.Format("{0:0}°C", r.Next(60) - 30);
             }
             private void SaveAddIndexArgumentsExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                 string temperature = GetTemp();
             
                 Measurement.SaveAdd(1, 0, GetTemp(), "Any custom string", "", "");  //Save an integer
             
                 Measurement.SaveAdd(11.1, 2, GetTemp(), "", "", ""); //Save an double
             
                 Measurement.SaveAdd("XYZ123", 3, GetTemp(), "", "", ""); //Save an string
             
                 xValues.Add(1);
                 yValues.Add(1);
                 xValues.Add(2);
                 yValues.Add(2);
                 xValues.Add(4);
                 yValues.Add(4);
                 Measurement.SaveAdd(xValues, yValues, 1, GetTemp(), "", "", ""); //Save a curve
             }        
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             
            &lt;MP:I&gt; M1_5,PASS,1,2011-04-29 13:33:23.483,-18°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,-9°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,15°C,Any custom string<br />
            &lt;MP:C&gt; M1_6,PASS,3,2011-04-29 13:33:23.483,-28°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,17°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,-9°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_7,PASS,11.1,2011-04-29 13:33:23.483,-28°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-1°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-13°C<br />
            &lt;MP:T&gt; M1_8,PASS,XYZ123,2011-04-29 13:33:23.483,27°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,-3°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,16°C<br />
             
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Saves and verifies the measured curve values towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the mpId string will be used.
             </summary>
             
             <param name="xValues">List of measured x-curve values.</param>
             <param name="yValues">List of measured y-curve values.</param>
             <param name="mpId">String with the ID name of the measurement point.</param>
             <param name="attribute1">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute2">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute3">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute4">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using mpId.
             It is only possible to saveadd to a measurement point connected to current Run item.
             The four attributes can be used to specify any circumstances for the measurement. These attributes will be
             stored in the record file. Since you can do the same measurement plenty times you are able to explain the
             circumstances for each measurement. Could be the current temperature for example. This could be valuable when analysing test results.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve and attach a temperature for each measurment.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             static Random r = new Random();
             private string GetTemp()
             {
                 return String.Format("{0:0}°C", r.Next(60) - 30);
             }
             private void SaveAddMpIdArgumentsExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                 string temperature = GetTemp();
             
                 Measurement.SaveAdd(1, "M1_5", GetTemp(), "Any custom string", "", "");  //Save an integer
             
                 Measurement.SaveAdd(11.1, "M1_7", GetTemp(), "", "", ""); //Save an double
             
                 Measurement.SaveAdd("XYZ123", "M1_8", GetTemp(), "", "", ""); //Save an string
             
                 xValues.Add(1);
                 yValues.Add(1);
                 xValues.Add(2);
                 yValues.Add(2);
                 xValues.Add(4);
                 yValues.Add(4);
                 Measurement.SaveAdd(xValues, yValues, "M1_6", GetTemp(), "", "", ""); //Save a curve
             }        
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             
            &lt;MP:I&gt; M1_5,PASS,1,2011-04-29 13:33:23.483,-18°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,-9°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,15°C,Any custom string<br />
            &lt;MP:C&gt; M1_6,PASS,3,2011-04-29 13:33:23.483,-28°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,17°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,-9°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_7,PASS,11.1,2011-04-29 13:33:23.483,-28°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-1°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-13°C<br />
            &lt;MP:T&gt; M1_8,PASS,XYZ123,2011-04-29 13:33:23.483,27°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,-3°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,16°C<br />
             
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Saves and verifies the measured string value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the mpId string will be used.
             </summary>
             
             <param name="data">Measured string value.</param>
             <param name="mpId">String with the ID name of the measurement point.</param>
             <param name="attribute1">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute2">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute3">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute4">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using mpId.
             It is only possible to saveadd to a measurement point connected to current Run item.
             The four attributes can be used to specify any circumstances for the measurement. These attributes will be
             stored in the record file. Since you can do the same measurement plenty times you are able to explain the
             circumstances for each measurement. Could be the current temperature for example. This could be valuable when analysing test results.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve and attach a temperature for each measurment.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             static Random r = new Random();
             private string GetTemp()
             {
                 return String.Format("{0:0}°C", r.Next(60) - 30);
             }
             private void SaveAddMpIdArgumentsExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                 string temperature = GetTemp();
             
                 Measurement.SaveAdd(1, "M1_5", GetTemp(), "Any custom string", "", "");  //Save an integer
             
                 Measurement.SaveAdd(11.1, "M1_7", GetTemp(), "", "", ""); //Save an double
             
                 Measurement.SaveAdd("XYZ123", "M1_8", GetTemp(), "", "", ""); //Save an string
             
                 xValues.Add(1);
                 yValues.Add(1);
                 xValues.Add(2);
                 yValues.Add(2);
                 xValues.Add(4);
                 yValues.Add(4);
                 Measurement.SaveAdd(xValues, yValues, "M1_6", GetTemp(), "", "", ""); //Save a curve
             }        
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             
            &lt;MP:I&gt; M1_5,PASS,1,2011-04-29 13:33:23.483,-18°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,-9°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,15°C,Any custom string<br />
            &lt;MP:C&gt; M1_6,PASS,3,2011-04-29 13:33:23.483,-28°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,17°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,-9°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_7,PASS,11.1,2011-04-29 13:33:23.483,-28°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-1°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-13°C<br />
            &lt;MP:T&gt; M1_8,PASS,XYZ123,2011-04-29 13:33:23.483,27°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,-3°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,16°C<br />
             
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Int32,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Saves and verifies the measured integer value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the mpId string will be used.
             </summary>
             
             <param name="data">Measured integer value.</param>
             <param name="mpId">String with the ID name of the measurement point.</param>
             <param name="attribute1">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute2">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute3">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute4">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using mpId.
             It is only possible to saveadd to a measurement point connected to current Run item.
             The four attributes can be used to specify any circumstances for the measurement. These attributes will be
             stored in the record file. Since you can do the same measurement plenty times you are able to explain the
             circumstances for each measurement. Could be the current temperature for example. This could be valuable when analysing test results.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve and attach a temperature for each measurment.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             static Random r = new Random();
             private string GetTemp()
             {
                 return String.Format("{0:0}°C", r.Next(60) - 30);
             }
             private void SaveAddMpIdArgumentsExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                 string temperature = GetTemp();
             
                 Measurement.SaveAdd(1, "M1_5", GetTemp(), "Any custom string", "", "");  //Save an integer
             
                 Measurement.SaveAdd(11.1, "M1_7", GetTemp(), "", "", ""); //Save an double
             
                 Measurement.SaveAdd("XYZ123", "M1_8", GetTemp(), "", "", ""); //Save an string
             
                 xValues.Add(1);
                 yValues.Add(1);
                 xValues.Add(2);
                 yValues.Add(2);
                 xValues.Add(4);
                 yValues.Add(4);
                 Measurement.SaveAdd(xValues, yValues, "M1_6", GetTemp(), "", "", ""); //Save a curve
             }        
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             
            &lt;MP:I&gt; M1_5,PASS,1,2011-04-29 13:33:23.483,-18°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,-9°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,15°C,Any custom string<br />
            &lt;MP:C&gt; M1_6,PASS,3,2011-04-29 13:33:23.483,-28°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,17°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,-9°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_7,PASS,11.1,2011-04-29 13:33:23.483,-28°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-1°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-13°C<br />
            &lt;MP:T&gt; M1_8,PASS,XYZ123,2011-04-29 13:33:23.483,27°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,-3°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,16°C<br />
             
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Measurement.SaveAdd(System.Double,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Saves and verifies the measured double value towards the measurement point in the test criteria.
             The measurement is added to a record list for this measurement point.
             The measurement point according to the mpId string will be used.
             </summary>
             
             <param name="data">Measured double value.</param>
             <param name="mpId">String with the ID name of the measurement point.</param>
             <param name="attribute1">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute2">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute3">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <param name="attribute4">A arbitrary string where you can specify a circumstance for the measurement.</param>
             <returns>The verified <c>MeasurementResult</c></returns> 
             
             <remarks>
             The <c>MeasIndex</c> is set to the next measurment point after saveadd using mpId.
             It is only possible to saveadd to a measurement point connected to current Run item.
             The four attributes can be used to specify any circumstances for the measurement. These attributes will be
             stored in the record file. Since you can do the same measurement plenty times you are able to explain the
             circumstances for each measurement. Could be the current temperature for example. This could be valuable when analysing test results.
             </remarks>
             
             <example>
             This example show how to save four measurments. A string, integer, double and a curve and attach a temperature for each measurment.
             The function is looped using the predefined Datalabel TS_LOOP_COUNT.
             <code>
             static Random r = new Random();
             private string GetTemp()
             {
                 return String.Format("{0:0}°C", r.Next(60) - 30);
             }
             private void SaveAddMpIdArgumentsExampleLoopedUsingPreDefinedDatalabel_TS_LOOP_COUNT()
             {
                List&lt;double&gt; xValues = new List&lt;double&gt;();
                List&lt;double&gt; yValues = new List&lt;double&gt;();
            
                 string temperature = GetTemp();
             
                 Measurement.SaveAdd(1, "M1_5", GetTemp(), "Any custom string", "", "");  //Save an integer
             
                 Measurement.SaveAdd(11.1, "M1_7", GetTemp(), "", "", ""); //Save an double
             
                 Measurement.SaveAdd("XYZ123", "M1_8", GetTemp(), "", "", ""); //Save an string
             
                 xValues.Add(1);
                 yValues.Add(1);
                 xValues.Add(2);
                 yValues.Add(2);
                 xValues.Add(4);
                 yValues.Add(4);
                 Measurement.SaveAdd(xValues, yValues, "M1_6", GetTemp(), "", "", ""); //Save a curve
             }        
             </code>
             
             <b>Output:</b><br />
             This is an example how it will look like in the record file when looping three times.<br />
             <br />
             
             
            &lt;MP:I&gt; M1_5,PASS,1,2011-04-29 13:33:23.483,-18°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,-9°C,Any custom string<br />
            &lt;CONT&gt; PASS,1,2011-04-29 13:33:23.499,15°C,Any custom string<br />
            &lt;MP:C&gt; M1_6,PASS,3,2011-04-29 13:33:23.483,-28°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,17°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;CONT&gt; PASS,3,2011-04-29 13:33:23.499,-9°C<br />
            &lt;X&gt; 1,2,4<br />
            &lt;Y&gt; 1,2,4<br />
            &lt;MP:F&gt; M1_7,PASS,11.1,2011-04-29 13:33:23.483,-28°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-1°C<br />
            &lt;CONT&gt; PASS,11.1,2011-04-29 13:33:23.499,-13°C<br />
            &lt;MP:T&gt; M1_8,PASS,XYZ123,2011-04-29 13:33:23.483,27°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,-3°C<br />
            &lt;CONT&gt; PASS,XYZ123,2011-04-29 13:33:23.499,16°C<br />
             
             
             </example>
             <exception cref="T:Idefix.Exceptions.MeasurementException">
             A MeasurementException is thrown if a failure occur.
             </exception>
        </member>
        <member name="P:Idefix.TxApi.Runtime.Measurement.RemainingCount">
            <summary>Get the remaining number of measurement points connected to current Run item.</summary>
            <remarks>
            The <c>RemainingCount</c> goes hand in hand with the <c>MeasIndex</c>.
            When <c>MeasIndex</c> is increased by one, then <c>RemainingCount</c> is decreased by one.
            It is only possible to retrieve <c>RemainingCount</c> property.
            </remarks>
            <example>
            This example show how loop thru all measurment point using the <c>Measurement.RemainingCount</c> and <c>Measurement.MeasIndex</c>
            <code>
            for (Measurement.MeasIndex = 0; Measurement.RemainingCount > 0; Measurement.MeasIndex++)
            {
            ...
            }
            </code>
            </example>  
        </member>
        <member name="P:Idefix.TxApi.Runtime.Measurement.MeasIndex">
            <summary>Get or Set current measurement point index.</summary>
            <remarks>
            The <c>MeasIndex</c> is used by Measurement methods where no index is part of the argument. The <c>MeasIndex</c> is automatically decreased when <c>Save()</c> is done.
            It is possible to both retrieve and set the <c>MeasIndex</c> property.
            </remarks>
            <example>
            This example show how to use the <c>MeasIndex</c> properties
            <code>
            Measurement.MeasIndex--;
            Output.TextOut( "MeasIndex = {0}", Measurement.MeasIndex );
            
            Measurement.MeasIndex = 0;
            Output.TextOut( "MeasIndex = {0}", Measurement.MeasIndex );
            </code>
            </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.MultiDut">
             <summary>The <c>MultiDut</c> class provides index or name based access to DutItem properties.</summary>
             
             <remarks> For the list of available properties see the <c>DutHandler.DutItem</c> class.
             
             <list type="bullet">
             <item>See <see cref="T:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler"/></item>
             <item>See <see cref="T:Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem"/></item>
             </list>
             
             The DutHandler.DutItem properties are the MultiDut versions of respective single-dut classes. For more 
             information see the respective single DUT classes.
             </remarks>
             
             <example>
             This example shows how to retrive data about a DUT in a multidut scenario
             and display the result in the Idefix output window. 
             <code>
             MultiDut.Duts[1].UserInfo.Output.TextOut("Writing to first dut!");
             MultiDut.Duts[2].UserInfo.Output.TextOut("Writing to second dut!");
            
             Output.TextOut(Idefix.TxApi.Runtime.MultiDut.Duts[1].Dut.IdNumber);
             Output.TextOut(Idefix.TxApi.Runtime.MultiDut.Duts["DUT2"].Dut.IdNumber);
            
             Idefix.TxApi.Runtime.UserInfo.Output.TextOut(Idefix.TxApi.Runtime.Dut.LogicalName);
            
             string PrNr = MultiDut.Duts[1].Dut.ProductNumber;
            
             foreach (Idefix.TxApi.Configuration.MultiDutFiles.DutHandler.DutItem Dut in Idefix.TxApi.Runtime.MultiDut.Duts)
             {
                Dut.UserInfo.Output.TextOut(Dut.Dut.IdNumber);
                Dut.UserInfo.Output.TextOut(Dut.Dut.LogicalName );
            
                Dut.Measurement.Save(1);
             }
             </code>
             <br /><br />
             
             Exception handling example.
             <code>
             try
             {
                 // This line will throw MultiDutException due to incorrect DUT name.
                 Output.TextOut(Idefix.TxApi.Runtime.MultiDut.Duts["BadDutName"].Dut.IdNumber);
            
                 // The next lines throw DutException and MeasurementException
                 Idefix.TxApi.Runtime.MultiDut.Duts["DUT1"].Dut.Status = StatusResult.Executed;
                 Idefix.TxApi.Runtime.MultiDut.Duts["DUT1"].Measurement.SetComment("bad index", 10);
            
                 // Just for comparison, this line could also throw DutException
                 Idefix.TxApi.Runtime.Dut.Status = StatusResult.Executed;
             }
             catch (MultiDutException e)
             {
                 Output.TextOutError("MultiDutException: " + e.Message);
             }
             catch (DutException e)
             {
                 Output.TextOutError("DutException: " + e.Message);
             }
             catch (MeasurementException e)
             {
                 Output.TextOutError("MeasurementException: " + e.Message);
             }
             catch (TxApiBaseException e)
             {
                 Output.TextOutError("TxApiBaseException: " + e.Message);
             }
             catch (Exception e)
             {
                 Output.TextOutError("System.Exception: " + e.Message);
             }
             </code>
             </example>
             
             <exception cref="T:Idefix.Exceptions.MultiDutException">
             A MultiDutException is thrown if a failure occurs.
             </exception>
        </member>
        <member name="F:Idefix.TxApi.Runtime.MultiDut.Duts">
            <summary></summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestCriteria">
             <summary>
             The <c>TestCriteria</c> class is for getting information from the Current Test criteria file. 
             </summary>
            
             <remarks>
             The TestCriteria class supports several different properties, for getting the current measurement point, filename, document number, measurement points, etc, from the current criteria file.
             
             <h5>Known bugs / Issues</h5>
             Right now <c>DynamicInterval</c> Property and <c>DynamicNumberOfOk</c> Property and <c>MaxRepeat</c> Property don't work.<br />
             
             </remarks> 
             
             <example>
             This example retrieves and displays information from the the following test criteria file.<br />
                 &lt;CRITERIA&gt; STD<br />
                 &lt;DOC&gt; "190 59-CYA 456 785",P,2012-08-13<br />
                 &lt;PREPARED&gt; "EAB/PPG/Rsi Hary Haker"<br />
                 &lt;MPG&gt; MP_1,<br />
                 &lt;MP:C&gt; MP_1_1,"MP Curve",#.##,x-unit,y-unit,LIM,1<br />
                 &lt;X&gt; 0.1<br />
                 &lt;Y1&gt; 0.2<br />
                 &lt;Y2&gt; 0.3<br />
                 &lt;MP:T&gt; MP_1_2,,,,EQU,String<br />
                 &lt;MP:F&gt; MP_1_3,,,,MAX,1.2<br />
                 &lt;MP:I&gt; MP_1_4,,,,MIN,0<br />
                 &lt;MPG&gt; SE,"Simple example!"<br />
                 &lt;MP:I&gt; SE_1,"Demo",#,N/A,EQU,1<br />
                 &lt;END&gt;  
             <br />
             <code>
                public int Measure()
                {
            	     //present some root members of the TestCriteria class        
                    Output.TextOut("description:{0}", TestCriteria.CurrentMeasurePoint.Description);
                    Output.TextOut("date:{0}", TestCriteria.Date);
                    Output.TextOut("documentNumber:{0}", TestCriteria.DocumentNumber);
                    Output.TextOut("documentRevision:{0}", TestCriteria.DocumentRevision);
                    Output.TextOut("Path:{0}", TestCriteria.Path.Replace(@"\", @"\\\\").Replace(@"\\", @"\"));
                    Output.TextOut("filename:{0}", TestCriteria.Filename);
                   
                    List&lt;double&gt; xValues = new List&lt;double&gt;();
                    List&lt;double&gt; yValues = new List&lt;double&gt;();
                    xValues.Add(1);
                    yValues.Add(1);
                    xValues.Add(2);
                    yValues.Add(2);
                    xValues.Add(4);
                    yValues.Add(4);
                    Measurement.Save(xValues, yValues); 
                    Measurement.Save("String");
                    Measurement.Save(1.2);
                    Measurement.Save(1);
                    
                    for (int i = 0; i &lt; Measurement.MeasIndex; i++)
                    {
                        Output.TextOut("");
                        Output.TextOut("\tMeasurepointcomparetype:{0}", TestCriteria.MeasurePoint[i].CompareType);
                        Output.TextOut("\tMeasurepointlimitsHigh:{0}", TestCriteria.MeasurePoint[i].Limits.High.AsString);
                        Output.TextOut("\tMeasurepointlimitsLow:{0}", TestCriteria.MeasurePoint[i].Limits.Low.AsString);
                        Output.TextOut("\tMeasurepointlimitsNominal:{0}", TestCriteria.MeasurePoint[i].Limits.Nominal.AsString);
                        Output.TextOut("\tMeasurepointunitfield:{0}", TestCriteria.MeasurePoint[i].Unit);
                        Output.TextOut("\tMeasurepointComparerule:{0}", TestCriteria.MeasurePoint[i].CompareRule);
                        Output.TextOut("\tMeasurepointCurvelimitsHigh:{0}", TestCriteria.MeasurePoint[i].CurveLimits.HighLimit.Count);
                        Output.TextOut("\tMeasurepointCurvelimitsLow:{0}", TestCriteria.MeasurePoint[i].CurveLimits.LowLimit.Count);
                        Output.TextOut("\tMeasurepointCurvelimitsAarraySIze:{0}", TestCriteria.MeasurePoint[i].CurveLimits.MaxCurveLimitArraySize);
                        Output.TextOut("\tMeasurepointCurvelimitsXcordsCount:{0}", TestCriteria.MeasurePoint[i].CurveLimits.Xcords.Count);
                        Output.TextOut("\tMeasurepointDocumentReference:{0}", TestCriteria.MeasurePoint[i].DocumentReference);
                        Output.TextOut("\tMeasurepointMpgName:{0}", TestCriteria.MeasurePoint[i].MpgName);
                        Output.TextOut("\tCMeasurepointName:{0}", TestCriteria.MeasurePoint[i].Name);
                        Output.TextOut("\tMeasurepoint:DocumentReference:{0}", TestCriteria.MeasurePoint[i].DocumentReference);
                        Output.TextOut("\tCMeasurepointPrintFlag:{0}", TestCriteria.MeasurePoint[i].PrintFlag);
                        Output.TextOut("\tMeasurepointPrintFormat:{0}", TestCriteria.MeasurePoint[i].PrintFormat);
                    }
                    Output.TextOut("productnumber:{0}", TestPlan.ProductNumber);
                    Output.TextOut("revision:{0}", TestPlan.Revision);
                    Output.TextOut("runmode:{0}", TestPlan.RunMode);
                   return MethodResult.Ok;
                }
             </code>
                    <br />result of the output command:<br /><br />
                 description:MP Curve<br />
                 date:2012-08-18<br />
                 documentNumber:190 59-CYA 456 785<br />
                 documentRevision:P<br />
                 Path:c:\users\haryhaker\documents\visual studio 2010\Projects\TestC\TestC\TestProgram\TestC.dat<br />
                 filename:TestC.dat<br />
                 <br />
                 Measurepointcomparetype:C<br />
                 MeasurepointlimitsHigh:<br />
                 MeasurepointlimitsLow:<br />
                 MeasurepointlimitsNominal:<br />
                 Measurepointunitfield:<br />
                 MeasurepointComparerule:&lt;=&lt;=<br />
                 MeasurepointCurvelimitsHigh:1<br />
                 MeasurepointCurvelimitsLow:1<br />
                 MeasurepointCurvelimitsAarraySIze:1024<br />
                 MeasurepointCurvelimitsXcordsCount:1<br />
                 MeasurepointDocumentReference:<br />
                 MeasurepointMpgName:MP_1<br />
                 MeasurepointName:MP_1_1<br />
                 Measurepoint:DocumentReference:<br />
                 MeasurepointPrintFlag:Y<br />
                 MeasurepointPrintFormat:#.##<br /><br />
                 
                 Measurepointcomparetype:S<br />
                 MeasurepointlimitsHigh:<br />
                 MeasurepointlimitsLow:String<br />
                 Measurepointlimits:Nominal<br />
                 Measurepointunitfield:<br />
                 MeasurepointComparerule:=<br />
                 MeasurepointCurvelimitsHigh:0<br />
                 MeasurepointCurvelimitsLow:0<br />
                 MeasurepointCurvelimitsAarraySIze:1024<br />
                 MeasurepointCurvelimitsXcordsCount:0<br />
                 MeasurepointDocumentReference:<br />
                 MeasurepointMpgName:MP_1<br />
                 MeasurepointName:MP_1_2<br />
                 Measurepoint:DocumentReference:<br />
                 MeasurepointPrintFlag:Y<br />
                 MeasurepointPrintFormat:<br /><br />
             
                 Measurepointcomparetype:D<br />
                 MeasurepointlimitsHigh:<br />
                 MeasurepointlimitsLow:1.2<br />
                 MeasurepointlimitsNominal:<br />
                 Measurepointunitfield:<br />
                 MeasurepointComparerule:&lt;=<br />
                 MeasurepointCurvelimitsHigh:0<br />
                 MeasurepointCurvelimitsLow:0<br />
                 MeasurepointCurvelimitsAarraySIze:1024<br />
                 MeasurepointCurvelimitsXcordsCount:0<br />
                 MeasurepointDocumentReference:<br />
                 MeasurepointMpgName:MP_1<br />
                 MeasurepointName:MP_1_3<br />
                 Measurepoint:DocumentReference:<br />
                 MeasurepointPrintFlag:Y<br />
                 MeasurepointPrintFormat:<br /><br />
             
                 Measurepointcomparetype:I<br />
                 MeasurepointlimitsHigh:<br />
                 MeasurepointlimitsLow:0<br />
                 MeasurepointlimitsNominal:<br />
                 Measurepointunitfield:<br />
                 MeasurepointComparerule:&gt;=<br />
                 MeasurepointCurvelimitsHigh:0<br />
                 MeasurepointCurvelimitsLow:0<br />
                 MeasurepointCurvelimitsAarraySIze:1024<br />
                 MeasurepointCurvelimitsXcordsCount:0<br />
                 MeasurepointDocumentReference:<br />
                 MeasurepointMpgName:MP_1<br />
                 MeasurepointName:MP_1_4<br />
                 Measurepoint:DocumentReference:<br />
                 MeasurepointPrintFlag:Y<br />
                 MeasurepointPrintFormat:<br />
                 productnumber:CYA 123 45<br />
                 revision:PA1<br />
                 runmode:Manual<br />
             </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestCriteria.MPCurveLimitValues">
            <summary>Class handling limit values for a curve.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPCurveLimitValues.Xcords">
            <summary>Gets the list of x-values of the curve.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPCurveLimitValues.LowLimit">
            <summary>Gets the list of low limit values.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPCurveLimitValues.HighLimit">
            <summary>Gets the list of high limit values.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPCurveLimitValues.MaxCurveLimitArraySize">
            <summary>Gets or sets the maximum size of the curve limit array.</summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestCriteria.MPLimitValues">
            <summary>Class handling a measurement point limit value.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPLimitValues.Low">
            <summary>Gets the low limit value.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPLimitValues.High">
            <summary>Gets the high limit value.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPLimitValues.Nominal">
            <summary>Gets the nominal limit value.</summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestCriteria.MPInfo">
            <summary>Class containing Test criteria information for a specific measurement point.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.Limits">
            <summary>Gets the limit values for the measurment point.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.CurveLimits">
            <summary>Gets the curve limit values for the measurement point.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.MpgName">
            <summary>
            Gets the name of the measurement group.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.Name">
            <summary>
            Gets the name of the measurement point.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.CompareType">
            <summary>
            Gets the compare type of the measurement point.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.PrintFlag">
            <summary>Gets the value of the PrintFlag.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.Description">
            <summary>
            Gets the measurement point description.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.CompareRule">
            <summary>
            Gets the compare rule of the measurement point.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.Unit">
            <summary>
            Gets the unit field of the measurement point.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.PrintFormat">
            <summary>Gets the format field.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfo.DocumentReference">
            <summary>
            Gets the measurement point document reference.
            </summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestCriteria.MPInfoAccessor">
            <summary>
            Indexer property accessor for MPInfo.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MPInfoAccessor.Item(System.Int32)">
            <summary>
            Gets specific Test criteria information for the selected measurement point.
            </summary>
            <param name="index">Zero-based index of the mesurement point.</param>
            <returns>Test criteria information for the selected measurement point.</returns>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler">
            <summary>Class for managing TestCriteria for multi-dut tests.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.Comment">
            <summary>
            Gets the Test criteria Comment.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.Date">
            <summary>
            Gets the date of the Test criteria.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.MaxRepeat">
            <summary>
                The max repeat ofthe Test Criteria.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.Type">
            <summary>
            Gets the type of Test criteria.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.Description">
            <summary>
            Gets the Test criteria Description.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.DynamicInterval">
            <summary>
            Gets the interval the test is invoked in.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.DynamicNumberOfOk">
            <summary>
            Gets the number of units that have to pass
            before dynamic testing can be invoked.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.DocumentRevision">
            <summary>
            Gets the Test criteria Revision.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.DocumentNumber">
            <summary>
            Gets the Test criteria Document number.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.Path">
            <summary>
            Gets the full path to the Test criteria file.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.Responsible">
            <summary>
            Gets the Responsible for the Test criteria. 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.Filename">
            <summary>
            Gets the filename of the Test criteria.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.CurrentMeasurePoint">
            <summary>Gets the information about the current measurement point.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MultiDutHandler.MeasurePoint">
            <summary>Access a measurement point by an index.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.Comment">
            <summary>
            Gets the Test criteria Comment. Reserved for future usages.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.Date">
            <summary>
            Gets the date of the Test criteria.
            </summary>
            <example>
            This example retrieves and displays date information of the test criteria.<br />
             <code>
                  Output.TextOut("date:{0}", TestCriteria.Date);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MaxRepeat">
            <summary>Gets the maximum number of times the measurement can be repeated. Doesn't work right now. </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.Type">
            <summary>
            Gets the type of Test criteria. </summary>
            <example>
            This example retrieves and displays Type information from the test criteria file.<br />
            <code>
                  Output.TextOut("Type:{0}", TestCriteria.Type);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.Description">
            <summary>
            Gets the Test criteria Description. 
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.DynamicInterval">
            <summary>
            Gets the interval the test is invoked in. Doesn't work right now. </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.DynamicNumberOfOk">
            <summary>
            Gets the number of units that have to pass
            before dynamic testing can be invoked.  Doesn't work right now.  </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.DocumentRevision">
            <summary>
            Gets the Test criteria Document Revision. </summary>
            <example>
            This example retrieves and displays Document Revision information from the test criteria file.<br />
            <code>
                  Output.TextOut("DocumentRevision:{0}", TestCriteria.DocumentRevision);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.DocumentNumber">
            <summary>
            Gets the Test criteria Document number. </summary>
            <example>
            This example retrieves and displays Document number information from the test criteria file.<br />
            <code>
                  Output.TextOut("DocumentNumber:{0}", TestCriteria.DocumentNumber);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.Path">
            <summary>
            Gets the full path to the Test criteria file. </summary>
            <example>
            This example retrieves and displays Path information of the test criteria file.<br />
            <code>
                   Output.TextOut("Path:{0}", TestCriteria.Path.Replace(@"\", @"\\\\").Replace(@"\\", @"\"));
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.Responsible">
            <summary>
            Gets the PREPARED person of the Test criteria.  </summary>
            <example>
            This example retrieves and displays responsible person information from the test criteria file.<br />
            <code>
                  Output.TextOut("Responsible:{0}", TestCriteria..Responsible);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.Filename">
            <summary>
            Gets the filename of the Test criteria. </summary>
            <example>
            This example retrieves and displays filename of test criteria.<br />
            <code>
            Output.TextOut("Filename:{0}", TestCriteria.Filename);
             </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.CurrentMeasurePoint">
             <summary>Gets the information about the current measurement point.</summary>
             <example>
             This example retrieves and displays compareRule information from the current measurement point.<br />
             <code>
                   Output.TextOut("CompareRule:{0}", TestCriteria.CurrentMeasurePoint.CompareRule);
             </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestCriteria.MeasurePoint">
            <summary>Access a measurement point by an index.</summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestPlan">
             <summary>
             Class for getting information associated with the test plan.
             </summary>
             <example>
             <code>
             try{
                // Some example properties of TestPlan.
                Output.TextOut(TestPlan.Description);
                Output.TextOut(TestPlan.FileName);
                Output.TextOut(TestPlan.MethodFlags);
            
                // Setting StatusResult.Executed from TestPlan is not allowed.
                Idefix.TxApi.Runtime.TestPlan.Status = Idefix.TxApi.Constants.StatusResult.Executed;
            
             }
             catch (TestPlanException e){
                Output.TextOutError("TestPlanException: " + e.Message);
             }
             </code>
             </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestPlan.RunModeResult">
            <summary>
            Specifies identifiers to indicate the return value of the run mode.
            </summary>
        </member>
        <member name="F:Idefix.TxApi.Runtime.TestPlan.RunModeResult.Auto">
            <summary>
            Automatic Runmode chosen. This mode is normally chosen for standard production tests
            </summary>
        </member>
        <member name="F:Idefix.TxApi.Runtime.TestPlan.RunModeResult.Manual">
            <summary>
            Manual Runmode chosen. This mode is normally chosen for repair stations.
            </summary>
        </member>
        <member name="F:Idefix.TxApi.Runtime.TestPlan.RunModeResult.Custom">
            <summary>
            Custom Runmode chosen. This mode is normally chosen for prototype tests.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.Path">
            <summary>
            Gets the file path to the directory where the .tp
            file resides
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.ModuleName">
            <summary>
            The file name of the test method library.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.Position">
            <summary>
            Gets the position of the test plan.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.RunMode">
            <summary>
            Gets the current run mode.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.MethodFlags">
            <summary>
            Gets the flags of the run statement.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.MethodName">
            <summary>
            Gets the name of the test method as defined by the test library. 
            This is the name of the exported function.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.Revision">
            <summary>
            Gets the revision number of the test plan.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.MethodParameter">
            <summary>
            Gets the parameter of a run statement.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.ModuleType">
            <summary>
            Gets the type of the test library. DLL, EXE etc.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.FileName">
            <summary>
            Gets the file name of the test plan.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.ProductNumber">
            <summary>
            Gets the product identity of the test plan.
            This is defined in the Document field of the test plan.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.Description">
            <summary>
            Gets the description of the test plan.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.TestPlan.Status">
            <summary>
            Gets the current status of the test plan.
            <remarks>
            If you use this function keep in mind that it is checking the status of the
            previous execution rather than the current one.
            </remarks>
            </summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestRecord">
            <summary>
            The <c>TestRecord</c> class handles interaction with the test record. This includes adding additional information to 
            the test record as well as retrieving information from previous stored test records. 
            </summary>
            <remarks>
            Retrieving information from stored test protocols requires querying the test record database which might be time 
            consuming, use these features with care.  
            </remarks>
            <example>
            A short example that verifies if a DUT has been tested before and prints out latest test time and 
            test status if the DUT has been tested more than once. It also adds an circumstance note to the 
            test record that states that it is not the first time this DUT has been tested.
            <code>
            public int Measure()
            {
                try
                {
                    var currentDut = Dut.IdNumber;
            
                    if (TestRecord.GetTotalNumberOfTests(currentDut) &gt; 0)
                    {
                        TestRecord.SaveCircumstances("ExtraTesting", "This DUT has been tested multiple times.");
                        Output.TextOut("Last time this DUT was tested was " + TestRecord.GetLatestTestTime(currentDut));
                        if (TestRecord.GetLatestTestResult(currentDut) == StatusResult.Passed)
                        {
                            Output.TextOut("Last test of DUT was successful!");
                        } else
                        {
                            Output.TextOut("Last test of DUT failed!");
                        }
            
                    } else
                    {
                        Output.TextOut("First test for current DUT.");
                    }
            
                    return MethodResult.Ok;
                }
                catch (Exception e)
                {
                    Output.TextOutError(e.Message);
                    return MethodResult.Error;
                }
            }
            </code> 
            </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.TestRecord.MultiDutHandler">
            <summary>Class managing Test Records for Multi-DUT (Device Under Test) tests. </summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.MultiDutHandler.SaveCircumstances(System.String,System.String)">
            <summary>
                Adds a Circumstance to the Circumstances portion of the test protocol.
            </summary>
            <param name="name">Name of the circumstance ( must <b>not</b> be unique )</param>
            <param name="description">Description or value for the Circumstance</param>
            <seealso cref="M:Idefix.TxApi.Runtime.TestRecord.SaveCircumstances(System.String,System.String)"/>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.MultiDutHandler.SaveBlob(System.String,System.String,System.String,System.DateTime)">
            <summary>
                <p>Appends a BLOB (Binary large object ) to the test record. the object is stored in a file </p>
                <p>the function will throw an exeption if the operation was unsuccesful.</p>
                <p> - note that testresults must be saved in the testmethod for the operation to be allowed</p>
            </summary>
            <param name="name">The name of the BLOB</param>
            <param name="description">a description </param>
            <param name="filename">the filename</param>
            <param name="bestBeforeDate">At what time the BLOB can be deleted from the database </param>
            <seealso cref="M:Idefix.TxApi.Runtime.TestRecord.SaveBlob(System.String,System.String,System.String,System.DateTime)"/>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.MultiDutHandler.SaveBlob(System.String,System.String,System.String,System.Byte[],System.DateTime)">
            <summary>
                <p>Appends a BLOB (Binary large object ) to the test record. </p>
                <p>The object is stored in a file but is sent to this function as a byte[] array</p>
                <p>if the filename is left blank - a temporary name will be created </p>
                <p>the function will throw an exeption if the operation was unsuccesful.</p>
                <p>- note that testresults must be saved in the testmethod for the operation to be allowed</p>
            </summary>
            <param name="name">The name of the BLOB</param>
            <param name="description">a description </param>
            <param name="filename">the filename - may be blank</param>
            <param name="buffer">the binary data to be stored into the BLOB</param>
            <param name="bestBeforeDate">At what time the BLOB can be deleted from the database </param>
            <seealso cref="M:Idefix.TxApi.Runtime.TestRecord.SaveBlob(System.String,System.String,System.String,System.Byte[],System.DateTime)"/>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.AddInstrument(System.String,System.String)">
            <summary>
            Adds an instrument to the "Instrument" section of the test protocol 
            </summary>
            <example>
            Adds the Inventory number for the DMM to the test protocol
            <code>
            TestRecord.AddInstrument("DMM","120120210");
            </code>
            This line will be added to the test protocol (pamela) <br /><br />
            &lt;EQUIP&gt; "DMM","120120210"
            </example>
            <param name="instrument">Instrument name</param>
            <param name="inventoryNumber">Inventory number or equivalent</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.ClearAllInstruments">
            <summary>
            Clears the "Instrument" section of the test protocol
            </summary>
            <example>
            Clears all Inventory numbers from the test protocol
            <code>
            TestRecord.ClearAllInstruments();
            </code></example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.SaveCircumstances(System.String,System.String)">
             <summary>
            <p>Adds a Circumstance to the Circumstances portion of the test protocol </p>
            <p> - Some Circumstances may be generated automatically from Idefix</p>
                <p>
                    Example for Circumstances may be;</p>
                <ul>
                    <li>used data packets </li>
                    <li>Config Key for the product </li>
                    <li>used Test Plan </li>
                    <li>used Resources</li>
                </ul>
             </summary>
             <example><code>
             TestRecord.SaveCircumstances("Operating System","Windows Vista");
             </code>
             This line will be added to the test protocol (pamela) <br /><br />
             &lt;CIRC&gt; Operating System, "Windows Vista"
            </example>
             <param name="name">Name of the circumstance ( must <b>not</b> be unique )</param>
             <param name="description">Description or value for the Circumstance</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.SaveBlob(System.String,System.String,System.String,System.DateTime)">
            <summary>
            <p>Appends a BLOB (Binary large object ) to the test record. the object is stored in a file </p>
            <p>the function will throw an exeption if the operation was unsuccesful.</p>
            <p> - note that testresults must be saved in the testmethod for the operation to be allowed</p>
            </summary>
            <example>
            This example saves an existing file as a BLOB
            the blob may be deleted in three months
            <code>
            try
            {
                TestRecord.SaveBlob("BootLog.txt","Log file from Boot",@"C:\temp\BootLog.txt",DateTime.Now.AddMonths(3));
            }
            catch(Exception ex)
            {
              Output.TextOutError(ex.ToString());
            }</code>
            This line will be added to the test protocol (pamela) <br /><br />
            &lt;BLOB&gt; BootLog.txt, "Log file from Boot", "C:\temp\BootLog.txt", 2012-02-27
            </example>
            <param name="name">The name of the BLOB</param>
            <param name="description">a description </param>
            <param name="filename">the filename</param>
            <param name="bestBeforeDate">At what time the BLOB can be deleted from the database </param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.SaveBlob(System.String,System.String,System.String,System.Byte[],System.DateTime)">
            <summary>
            <p>Appends a BLOB (Binary large object ) to the test record. </p>
            <p>The object is stored in a file but is sent to this function as a byte[] array</p>
            <p>if the filename is left blank - a temporary name will be created </p>
            <p>the function will throw an exeption if the operation was unsuccesful.</p>
            <p>- note that testresults must be saved in the testmethod for the operation to be allowed</p>
            </summary>
            <example>
            This example creates an array of byte and saves it as a BLOB 
            the blob may be deleted in ten days
            <code>
            List&lt;byte&gt; = new List&lt;byte&gt;();
            for (byte i=0; i&lt;100;i++)  // create an array (List) of 100 bytes
            {
              b.Add(i);
            }
            try
            {
             TestRecord.SaveBlob("BlobName","array of byte",b.ToArray(),DateTime.Now.AddDays(10));
            }
            catch (Exception ex)
            {
             Output.TextOutError(ex.ToString());
            }
            </code>
            This line will be added to the test protocol (pamela) <br /> <br />
            &lt;BLOB&gt; BlobName, "array of byte", "C:\Users\xxxxx\AppData\Local\Temp\AName", 2012-02-27
            </example>
            <param name="name">The name of the BLOB</param>
            <param name="description">a description </param>
            <param name="filename">the filename - may be blank</param>
            <param name="buffer">the binary data to be stored into the BLOB</param>
            <param name="bestBeforeDate">At what time the BLOB can be deleted from the database </param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.GetLatestTestResultForMP(System.String,System.String,System.String,System.String)">
            <summary>
            Get the latest result of a specific measurement point.
            </summary>
            <param name="dutId">ID of DUT to query.</param>
            <param name="criteriaDoc">Criteria document number.</param>
            <param name="criteriaRev">Criteria revision.</param>
            <param name="mp">Measurement point that the result should be fetched for.</param>
            <returns>Result of the measurement <see cref="T:Idefix.TxApi.Constants.MeasurementResult"/>.</returns>
            <example>
            A short exampel that shows how retrieve the status of a specific measurementpoint.
            <code>
            public int Measure()
            {
                try
                {
                    const string dutId = "A530000001";
                    const string critNo = "19059-ROA888888";
                    const string critRev = "B";
                    const string mp = "COFF";
            
                    var result = TestRecord.GetLatestTestResultForMP(dutId, critNo, critRev, mp);
            
                    var sb = new StringBuilder();
                    Output.TextOut(String.Format(CultureInfo.InvariantCulture,
                                                 "The MP {0} on criteria {1}:{2} for DUT {3} has {4}",
                                                 mp, critNo, critRev, dutId, result));
            
                    return MethodResult.Ok;
                }
                catch (Exception e)
                {
                    Output.TextOut(e.Message);
                    return MethodResult.Error;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.GetLatestTestResult(System.String)">
            <summary>
            Get the latest result of a specific dut.
            </summary>
            <param name="dutId">ID of DUT to query.</param>
            <returns>Status result of the specified DUT <see cref="T:Idefix.TxApi.Constants.StatusResult"/>.</returns>
            <example>
            A short example that show how to retrieve the latest status of a specific DUT.
            <code>
            public int Measure()
            {
                try
                {
                    const string dutId = "A530000001";
                    if (TestRecord.GetLatestTestResult(dutId) == StatusResult.Passed)
                    {
                        Measurement.Save("PASS");
                        return MethodResult.Ok;
                    }
            
                    Measurement.Save("FAIL");
                    return MethodResult.Ok;
                }
                catch (Exception e)
                {
                    Output.TextOut(e.Message);
                    return MethodResult.Error;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.GetLatestTestTime(System.String)">
            <summary>
            Get the latest test time of a specific DUT.
            </summary>
            <param name="dutId">ID of DUT to query.</param>
            <returns>Time of the latest test.</returns>
            <example>
            A short example that show how to retrieve the last time a specific DUT has been tested.
            <code>
            public int Measure()
            {
                try
                {
                    Output.TextOut(
                        TestRecord.GetLatestTestTime("A530000001").ToString(
                            System.Globalization.CultureInfo.InvariantCulture));
            
                    Measurement.Save(1);
                }
                catch (Exception e)
                {
                    Output.TextOut(e.Message);
                    return MethodResult.Error;
                }
            
                return MethodResult.Ok;
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.TestRecord.GetTotalNumberOfTests(System.String)">
            <summary>
            Get the total number of tests for a specific dut
            </summary>
            <param name="dutId">ID of DUT to query.</param>
            <returns>Number of tests that has been performed for the specific DUT.</returns>
            <example>
            A short example that show how to fetch test record data for how many times a DUT has been 
            tested.
            <code>
            public int Measure()
            {
                try
                {
                    const string dutId = "A530000001";
                    Output.TextOut(String.Format(CultureInfo.InvariantCulture, "The DUT {0} has been test {1} times.", dutId,
                                                 TestRecord.GetTotalNumberOfTests(dutId)));
            
                    Measurement.Save(1);
                }
                catch (Exception e)
                {
                    Output.TextOut(e.Message);
                    return MethodResult.Error;
                }
            
                return MethodResult.Ok;
            }
            </code>
            </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.Threading">
             <summary>
             The <c>Threading</c> class is used to make it possible for a thread to communicate with the Idefix system.
             </summary>
             
             <remarks>
             When you create a thread that should be able to communicate with the Idefix system, the thread has to be registered to the Idefix system either 
             by using <see cref="M:Idefix.TxApi.Runtime.Threading.RegisterToMethod(System.Int32)"/> or <see cref="M:Idefix.TxApi.Runtime.Threading.RegisterGlobal(System.Int32)"/>
             <br /><br />
             
             Use <see cref="M:Idefix.TxApi.Runtime.Threading.RegisterToMethod(System.Int32)"/> when the thread is intended to live in a
             test method, e.g. saving measure points or printing to the output tab. Then the kernel 
             know what method to associate the call from the thread with. When the thread is no longer needed, use <see cref="M:Idefix.TxApi.Runtime.Threading.ReleaseFromMethod(System.Int32)"/>
             to release the thread from the Idefix kernel.<br />
             <b>It is important that the local thread is finished before exiting the test method. Otherwise you will get an Idefix error.</b>
             <br /><br />
             
             Use <see cref="M:Idefix.TxApi.Runtime.Threading.RegisterGlobal(System.Int32)"/> when creating a thread that is inteded to live during several
             test methods. When the thread is no longer needed, use <see cref="M:Idefix.TxApi.Runtime.Threading.ReleaseGlobal(System.Int32)"/>
             to release the thread from the Idefix kernel. If the globally registered thread communiactes with 
             the Idefix kernel, the global thread will use resources from the first available test method, if any.
             When no test method is running, the thread will block on the call to Idefix kernel until there is
             a test method running that it can use.<br />
             <b>It is important that the global thread is finished before exiting the test plan (app domain). Otherwise you will get an Idefix error.</b>
             <br /><br />
             
             Note: A thread should preferably run as a background thread. When a process is to be stopped with a running thread 
             which is not set to background, then the process will not be possible to stop. this will probably result in a Idefix crash.<br />
             <c>myTread.IsBackground = true;</c>
             <br /><br />
             
             Note: It is possible to save measurements in a local thread but not in a global thread. A global thread doesn't belong to a test method. 
             If you cannot be sure in which order the saves will occur then make sure to use the index version of the save methods.
             <br /><br />
             
             Note: It is ok to create a thread without register it to Idefix, However then the thread is not able to communicate with Idefix. 
             It is still important that the thread is finished before the test plan (App domain) is unloaded.
             <br /><br />
                 
             Note: If a test method creates a thread and registers it via TxApi, Now if the thread sends any messages to
             txapi after the testmethod has exited, Then TM.exe will hang when the next test plan is exeuted.
             Make sure you don't leave any local thread after exiting the test method and all global thread is ended before exiting the test plan.
             
             <h5>Known issues</h5>
             The Threading class function has got a known issue at the moment described below.<br />
             <list type = "table">
                <item>
                   <term>ITP00846</term>
                   <description>Measurement.Save() not possible in a thread</description>
                   <description>In ITP versions R9A and earlier it was not possible to use the <c>Measurement.Save()</c>
                   without getting a strange error message. This problem is solved in ITP R9B.
                   </description>
                </item>
             </list>
             
             </remarks>
             
             <example>
             This example shows how to create a local thread that makes some works and saves a measurement. The Thread supports code for User pressing abort.
             It is important that the thread is finished before exiting the test method.
             <code>
             bool bMeasurementSucceeded = false;
             
             public int Init()
             {
                return MethodResult.Ok;
             }
             
             public int Measure()
             {
                 Output.TextOut("Start the local thread example.");
            
                 //Create the local thread
                 System.Threading.ThreadStart job = new System.Threading.ThreadStart(WorkThreadLocal);
                 System.Threading.Thread thread = new System.Threading.Thread(job);
            
                 //Register the thread for idefix as a local thread
                 Idefix.TxApi.Runtime.Threading.RegisterToMethod(thread.ManagedThreadId);
            
                 //Make the thread a background thread
                 thread.IsBackground = true;
            
                 //Start the thread
                 thread.Start();
            
                 //wait for the thread to exit
                 thread.Join();
            
                 //Release the local thread from idefix
                 Idefix.TxApi.Runtime.Threading.ReleaseFromMethod(thread.ManagedThreadId);
            
                 //Check if the thread was aborted by the user or not
                 if (bMeasurementSucceeded)
                 {
                     Output.TextOut("The thread was executed successfully");
            
                     //Save the second Measurement from the test method
                     Measurement.Save(1, 1);
                 }
                 else
                 {
                     Output.TextOutError("The thread was interupted by the user or an exception occured");
                     Measurement.Save(0, 1);
                 }
            
                 Output.TextOut("Exit the local thread example.");
            
                 return MethodResult.Ok;
             }
             
             public int Exit()
             {
                return MethodResult.Ok;
             }
             
             public void WorkThreadLocal()
             {
                 try
                 {
                     Output.TextOut("Start the local thread that lives for 20 seconds");
                     for (int iLoop = 0; iLoop &lt; 20; iLoop++)
                     {
                         System.Threading.Thread.Sleep(1000);
                         Output.TextOut("Local thread: {0} sec", iLoop+1);
            
                         //Make it possible for the user to abort by pressing the Stop button in the Idefix User interface
                         if (FlowControl.StopFlag)
                         {
                             bMeasurementSucceeded = false;
                             return;
                         }
                     }
                     
                     //Save the first Measurement from the thread. Make sure to save using index if you don't know the order of your MP to save
                     Measurement.Save(1, 0);
                     
                     bMeasurementSucceeded = true;
                     Output.TextOut("The Local thread is finished");
                 }
                 catch (Exception)
                 {
                     bMeasurementSucceeded = false;
                     // log errors
                 }
             }
             </code>
             <br /><br />
             This example shows how to start a global thread in one test method and wait for the global thread to shutdown in another test method. 
             The thread is stored global using <c>GlobalObjectStore</c>. It is important that the thread is stoped before the test plan (app domain) is unloaded.
             When using a global threads it will continue to be executed after the test method has finished, simultaneosly with the coming test methods in the test plan.<br /><br />
             
             This is how the run items in the test plan looks like in this example:<br />
             MANUAL BEGIN<br />
                RUN(TestMethod.StartGlobalThread, "", TestMethod.StartGlobalThread_1, , , )<br />
                RUN(TestMethod.DoSomething_1, "", TestMethod.DoSomething_1, , , )<br />
                RUN(TestMethod.DoSomething_2, "", TestMethod.DoSomething_2, , , )<br />
                RUN(TestMethod.DoSomething_3, "", TestMethod.DoSomething_3, , , )<br />
                RUN(TestMethod.StopGlobalThread, "", TestMethod.StopGlobalThread_1, , , )<br />
             END_MANUAL<br />
             
             <code>
             === MyGlobalObject.cs ===
             //This is the global object that is stored using GlobalObjectStore.
             
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Text;
             
             namespace TestMethod
             {
                 class MyGlobalObject : MarshalByRefObject
                 {
                     public override object InitializeLifetimeService()
                     {
                         return null; //Removes the default lease time of 5 minutes
                     }
                     public System.Threading.ThreadStart job;
                     public System.Threading.Thread thread;
                     
                     public int ThreadId
                     {
                         get { return thread.ManagedThreadId; }
                     }
                     
                     public void startThread()
                     {
                         //Create the thread
                         job = new System.Threading.ThreadStart(WorkThreadGlobal);
                         thread = new System.Threading.Thread(job);
                         
                         //Register the thread for idefix as a global thread
                         Idefix.TxApi.Runtime.Threading.RegisterGlobal(thread.ManagedThreadId);
                         
                         //Make the thread a background thread
                         thread.IsBackground = true;
                         
                         //Start the thread
                         thread.Start();
                     }
                     
                     public bool isThreadAlive()
                     {
                         return thread.IsAlive;
                     }
                     
                     public void killThread()
                     {
                         //Kill the thread if it is running
                         if (thread.IsAlive)
                             thread.Abort();
                     }
                     
                     //This thread example will count to 25 and then die
                     private void WorkThreadGlobal()
                     {
                         try
                         {
                             Idefix.TxApi.Runtime.UserInfo.Output.TextOut("GLOBAL THREAD STARTED");
                             for (int iLoop = 0; iLoop &lt; 25; iLoop++)
                             {
                                 System.Threading.Thread.Sleep(1000);
                                 Idefix.TxApi.Runtime.UserInfo.Output.TextOut("Global: {0}", iLoop);
                             }
                             Idefix.TxApi.Runtime.UserInfo.Output.TextOut("GLOBAL THREAD COMPLETED");
                         }
                         catch (Exception)
                         {
                             // log errors
                         }
                     }
                 }
             }
             
             === StartGlobalThread.cs ===
             //This test method creates a global object and executes the startThread() method in that object
             public int Measure()
             {
                 //Create a global object
                 MyGlobalObject mgo = new MyGlobalObject();
                 Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject&lt;MyGlobalObject&gt; obj = new Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject&lt;MyGlobalObject&gt;("MyGlobalObject");
                 obj.Value = mgo;
                 
                 //Start the thread in the global object
                 obj.Value.startThread();
                 
                 return MethodResult.Ok;
             }
             
             === StopGlobalThread.cs ===
             //This test method waits for the thread to exit by it self or if the user presses the Stop button in the Idefix UI. If the user presses Stop then the thread is killed. The function also makes sure to release the thread from Idefix
             public int Measure()
             {
                 if (Idefix.TxApi.Tools.GlobalObjectStore.Exist("MyGlobalObject"))
                 {
                     Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject&lt;MyGlobalObject&gt; obj = new Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject&lt;MyGlobalObject&gt;("MyGlobalObject");
                     
                     Output.TextOut("NOW WE ARE WAITING FOR THE THREAD TO EXIT");
                     
                     //Wait until the thread is stopped by it self or the user presses abort
                     while (obj.Value.isThreadAlive() &amp;&amp; !FlowControl.StopFlag)
                     {
                         System.Threading.Thread.Sleep(100);
                     }
                     
                     if ( FlowControl.StopFlag )
                         Output.TextOutError("STOPPED BY THE USER");
                         
                     if (obj.Value.isThreadAlive())
                     {
                         obj.Value.killThread();
                     }
                     
                     //Release the global thread
                     Idefix.TxApi.Runtime.Threading.ReleaseGlobal(obj.Value.ThreadId);
                 }
                 return MethodResult.Ok;
             }
             
             === Dosomething.cs ===
             //This test method just runs for three seconds. The global thread is executed simultaneosly and writes to the Output windows 
             public int Measure()
             {
                 //Do any background work
                 Output.TextOut("DO SOMETHING FOR 3 SECONDS");
                 for (int iLoop = 0; iLoop &lt; 3; iLoop++)
                 {
                     System.Threading.Thread.Sleep(1000);
                     Output.TextOut("DO SOMETHING: {0}", iLoop+1);
                 }
                 Output.TextOut("STOP DOING SOMETHING FOR 3 SECONDS");
                 
                 return MethodResult.Ok;
             }
             </code>
             This example will show the following output in the Test Manager Log Window
             <b>Output:</b><br />
             <font color="#0000FF">**** TestMethod.StartGlobalThread ****</font><br />
             <font color="#0000FF">**** TestMethod.DoSomething_1 ****</font><br /><br />
             DO SOMETHING FOR 3 SECONDS<br />
             GLOBAL THREAD STARTED<br />
             Global: 0<br />
             DO SOMETHING: 1<br />
             Global: 1<br />
             DO SOMETHING: 2<br />
             Global: 2<br />
             DO SOMETHING: 3<br />
             STOP DOING SOMETHING FOR 3 SECONDS<br />
             <font color="#0000FF">**** TestMethod.DoSomething_2 ****</font><br />
             DO SOMETHING FOR 3 SECONDS<br />
             Global: 3<br />
             DO SOMETHING: 1<br />
             Global: 4<br />
             DO SOMETHING: 2<br />
             Global: 5<br />
             DO SOMETHING: 3<br />
             STOP DOING SOMETHING FOR 3 SECONDS<br />
             <font color="#0000FF">**** TestMethod.DoSomething_3 ****</font><br />
             DO SOMETHING FOR 3 SECONDS<br />
             DO SOMETHING: 1<br />
             Global: 6<br />
             Global: 7<br />
             DO SOMETHING: 2<br />
             Global: 8<br />
             DO SOMETHING: 3<br />
             STOP DOING SOMETHING FOR 3 SECONDS<br />
             <font color="#0000FF">**** TestMethod.StopGlobalThread ****</font><br />
             NOW WE ARE WAITING FOR THE THREAD TO EXIT<br />
             Global: 9<br />
             Global: 10<br />
             Global: 11<br />
             Global: 12<br />
             Global: 13<br />
             Global: 14<br />
             Global: 15<br />
             Global: 16<br />
             Global: 17<br />
             Global: 18<br />
             Global: 19<br />
             Global: 20<br />
             Global: 21<br />
             Global: 22<br />
             Global: 23<br />
             Global: 24<br />
             GLOBAL THREAD COMPLETED<br />
             </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Threading.RegisterToMethod(System.Int32)">
            <summary>
            Registers a thread with the currently running test method.
            </summary>
            <param name="ThreadId">Thread-id of the thread to register.</param>
            
            <remarks>
            If you create a local thread that shall communicate with Idefix (printing or Saving measurements) then you have to register it to Idefix.
            The local thread must be finished before the test method is completed. When the thread is finished it must be released from Idefix. If this is not
            done correctly then you will get error messages in Idefix when the test plan (app domain) is to be unloaded.
            </remarks>
            
            <example>Create, start and wait for a local thread to exit. (All threads in a Idefix test method must be registered to Idefix and released when not used anylonger)
            <code>
            public int Measure()
            {
                //Create the local thread
                System.Threading.ThreadStart job = new System.Threading.ThreadStart(WorkThreadLocal);
                System.Threading.Thread thread = new System.Threading.Thread(job);
            
                //Register the thread for idefix as a local thread
                Idefix.TxApi.Runtime.Threading.RegisterToMethod(thread.ManagedThreadId);
                
                //Make the thread a background thread
                thread.IsBackground = true;
                
                //Start the thread
                thread.Start();
                
                //Wait for the thread to exit
                thread.Join();
                
                //Release the local thread from idefix
                Idefix.TxApi.Runtime.Threading.ReleaseFromMethod(thread.ManagedThreadId);
            }
            
            public void WorkThreadLocal()
            {
                .
                .
                .
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Threading.ReleaseFromMethod(System.Int32)">
            <summary>
            Releases a registered thread from its connection to a specific test method.
            </summary>
            <param name="ThreadId">Thread-id of the thread to release.</param>
            
            <remarks>
            If you create a local thread that shall communicate with Idefix (printing or Saveing measurements) then you have to register it to Idefix.
            The local thread must be finished before the test method is completed. When the thread is finished it must be released from Idefix. If this is not
            done correctly then you will get error messages in Idefix when the test plan (app domain) is to be unloaded.
            </remarks>
            
            <example>Create, start and wait for a local thread to exit. (All threads in a Idefix test method must be registered to Idefix and released when not used anylonger)
            <code>
            public int Measure()
            {
                //Create the local thread
                System.Threading.ThreadStart job = new System.Threading.ThreadStart(WorkThreadLocal);
                System.Threading.Thread thread = new System.Threading.Thread(job);
            
                //Register the thread for idefix as a local thread
                Idefix.TxApi.Runtime.Threading.RegisterToMethod(thread.ManagedThreadId);
                
                //Make the thread a background thread
                thread.IsBackground = true;
                
                //Start the thread
                thread.Start();
                
                //Wait for the thread to exit
                thread.Join();
                
                //Release the local thread from idefix
                Idefix.TxApi.Runtime.Threading.ReleaseFromMethod(thread.ManagedThreadId);
            }
            
            public void WorkThreadLocal()
            {
                .
                .
                .
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Threading.RegisterGlobal(System.Int32)">
            <summary>
            Registers a thread as a global thread. 
            </summary>
            <param name="ThreadId">Thread-id of a global thread to register.</param>
            
            <remarks>
            If you create a global thread that is intended to live during several test methods and shall communicate with Idefix 
            (printing or Saveing measurements) then you have to register it to Idefix. The global thread must be finished before
            the entire test plan is completed. When the thread is finished it must be released from Idefix. If this is not
            done correctly then you will get error messages in Idefix when the test plan (app domain) is to be unloaded.
            </remarks>
            
            <example>Create and start a global thread. The thread must be registered to Idefix
            <code>
            //Create the thread
            System.Threading.ThreadStart job = new System.Threading.ThreadStart(WorkThreadGlobal);
            System.Threading.Thread thread = new System.Threading.Thread(job);
            
            //Register the thread for idefix as a global thread
            Idefix.TxApi.Runtime.Threading.RegisterGlobal(thread.ManagedThreadId);
            
            //Make the thread a background thread
            thread.IsBackground = true;
            
            //Start the thread
            thread.Start();
            </code>
            </example> 
        </member>
        <member name="M:Idefix.TxApi.Runtime.Threading.ReleaseGlobal(System.Int32)">
            <summary>
            Releases a thread that earlier was registered as a global thread. 
            </summary>
            <param name="ThreadId">Thread-id of a global thread to release.</param>
            
            <remarks>
            If you create a global thread that is intended to live during several test methods and shall communicate with Idefix 
            (printing or Saveing measurements) then you have to register it to Idefix. The global thread must be finished before
            the entire test plan is completed. When the thread is finished it must be released from Idefix. If this is not
            done correctly then you will get error messages in Idefix when the test plan (app domain) is to be unloaded.
            </remarks>
            
            <example>You must stop all global threads before you exit the complete test in Idefix. When the thread is completed make sure to unregister it from Idefix.
            <code>
            //Release the global thread
            Idefix.TxApi.Runtime.Threading.ReleaseGlobal(ThreadId);
            </code>
            </example> 
        </member>
        <member name="T:Idefix.TxApi.Runtime.Timer">
            <summary>
            The  interactive timer are used automatically with TxAPI dialogs to count interactive time (<b> Idefix.TxApi.Runtime.UserInfo.Dialogs</b>).
            The <b>Timer</b> class provides way to start and stop interactive driver in code.
            </summary>
            <remarks> 
            <b>Timer</b> status are shown on test manager.
            If  <b>Timer</b> is not stopped in Testmethod, it should be stopped manually with <b>Cont</b> button on Test Manager toolbar.
            </remarks>
            <example>
            Example shows how to use <b>Timer</b> methods in TestMethod
            <code> 
            public int Measure()
            {
                Output.TextOut("Test is in RUN mode");
                Thread.Sleep(1000);
                
                Output.TextOut("Timer start! Test is in PAUSE mode");
                Timer.Start();
                Output.TextOut("Wait 2sec!");
                Thread.Sleep(5000);
            
                Timer.Stop();
                Output.TextOut("Timer stops! Tesis in Run mode");
                Thread.Sleep(1000);
                
                Output.TextOut("Timer start! Test is in PAUSE mode");
                Timer.Start();
                Output.TextOut("Wait 2sec!");
                Thread.Sleep(2000);
                Measurement.Save(1);
            
                Dialogs.BoxQuestion("Continue a test, Dialog stops the timer.");
                Output.TextOut("Timer stops! Tesis in Run mode");
                
                Thread.Sleep(1000);
                return MethodResult.Ok;
            }
            </code>
            </example>
            
        </member>
        <member name="M:Idefix.TxApi.Runtime.Timer.#ctor">
            <summary>Internal constructor, used during load TestPlan.
            Do not use in code. All methods are static.</summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Timer.Start">
            <summary>
            Starts a timer that counts the interactive time. Each loaded test
            program has its own timer.
            <remarks>
            Note that the test program enters the Pause state as a result of this call, 
            and it will resume to the Run state as soon as Stop() is called.
            </remarks>
            </summary>
            <seealso cref="M:Idefix.TxApi.Runtime.Timer.Stop"/>
        </member>
        <member name="M:Idefix.TxApi.Runtime.Timer.Stop">
            <summary>
            Stops the timer that counts the interactive time. Each loaded
            test program has its own timer.
            <remarks>
            Note that the test program leaves the Pause state and enters the 
            Run state as a result of this call.
            </remarks>
            </summary>
            <seealso cref="M:Idefix.TxApi.Runtime.Timer.Start"/>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.Output">
             <summary>
             The <c>Output</c> class is handling different output functions used to print text to the Log Window in Test Manager. 
             </summary>
             
             <remarks>
             <para>
             The <c>Output</c> class is handling different output functions used to print text to the Log Window in Test Manager. 
             The text can be printed as information text (normal text in black) or Error messages (bold text in red). 
             It is possible to specify style and colour for individual characters.
             </para>
             
             <para>
             Error messages can be shown as messageboxes as well as text in the log window in Test Manager. 
             It is possible to ensure that the message is also written to Windows Event Log.
             The methods in the <c>Output</c> class uses the composite formatting feature of the .NET Framework to convert the value of
             an object to its text representation and embed that representation in the string written to the Log Window in Test Manager.
             </para>
             
             <para>
             The Test Manager can turn of these outputs in the log window.
             The output will be truncated when more than 1023 characters are printed. When this happens the output will have 
             three dots "..." in the end of output, and actually there will be only 1020 characters printed before these three dots.
             </para>
             
             <para>
             The <c>TextOut(...)</c> methods are only intended for printing text. If you try to print binary data and for example you have a EOF in the 
             middle of the binary string, the rest of that string will not be printed. if you have a binary string that you would like to
             show for the user, make sure you remove control characters using your own filter functionality before you send the string to <c>TexOut()</c>.
             </para>
             
             <h5>Control sequences</h5>
            
             <b>Font:</b><br />
             <list type = "table">
                <item>
                   <term>\\f0</term>
                   <description>Defines Arial font for the following characters. (Arial is default font)</description>
                </item>
                <item>
                   <term>\\f1</term>
                   <description>Defines Courier font for the following characters</description>
                </item>
             </list>
             
             <b>Color:</b><br />
             <list type = "table">
                <item>
                   <term>\\cf0</term><description>Defines current colour to the default colour that is black</description>
                </item>
                <item>
                   <term>\\cf1</term><description>Defines black colour for the following characters</description>
                </item>
                <item>
                   <term>\\cf2</term><description>Defines white colour for the following characters</description>
                </item>
                <item>
                   <term>\\cf3</term><description>Defines red colour for the following characters</description>
                </item>
                <item>
                   <term>\\cf4</term><description>Defines green colour for the following characters</description>
                </item>
                <item>
                   <term>\\cf5</term><description>Defines yellow colour for the following characters</description>
                </item>
                <item>
                   <term>\\cf6</term><description>Defines blue colour for the following characters</description>
                </item>
             </list>
             
             <b>Style:</b><br />
             <list type = "table">
                <item>
                   <term>\\b</term><description>Use bold style for the subsequent characters.</description>
                </item>
                <item>
                   <term>\\b0</term><description>Stop using bold style.</description>
                </item>
                <item>
                   <term>\\i</term><description>Use italic style for the subsequent characters.</description>
                </item>
                <item>
                   <term>\\i0</term><description>Stop using italic style.</description>
                </item>
                <item>
                   <term>\\ul</term><description>Use underline style for the subsequent characters.</description>
                </item>
                <item>
                   <term>\\ul0</term><description>Stop using underline style.</description>
                </item>
                <item>
                   <term>\\strike</term><description>Use strike through style for the subsequent characters.</description>
                </item>
                <item>
                   <term>\\strike0</term><description>Stop using strike through style.</description>
                </item>
             </list>
             
             <para>
             If you want to print a control definition as normal text e.g. “<c>\\i</c>”, write “<c>\\\\i</c>”. A directory path for 
             example could look like “<c>\\usr\\include\\</c>” in a normal string. To print it using this class, write <c>Output.TextOut("\\\\usr\\\\include\\\\");</c> or <c>Output.TextOut(@"\\usr\\include\\");</c>.
             </para>
             
             <para>
             If you like to write quotation mark then you should do like this: <c>Output.TextOut("\"This is a Quote\"");</c>
             </para>
             
             <br />
             <b>Composit formatting:</b><br />
             <para>
             The <c>Output</c> class uses .NET Framework composite formatting feature to create the output string.
             </para>
             
             <para>
             <b>Composit Format String</b><br />
             A composite format string and object list are used as arguments of methods that support the composite formatting feature. 
             A composite format string consists of zero or (up to four) runs of fixed text intermixed with one or more format items. 
             The fixed text is any string that you choose, and each format item corresponds to an object or boxed structure in the list.
             The composite formatting feature returns a new result string where each format item is replaced by the string representation of the corresponding object in the list.<br />
             </para>
             
             <para>
             <b>Format Item Syntax</b><br />
             Each format item takes the following form and consists of the following components:
             {index[,alignment][:formatString]}
             The matching braces ("{" and "}") are required. 
             The mandatory index component, also called a parameter specifier, is a number starting from 0 that identifies a corresponding item in the list of objects.
             </para>
             
             
             <para>
             more detailed information about Format Strings can be found here:<br />
             <see href="http://msdn.microsoft.com/en-us/library/dwhawy9k.aspx">Standard Numeric Format String</see><br />
             <see href="http://msdn.microsoft.com/en-us/library/0c899ak8.aspx">Custom Numeric Format Strings</see><br />
             <see href="http://msdn.microsoft.com/en-us/library/az4se3k1.aspx">Standard Date and Time Format Strings</see><br />
             <see href="http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx">Custom Date and Time Format Strings</see>
             </para>
             
             <br />
             <br />
             
             <h5>Known bugs</h5>
             The <c>TextOut()</c> function has got some known bugs at the moment. Work arounds are described below.<br />
             <list type = "table">
                <item>
                   <term>ITP00218</term>
                   <description>'%' in TextOut string causes Idefix to crash</description>
                   <description>When an single '%' character exists in the formatted string, then Test Manager will crash.
                   If an '%' character is to be printed there should be two % characters in the formatted string:<br />
                   <c>Output.TextOut("%%");</c><br />
                   <c>Output.TextOut("%{0}","%");</c><br />
                   <b>This error is fixed in release R7. From release R7 only one % charachters should be enough</b>
                   </description>
                </item>
                <item>
                   <term>ITP00157</term>
                   <description>%s formatting causes a crash</description>
                   <description>The report includes two problems:<br />
                   1. %s in a string to textout() will print garabage. <br />
                   2. A single % character in a string to textout() will make Test Manager to crash.<br />
                   <b>This error is fixed in release R7. From release R7 %s will not print garbage. Don't try to use %s in string like in printf(). It won't work.</b>
                   </description>
                </item>
                <item>
                   <term></term>
                   <description>Style formatting sequense need to end with an space character</description>
                   <description>When using any style formatting sequences make sure to end with an space. Otherwise all characters until the first space will be truncated.<br />
                   <c>Output.TextOut("\\b Do like this");</c><br />
                   <c>Output.TextOut("\\b\\i Or like this");</c><br />
                   <c>Output.TextOut("\\b\\iThis will be truncated");</c>
                   </description>
                </item>    
             </list>
             
             </remarks>
             
             
             <example>This example shows how to use the TextOut(...) methods.
             <code>
             // Write a simple text
             Output.TextOut("This text is written to the Log Window in Test Manager...");
             Output.TextOut("");// New Line 
             
             // Write text with different colors and styles 
             Output.TextOut("\\cf0Default color \\cf1Black \\cf2White \\cf3Red \\cf4Green \\cf5Yellow \\cf6Blue");
             Output.TextOut("\\f0Arial \\f1Courier");
             Output.TextOut("\\b Bold \\b0 Normal");
             Output.TextOut("\\i Italic \\i0 Normal");
             Output.TextOut("\\ul Underline \\ul0 Normal");
             Output.TextOut("");// New Line
             
             // Write text with different combined colors and styles 
             Output.TextOut("\\cf3\\f1\\b\\i\\ul Courier,Red,Bold,Underlined and Italic");
             Output.TextOut("\\f1 Courier,\\cf3 Red,\\b Bold,\\ul Underlined and \\i Italic");
             Output.TextOut("\\i\\b This part is italic and bold. \\i0\\ul\\cf4 Green underlined still bold text.\\cf0\\ul0\\b0  Default text style.");
             Output.TextOut("");// New Line
             
             // Text with backslash
             Output.TextOut("This is the ITP path: C:\\\\data\\\\ITP\\\\");
             Output.TextOut(@"This is the ITP path: C:\\data\\ITP\\");
             Output.TextOut("");// New Line
             
             Output.TextOut("\"This is a Quote\"");
             
             // Some text formatting
             Output.TextOut("Formating a number {0:d5}", 123);
             Output.TextOut("Formating a number {0:n2}", 1234);
             Output.TextOut("Formating a number 0x{0:x}", 1234);
             Output.TextOut("Today is {0:dddd dd MMM yyyy}", DateTime.Today);
             Output.TextOut("");// New Line
             </code>
             
             
             
             <b>Output:</b><br />
             This text is written to the Log Window in Test Manager...<br />
             <br />
             Default color Black <font color="#FFFFFF">White</font>&#160;<font color="#FF0000">Red</font>&#160;<font color="#00FF00">Green</font>&#160;<font color="#FFFF00">Yellow</font>&#160;<font color="#0000FF">Blue</font><br />
             <font face="Arial">Arial</font>&#160;<font face="courier">Courier</font><br />
             <b>Bold</b> Normal<br />
             <i>Italic</i> Normal<br />
             <u>Underline</u> Normal<br />
             <br />
             <b><u><i><font face="courier" color="#FF0000">Courier,Red,Bold,Underlined and Italic</font></i></u></b><br />
             <font face="courier">Courier,</font><font face="courier" color="#FF0000">Red,<b>Bold,<u>Underlined and <i>Italic</i></u></b></font><br />     
             <b><i>This part is italic and bold.</i></b> <font face="courier" color="#00FF00"> <u><b>Green underlined still bold text.</b></u></font> Default text style.<br /> 
             <br />
             This is the ITP path: C:\data\ITP\<br />
             This is the ITP path: C:\data\ITP\<br />
             <br />
             "This is a Quote"<br />
             Formating a number 00123<br />
             Formating a number 1 234.00<br />
             Formating a number 0x4d2<br />
             Today is thursday 07 okt 2010<br />
            
             </example>
             
             <exception cref="T:System.FormatException">
             A FormatException is thrown if a parameter specifier designates an item outside the bounds of the list of objects.
             <c>Output.TextOut("{1}","This will throw an exception...");</c>
             </exception>
             <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">
             If a DriverNotConnectedException occurs, then there probably is some problems within the txapi_config.xml file.
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.#ctor">
            <summary></summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOut(System.String)">
            <summary>Writes the specified string value to the Log Window in Test Manager as normal black text.</summary>
            
            <param name="output">A string to be written.</param>
            
            <example>This example shows how to use the TextOut(string) method.
            <code>
            Output.TextOut("This text is written to the Log Window in  \\b Test Manager. \\b0");
            </code>
            
            <b>Output:</b><br />
            This text is written to the Log Window in  <b>Test Manager.</b>
            
            </example> 
            <overloads>This method has six overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOut(System.String,System.Object)">
             <summary>Formats the string with the text equivalent of the value of a specified Object instance, 
             and then writes the replaced string value to the Log Window in Test Manager as normal black text.</summary>
             <param name="output">A composit format string to be written.</param>
             <param name="arg0">An object to format.</param>
             
             <example>This example shows how to use the TextOut(string, object) method.
             <code>
             // Writing some texts
             Output.TextOut("I like \\ul {0}", "this");
             Output.TextOut("Average is \\cf3 {0}", 12.3);
             Output.TextOut("Maximum value is \\cf4 {0}", 15);
             Output.TextOut("");// New Line
            
             // Some text formatting
             Output.TextOut("Formating a number. Fill with leading spaces {0:d5}", 123);
             Output.TextOut("Formating a number. Two decimals {0:n2}", 1234);
             Output.TextOut("Formating a number to hex {0:x}", 1234);
             Output.TextOut("Today is {0:dddd dd MMM yyyy}", DateTime.Today);
             Output.TextOut("");// New Line
             </code>
             
             <b>Output:</b><br />
             I like <u>this</u><br />
             Average is <font color="#FF0000">12.3</font><br />
             Maximum value is <font color="#00FF00">15</font><br />
             <br />
             Formating a number. Fill with leading spaces 00123<br />
             Formating a number. Two decimals 1 234.00<br />
             Formating a number to hex 4d2<br />
             Today is torsdag 07 okt 2010<br />
             
             
             </example>
             <exception cref="T:System.FormatException">
             A FormatException is thrown if a parameter specifier designates an item outside the bounds of the list of objects.
             <c>Output.TextOut("{1}","This will throw an exception...");</c>
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOut(System.String,System.Object,System.Object)">
            <summary>Formats the string with the text equivalent of the value of the two specified Object instances, 
            and then writes the replaced string value to the Log Window in Test Manager as normal black text.</summary>
            <param name="output">A composit format string to be written.</param>
            <param name="arg0">An object to format.</param>
            <param name="arg1">An object to format.</param>
            
            <example>This example shows how to use the TextOut(string, object, object) method.
            <code>
            // Measuring some values
            Output.TextOut("Lets Measure some values...");
            Output.TextOut("The measured value was: \\cf3 {0} \\cf0 {1}", 12.3, "Volt");
            Output.TextOut("The measured value was: \\cf4 {0} \\cf0 {1}", 0.56, "Ampere");
            Output.TextOut("");// New Line
            </code>
            
            <b>Output:</b><br />
            Lets Measure some values...<br />
            The measured value was: <font color="#FF0000">12.3</font> Volt<br />
            The measured value was: <font color="#00FF00">0.56</font> Ampere<br />
            
            
            </example>
            <exception cref="T:System.FormatException">
            A FormatException is thrown if a parameter specifier designates an item outside the bounds of the list of objects.
            <c>Output.TextOut("{0} {1} {2}","This will", " throw an exception...");</c>
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOut(System.String,System.Object,System.Object,System.Object)">
            <summary>Formats the string with the text equivalent of the value of the three specified Object instances, 
            and then writes the replaced string value to the Log Window in Test Manager as normal black text.</summary>
            <param name="output">A composit format string to be written.</param>
            <param name="arg0">An object to format.</param>
            <param name="arg1">An object to format.</param>
            <param name="arg2">An object to format.</param>
            
            <example>This example shows how to use the TextOut(string, object, object) method.
            <code>
            // Measuring some values
            Output.TextOut("Lets Measure some values...");
            Output.TextOut("The measured value was: {0} {2} {1} {2}", 12.3, 11, "V");
            Output.TextOut("The measured value was: {0} {2} {1} {2}", 0.56, 0.68, "A");
            Output.TextOut("");// New Line
            </code>
            
            <b>Output:</b><br /> 
            Lets Measure some values...<br />
            The measured value was: 12.3 V 11 V<br />
            The measured value was: 0.56 A 0.68 A<br />
            </example>
            <exception cref="T:System.FormatException">
            A FormatException is thrown if a parameter specifier designates an item outside the bounds of the list of objects.
            <c>Output.TextOut("{0} {1} {2} {3}","This will", " throw ", "an exception...");</c>
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOut(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>Formats the string with the text equivalent of the value of the four specified Object instances, 
            and then writes the replaced string value to the Log Window in Test Manager as normal black text.</summary>
            <param name="output">A composit format string to be written.</param>
            <param name="arg0">An object to format.</param>
            <param name="arg1">An object to format.</param>
            <param name="arg2">An object to format.</param>
            <param name="arg3">An object to format.</param>
            
            <example>This example shows how to use the TextOut(string, object, object, object) method.
            <code>
            // Measuring some values
            Output.TextOut("Lets Measure some values...");
            Output.TextOut("The measured value was: {0} {1} {2} {3}", 12.3, "\\cf3N/A\\cf0", 11, 10.9);
            Output.TextOut("The measured value was: {0} {1} {2} {3}", 0.56, 0.68, 0.9, "\\cf3N/A\\cf0");
            Output.TextOut("");// New Line
            </code>
            
            
            <b>Output:</b><br /> 
            
            Lets Measure some values...<br />
            The measured value was: 12.3 <font color="#FF0000">N/A</font>11 10.9<br />
            The measured value was: 0.56 0.68 0.9 <font color="#FF0000">N/A</font><br />
            </example>
            <exception cref="T:System.FormatException">
            A FormatException is thrown if a parameter specifier designates an item outside the bounds of the list of objects.
            <c>Output.TextOut("{0} {1} {2} {3} {4}","This", "will", " throw ", "an exception...");</c>
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOut(System.String,System.Object[])">
             <summary>Formats the string with the text equivalent of the value of a corresponding Object instance in a specified array, 
             and then writes the replaced string value to the Log Window in Test Manager as normal black text.</summary>
             
             <param name="output">A composit format string to be written.</param>
             <param name="arg">An Object array containing zero or more objects to format.</param>
             
             <example>This example shows how to use the TextOut(string, object[]) method.
             <code>
             object[] MyObj = new object[10];
             MyObj[0] = "One";
             MyObj[1] = 2;
             MyObj[2] = 3.333;
             MyObj[3] = "cztery";
             MyObj[4] = "fünf";
             MyObj[5] = 6;
             MyObj[6] = "saba";
             MyObj[7] = 8;
             MyObj[8] = "huit";
             MyObj[9] = 10.10;
            
             Output.TextOut("Count to ten... {0} : {1} : {2} : {3} : {4} : {5} : {6} : {7} : {8} : {9}", MyObj);
             Output.TextOut("");// New Line
             </code> 
             
             <b>Output:</b><br />
             Count to ten... One : 2 : 3.333 : cztery : fünf : 6 : saba : 8 : huit : 10.1<br />
             
             </example> 
             
             <exception cref="T:System.FormatException">
             A FormatException is thrown if a parameter specifier designates an item outside the bounds of the list of objects.
             <c>Output.TextOut("{0} {1} {2} {3} {4}","This", "will", " throw ", "an exception...");</c>
             object[] MyObj = new object[1];
             MyObj[0] = "One";
             <c>Output.TextOut("{0} {1} {2} {3} {4}", MyObj);</c>
             </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.String)">
            <summary>Writes the specified string value to the Log Window in Test Manager as an error in bold red text.</summary>
            <param name="output">A string to be written as the error messages.</param>
            
            <example>This example shows how to use the TextOutError(string) method. 
            <code> 
            Output.TextOutError("Something went wrong...");
            Output.TextOutError("Something went \\ul really \\ul0 wrong...");
            </code> 
            </example>
            <overloads>This method has twelve overloads.</overloads>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.String,System.Object)">
            <summary>Formats the string with the text equivalent of the value of a specified Object instance, 
            and then writes the replaced string value to the Log Window in Test Manager as an error in bold red text.</summary>
            <param name="output">A composit format string to be written as the error text.</param>
            <param name="arg0">An object to format.</param>
            
            <example>This example shows how to use the TextOutError(string, object) method.
            <code> 
            Output.TextOutError("Connection is not established. Error code: \\ul {0}", 231);
            </code> 
            </example>
            
            <example>This example shows example of catching an FormatException.
            <code> 
            try
            {
                Output.TextOutError(" {4} ", 1);    //Generates an FormatException
            }
            catch (FormatException ex)
            {
                Output.TextOutError("Internal error in the Test method: {0}", ex.ToString() );
            }
            </code> 
            </example>
            
            <example>This example shows example of formatting some strings.
            <code> 
            for ( int value = -10; value &lt;= 10; value++)
            {
               Output.TextOut("{0:#,##0.00;(#,##0.00);Zero}", value);
            }
            Output.TextOut("{0:(###) ###-####}", 8005551212);
            Output.TextOut("{0:yes;;no}", 1);
            Output.TextOut("{0:yes;;no}", 0);
            Output.TextOut("{0:##.00'}%", 1.2);
            Output.TextOut("{0:##.00'%}", 90.234);
            </code> 
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.String,System.Object,System.Object)">
            <summary>Formats the string with the text equivalent of the value of the two specified Object instances, 
            and then writes the replaced string value to the Log Window in Test Manager as an error in bold red text.</summary>
            <param name="output">A composit format string to be written as the error text.</param>
            <param name="arg0">An object to format.</param>
            <param name="arg1">An object to format.</param>
            
            <example>This example shows how to use the TextOutError(string, object, object) method.
            <code> 
            Output.TextOutError("An error was detected. Error code: \\ul {0}\\ul0  {1}", 1229, "An operation was attempted on a nonexistent network connection." );
            </code> 
            </example> 
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.String,System.Object,System.Object,System.Object)">
            <summary>Formats the string with the text equivalent of the value of the three specified Object instances, 
            and then writes the replaced string value to the Log Window in Test Manager as an error in bold red text.</summary>
            <param name="output">A composit format string to be written as the error text.</param>
            <param name="arg0">An object to format.</param>
            <param name="arg1">An object to format.</param>
            <param name="arg2">An object to format.</param>
            
            <example>This example shows how to use the TextOutError(string, object, object, object) method.
            <code> 
            string errorType = "minor";
            Output.TextOutError("A \"{2}\" error occured. Error Code: {0:x} - {1}", -30, "Time out", errorType.ToString());
            </code> 
            </example> 
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>Formats the string with the text equivalent of the value of the four specified Object instances, 
            and then writes the replaced string value to the Log Window in Test Manager as an error in bold red text.</summary>
            <param name="output">A composit format string to be written as the error text.</param>
            <param name="arg0">An object to format.</param>
            <param name="arg1">An object to format.</param>
            <param name="arg2">An object to format.</param>
            <param name="arg3">An object to format.</param>
            <example>This example shows how to use the TextOutError(string, object, object, object, object) method.
            <code>
            string errorType = "minor";
            Output.TextOutError("A \"{3}\" error occured at {0:yyyy MMM dd}. Error Code: {1} ({2})", DateTime.Today, -30, "Time out", errorType.ToString());
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.String,System.Object[])">
             <summary>Formats the string with the text equivalent of the value of a corresponding Object instance in a specified array, 
             and then writes the replaced string value to the Log Window in Test Manager as an error in bold red text.</summary>
             <param name="output">A composit format string to be written as the error text.</param>
             <param name="arg">An Object array containing zero or more objects to format.</param>
             
             <example>This example shows how to use the TextOutError(string, object[]) method.
             <code>
             object[,] MyObj = { { 1, "One", "Ett" }, { 2, "Two", "Två" }, { 3, "Three", "Tre" }, { 4, "Four", "Fyra" }, { 5, "Five", "Fem" }, { 6, "Six", "Sex" }, { 7, "Seven", "Sju" }, { 8, "Eight", "Åtta" }, { 9, "Nine", "Nio" }, { 10, "Ten", "Tio" } };
            
             for(int i = 0; i!=MyObj.GetLength(0); i++)
             {
                Output.TextOutError("{0}, {1}, {2}, {0:x}, {0}/2={3:#,##0.00}", MyObj[i, 0], MyObj[i, 1], MyObj[i, 2], (float)((int)MyObj[i, 0])/2 );
             }
             </code> 
             </example> 
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates an error messages that will be shown in a popup dialog, written to the Log Window in Test Manager and
            also written to Windows Event Log if this feature is enabled in the MSGD driver in SSTool.
            </summary>
            
            <param name="code">A number representing the Event ID in Windows Event Log.</param>
            <param name="module">A string that will be concatenated with "Idefix TestMethod " and used as the Source in Windows Event Log.</param>
            <param name="type">The type of message. Usually texts like "Error" or "Warning". The text will be visible in the title of the error messages dialog.</param>
            <param name="output">A string to be written as the error text.</param>
            
            <example>This example shows how to use the TextOutError(int, string, string, string) method. 
            <code> 
            Output.TextOutError(1201, "My Module", "Message Title", "This error messages will be written to Test Manager Log Window, shown as a pop up dialogue with the title Message Title and also stored in Windows Event Log (if enabled). The Event ID will be 1201 and the Source will be Idefix TestMethod My Module");
            </code> 
            </example> 
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.Int32,System.String,System.String,System.String,System.Object)">
             <summary>
             Formats the string with the text equivalent of the value of a specified Object instance. The replaced string will
             be shown as an error messages in a popup dialog, written to the Log Window in Test Manager and
             also written to Windows Event Log if this feature is enabled in the MSGD driver in SSTool.
             </summary>
            
             <param name="code">A number representing the Event ID in Windows Event Log.</param>
             <param name="module">A string that will be concatenated with "Idefix TestMethod " and used as the Source in Windows Event Log.</param>
             <param name="type">The type of message. Usually texts like "Error" or "Warning". The text will be visible in the title of the error messages dialog.</param>
             <param name="output">A composit format string to be written as the error text.</param>
             <param name="arg0">An object to format.</param>
             
             <example>This example shows how to use the TextOutError(int, string, string, string, object) method. 
             <code> 
             Output.TextOutError(1201, "My Module", "Message Title", "Error code: {0}", 2345);
             </code> 
             </example> 
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.Int32,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Formats the string with the text equivalent of the value of two specified Object instances. The replaced string will
            be shown as an error messages in a popup dialog, written to the Log Window in Test Manager and
            also written to Windows Event Log if this feature is enabled in the MSGD driver in SSTool.
            </summary>
            
            <param name="code">A number representing the Event ID in Windows Event Log.</param>
            <param name="module">A string that will be concatenated with "Idefix TestMethod " and used as the Source in Windows Event Log.</param>
            <param name="type">The type of message. Usually texts like "Error" or "Warning". The text will be visible in the title of the error messages dialog.</param>
            <param name="output">A composit format string to be written as the error text.</param>
            <param name="arg0">An object to format.</param>
            <param name="arg1">An object to format.</param>
            
            <example>This example shows how to use the TextOutError(int, string, string, string, object, object) method. 
            <code> 
            Output.TextOutError(1201, "My Module", "Message Title", "Error code: {0} {1}", 13, "Connection error.");
            </code> 
            </example> 
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.Int32,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
             <summary>
             Formats the string with the text equivalent of the value of three specified Object instances. The replaced string will
             be shown as an error messages in a popup dialog, written to the Log Window in Test Manager and
             also written to Windows Event Log if this feature is enabled in the MSGD driver in SSTool.
             </summary>
            
             <param name="code">A number representing the Event ID in Windows Event Log.</param>
             <param name="module">A string that will be concatenated with "Idefix TestMethod " and used as the Source in Windows Event Log.</param>
             <param name="type">The type of message. Usually texts like "Error" or "Warning". The text will be visible in the title of the error messages dialog.</param>
             <param name="output">A composit format string to be written as the error text.</param>
             <param name="arg0">An object to format.</param>
             <param name="arg1">An object to format.</param>
             <param name="arg2">An object to format.</param>
             
             <example>This example shows how to use the TextOutError(int, string, string, string, object, object, object) method. 
             <code> 
             Output.TextOutError(1201, "My Module", "Error", "An error occured at {2}.  Error code: {0} {1}", 13, "Connection error.", DateTime.Today);
             </code> 
             </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.Int32,System.String,System.String,System.String,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Formats the string with the text equivalent of the value of four specified Object instances. The replaced string will
             be shown as an error messages in a popup dialog, written to the Log Window in Test Manager and
             also written to Windows Event Log if this feature is enabled in the MSGD driver in SSTool.
             </summary>
            
             <param name="code">A number representing the Event ID in Windows Event Log.</param>
             <param name="module">A string that will be concatenated with "Idefix TestMethod " and used as the Source in Windows Event Log.</param>
             <param name="type">The type of message. Usually texts like "Error" or "Warning". The text will be visible in the title of the error messages dialog.</param>
             <param name="output">A composit format string to be written as the error text.</param>
             <param name="arg0">An object to format.</param>
             <param name="arg1">An object to format.</param>
             <param name="arg2">An object to format.</param>
             <param name="arg3">An object to format.</param>
             
             <example>This example shows how to use the TextOutError(int, string, string, string, object, object, object) method. 
             <code> 
             Output.TextOutError(1201, "My Module", "Error", "An error occured at {3}.  Error code: {0} : {1} - {2}", 13, 12.4, "Connection error.", DateTime.Today);
             </code> 
             </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.TextOutError(System.Int32,System.String,System.String,System.String,System.Object[])">
             <summary>
             Formats the string with the text equivalent of a corresponding Object instances in a specified array. The replaced string will
             be shown as an error messages in a popup dialog, written to the Log Window in Test Manager and
             also written to Windows Event Log if this feature is enabled in the MSGD driver in SSTool.
             </summary>
            
             <param name="code">A number representing the Event ID in Windows Event Log.</param>
             <param name="module">A string that will be concatenated with "Idefix TestMethod " and used as the Source in Windows Event Log.</param>
             <param name="type">The type of message. Usually texts like "Error" or "Warning". The text will be visible in the title of the error messages dialog.</param>
             <param name="output">A composit format string to be written as the error text.</param>
             <param name="arg">An object to format.</param>
             
             <example>This example shows how to use the TextOutError(code, string, string, string, object[]) method.
             <code>
             object[] theObj = new object[10];
             theObj[0] = "One";
             theObj[1] = 2;
             theObj[2] = 3.333;
             theObj[3] = "cztery";
             theObj[4] = "fünf";
             theObj[5] = 6;
             theObj[6] = "saba";
             theObj[7] = 8;
             theObj[8] = "huit";
             theObj[9] = 10.10;
            
             Output.TextOutError(1202, "My Module", "Error", "Error:  {0} : {1} : {2} : {3} : {4} : {5} : {6} : {7} : {8} : {9}", theObj);
             </code> 
             </example> 
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler">
            <summary></summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOut(System.String)">
            <summary>
            Outputs text in the output log window of the Test Manager.
            </summary>
            <param name="output">Text to printout.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOut(System.String,System.Object)">
            <summary>
            Outputs text in the output log window of the Test Manager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOut(System.String,System.Object,System.Object)">
            <summary>
            Outputs text in the output log window of the Test Manager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOut(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Outputs text in the output log window of the Test Manager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOut(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Outputs text in the output log window of the Test Manager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOut(System.String,System.Object[])">
            <summary>
            Outputs text in the output log window of the Test Manager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.String)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="output">Text to printout.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.String,System.Object)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.String,System.Object,System.Object)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.String,System.Object[])">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="output">Text to printout.</param>
            <param name="arg"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.Int32,System.String,System.String,System.String)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="code">Error code to be put in the message window of the Test Manager.</param>
            <param name="module">A string that identifies the test program as the source of the message.</param>
            <param name="type">The type of message. Usually texts like “Error” or “Warning”.</param>
            <param name="output">Text to printout.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="code">Error code to be put in the message window of the Test Manager.</param>
            <param name="module">A string that identifies the test program as the source of the message.</param>
            <param name="type">The type of message. Usually texts like “Error” or “Warning”.</param>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.Int32,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="code">Error code to be put in the message window of the Test Manager.</param>
            <param name="module">A string that identifies the test program as the source of the message.</param>
            <param name="type">The type of message. Usually texts like “Error” or “Warning”.</param>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.Int32,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="code">Error code to be put in the message window of the Test Manager.</param>
            <param name="module">A string that identifies the test program as the source of the message.</param>
            <param name="type">The type of message. Usually texts like “Error” or “Warning”.</param>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.Int32,System.String,System.String,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="code">Error code to be put in the message window of the Test Manager.</param>
            <param name="module">A string that identifies the test program as the source of the message.</param>
            <param name="type">The type of message. Usually texts like “Error” or “Warning”.</param>
            <param name="output">Text to printout.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Output.MultiDutHandler.TextOutError(System.Int32,System.String,System.String,System.String,System.Object[])">
            <summary>
            Output error text in red colour in the output log window of the TestManager.
            </summary>
            <param name="code">Error code to be put in the message window of the Test Manager.</param>
            <param name="module">A string that identifies the test program as the source of the message.</param>
            <param name="type">The type of message. Usually texts like “Error” or “Warning”.</param>
            <param name="output">Text to printout.</param>
            <param name="arg"></param>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.TabItem">
            <summary>
             The <c>TabItem</c> class contains information about a user created tab item. It is also possible to manipulate the user tab.
             </summary>
             
             <remarks>
             The <c>TabItem</c> object holds a connection to a Windows Form object. Using this class it is possible to control a tab. 
             It is possible to make a tab visible/invisible, enabled/disabled, maximize/normal sized and also retreive the name of the tab.
             <br />
             <br />
             
             <h5>Known bugs</h5>
             The <c>TabItem()</c> class has got a known bug at the moment. A Work around is described below.<br />
             <list type = "table">
                <item>
                   <term>ITP01027</term>
                   <description>TabItem.Maximize doesnt work the way you expect.</description>
                   <description>If you would like to maximize a tab using TxApi then you first have to minimize it before you maximize it.
                   Othervise it won't work. 
                   </description>
                </item>
             </list>
             
             </remarks>
            
             <example>This example shows how to manipulate different tabs and then retrieve information about the tabs.
             For a more complete example see <see cref="T:Idefix.TxApi.Runtime.UserInfo.Tab"/>.
             <code>
                 // Create a WinForm
                 TabForm tab1 = new TabForm();
                 tab1.label1.Text = "Tab one";
                 tab1.Show();
                 Tab.UserTabs.Add("Tab1", tab1.Handle);
            
                 // Create a second WinForm using a TabItem
                 TabForm tab2 = new TabForm();
                 tab2.label1.Text = "Tab two";
                 tab2.Show();
                 var myTabItem2 = new TabItem("Tab2", tab2.Handle);
                 Tab.UserTabs.Add(myTabItem2);
            
            
                 // Create a second WinForm using a TabItem
                 TabForm tab3 = new TabForm();
                 tab3.label1.Text = "Tab three";
                 tab3.Show();
                 var myTabItem3 = new TabItem("Tab3", tab3.Handle);
                 Tab.UserTabs.Add(myTabItem3);
            
                 myTabItem2.Enabled = false;
                 myTabItem3.Connected = false;
            
                 Dialogs.BoxInfo("We have " + Tab.UserTabs.Count + " tabs.");
                 foreach (TabItem tab in Tab.UserTabs)
                 {
                     Output.TextOut("{0} is {1} and {2}.", tab.Name,
                                                           (tab.Connected ? "connected" : "disconnected"),
                                                           (tab.Enabled ? "enabled" : "disabled"));
                 }
             </code>
             See <see cref="T:Idefix.TxApi.Runtime.UserInfo.Tab"/>
             </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.TabItem.#ctor(System.String,System.IntPtr)">
            <summary>
            Creates a new <c>TabItem</c> object.
            </summary>
            <param name="name">Name of the tab. This name is shown in the UI.</param>
            <param name="windowsHandle">Handle to the Windows Form object to connect to the tab.</param>
            <remarks>
            Using the constructor, you are able to create a <c>TabItem</c> object and give it a name that will be seen in the tablist window and connect it to a previously created Windows Form object.
            By only creating a <c>TabItem</c> object, the tab will not be visible. The <c>TabItem</c> must be added to the <c>UserTab</c> list to be visible.
            </remarks>
            <example>
            This example show how to create a tab connect it to a Windows Form and then make it visible.
            <code>
                // Create a Windows Form
                TabForm tab = new TabForm();
                tab.label1.Text = "This is a text written to the WinForm Label";
                tab.Show();
            
                //Create a TabItem object.
                var myTabItem = new TabItem("My Tab", tab.Handle);
            
                // Make the Tab visible 
                Tab.UserTabs.Add(myTabItem);
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.TabItem.Connected">
             <summary>Connect and disconnect a user tab (Make it visible or invisible) in the user interface. It is also possible to check the Connected status.</summary>
             <remarks>
             The <c>Connected</c> property is used to make a user tab visible or invisible in the Test Manager user interface.
             When connecting a tab it is automatically selected. When disconnecting a tab it is removed from the tablist window. 
             </remarks>
             <example>
             This example show how to check the enable status of a tab. If it is disabled then the user will be asked enabled it.
             <code>
             // Create a WinForm
             TabForm myTab = new TabForm();
             myTab.Show();
            
             var myTabItem = new TabItem("My Tab", myTab.Handle);
             Tab.UserTabs.Add(myTabItem);
             
             .
             .
             .
             
             Dialogs.BoxInfo("This will disconnect the UserTab");
             myTabItem.Connected = false;
                
             if (myTabItem.Connected == false)
                myTabItem.Connected = Dialogs.BoxQuestion("The tab is disconnected. Would you like to connect it?");
             </code>
             </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.TabItem.Name">
             <summary>Check the name of a user tab.</summary>
             <remarks>
             The <c>Name</c> property is used to get the name of a user tab. It is only possible to get the name of the tab. It is not possible to change the name.
             </remarks>
             <example>
             This example show how to get the name of a tab.
             <code>
             // Create a WinForm
             TabForm myTab = new TabForm();
             myTab.Show();
            
             var myTabItem = new TabItem("My Tab", myTab.Handle);
             Tab.UserTabs.Add(myTabItem);
             
             .
             .
             .
             
             Dialogs.BoxInfo("The name of the tab is: " + myTabItem.Name);
             </code>
             </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.TabItem.Enabled">
             <summary>Check or set the enable state for a user tab.</summary>
             <remarks>
             The <c>Enabled</c> property is used to change the enable/disable state and also to check current state.
             All tabs are enabled by default. When the tab is disabled it is visible but not possible to select for a user.
             </remarks>
             <example>
             This example show how to check the enable status of a tab. If it is disabled then the user will be asked enabled it.
             <code>
             // Create a WinForm
             TabForm myTab = new TabForm();
             myTab.Show();
            
             var myTabItem = new TabItem("My Tab", myTab.Handle);
             Tab.UserTabs.Add(myTabItem);
             
             .
             .
             .
             
             if (myTabItem.Enabled == false)
                myTabItem.Enabled = Dialogs.BoxQuestion("The tab is disabled. Would you like to enable it?");
             </code>
             </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.TabItem.Maximized">
             <summary>Check or set the Maximize or Normal state of a user tab.</summary>
             <remarks>
             The <c>Maximized</c> property is used to change between maximized and normal mode for a tab and also to check current mode.
             When the tab is maximized the window inside the tab will be shown on the complete screen. 
             The window will be maximised until Maximise is set to false, or until another tab is selected either by the program or by the operator.
             
             </remarks>
             <example>
             This example show how to check the Maximize/Normal  mode for a tab and change the mode.
             <code>
             // Create a WinForm
             TabForm myTab = new TabForm();
             myTab.Show();
            
             var myTabItem = new TabItem("My Tab", myTab.Handle);
             Tab.UserTabs.Add(myTabItem);
             
             .
             .
             .
             
             if (myTabItem.Maximized == false)
                 myTabItem.Maximized = Dialogs.BoxQuestion("The tab is not maximized. Would you like to show the Tab on the entire screen?");
            
             if (myTabItem.Maximized == true)
                 myTabItem.Maximized = !Dialogs.BoxQuestion("The tab is maximized. Would you like to show the Tab in the normal mode?");
             </code>
             </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.TabItem.Select">
             <summary>Selects and brings the user tab to the foreground.</summary>
             <remarks>
             The <c>Select()</c> method is used to programatically select a tab. The content of the tab window is shown.
             </remarks>
             
             <example>
             This example creates two tabs and then loops thru them and asks the user which one to be selected.
             <code>
            
             TabForm tab1 = new TabForm();
             tab1.label1.Text = "Tab one";
             tab1.Show();
             Tab.UserTabs.Add("Tab1", tab1.Handle);
            
             TabForm tab2 = new TabForm();
             tab2.label1.Text = "Tab two";
             tab2.Show();
             var myTabItem2 = new TabItem("Tab2", tab2.Handle);
             Tab.UserTabs.Add(myTabItem2);
            
             .
             .
             .
            
             foreach (TabItem tab in Tab.UserTabs)
             {
                 if ( Dialogs.BoxQuestion("Would you like to select " + tab.Name, "Select Tab") )
                 {
                     tab.Select();
                     break;
                 }
             }
             </code>
             </example>
             <exception cref="T:Idefix.Exceptions.TabException">
             A TabException occurs, if trying to select a tab which is not connected.
             </exception>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.SystemTabItem">
            <summary>
            The <c>SystemTabItem</c> makes it possible to  manipulate the system tab.
            </summary>
            
            <remarks>
            The <c>SystemTabItem</c> class makes it possible to select and disconnect the system tab.
            It is also possible to retrieve the name of the tab.
            The <c>SystemTabItem</c> could be one of the following items: Output, Measurement or Statistics.
            </remarks>
            
            <example>
            This example show how to select and disconnect the system tabs. For a more complete example see <see cref="T:Idefix.TxApi.Runtime.UserInfo.Tab"/>.
            <code>
            Tab.SystemTabs.Measurement.Disconnect();
            Tab.SystemTabs.Statistics.Disconnect();
            Tab.SystemTabs.Output.Select();
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.SystemTabItem.Disconnect">
            <summary>
            Disconnects the System Tab. 
            </summary>
            <remarks>
            The <c>Disconnect()</c> method removes the System Tab. It is not possible to reconnect unless the Test Manager is restarted.
            It is not possible to disconnect the Output tab.
            </remarks>
            <example>
            This example shows how to disconnect the two system tabs Measurement and Statistics. It is not possible to disconnect the Output tab.
            <code>
            Tab.SystemTabs.Measurement.Disconnect();
            Tab.SystemTabs.Statistics.Disconnect();
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.SystemTabItem.Name">
            <summary>Gets the name of the system tab.</summary>
            <example>
            This example shows how to retrieve the name of a System Tab.
            <code>
            string a = systablist.Output.Name;
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.SystemTabItem.Select">
            <summary>
            Selects and brings the system tab to the foreground.
            </summary>
            <remarks>
            The <c>Select()</c> method is used to programatically select a system tab. The content of the tab window is shown.
            </remarks>
            
            <example>
            This example show how to Select the Measurement Tab
            <code>
            Tab.SystemTabs.Measurement.Select();
            </code>
            </example>
            
            <exception cref="T:Idefix.Exceptions.TabException">
            A TabException occurs, if trying to select a tab which is not connected.
            </exception>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.SystemTabList">
            <summary>
            The <c>SystemTabList</c> holds the three <c>SystemTabItems</c>: Output, Measurement and Statistics.
            </summary>
            
            <remarks>
            The <c>SystemTabList</c> object is not a real list of objects as the class name makes you believe.
            It holds three <c>SystemTabItems</c> objects, which makes it possible to select and disconnect the different system tabs.
            It is not possible to enumerate the list like it is for the user tabs.
            </remarks>
            
            <example>
            This example show how to select and disconnect the system tabs. For a more complete example see <see cref="T:Idefix.TxApi.Runtime.UserInfo.Tab"/>.
            <code>
            Tab.SystemTabs.Measurement.Disconnect();
            Tab.SystemTabs.Statistics.Disconnect();
            Tab.SystemTabs.Output.Select();
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.SystemTabList.Output">
            <summary>
            Gets the Output system tab in the Test Manager.
            </summary>
            <remarks>
            The <c>Output</c> property makes it possible to select the tab. It is not possible to disconnect the output window. 
            </remarks>
            <example>
            This example show how to select and disconnect the system tabs.
            <code>
            Tab.SystemTabs.Output.Select();
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.SystemTabList.Measurement">
            <summary>
            Gets the Measurement system tab in the Test Manager.
            </summary>
            <remarks>
            The <c>Measurement</c> property makes it possible to select and disconnect the tab. 
            </remarks>
            <example>
            This example show how to select the system tab.
            <code>
            Tab.SystemTabs.Measurement.Select();
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.SystemTabList.Statistics">
            <summary>
            Gets the Statistics system tab in the Test Manager.
            </summary>
            <remarks>
            The <c>Statistics</c> property makes it possible to select and disconnect the tab. 
            </remarks>
            <example>
            This example show how to disconnect the system tab.
            <code>
            Tab.SystemTabs.Measurement.Disconnect();
            </code>
            </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.TabList">
            <summary>Class organizing a list of user created tabs.</summary>
            <example>For a an example see <see cref="T:Idefix.TxApi.Runtime.UserInfo.Tab"/>.</example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.TabList.Add(System.String,System.IntPtr)">
            <summary>
            Creates a tab with an associated window form.
            </summary>
            <param name="tabName">Name of the tab.</param>
            <param name="winHandle">Windows handle to the window to connect to the tab.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.TabList.Add(Idefix.TxApi.Runtime.UserInfo.TabItem)">
            <summary>
            Add a tab to the tab list.
            </summary>
            <param name="tab">A user created tab item.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.TabList.Clear">
            <summary>
            Deletes all tabs.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.TabList.Delete(System.String)">
            <summary>
            Deletes a tab with a specified name.
            </summary>
            <param name="tabName">Name of the tab.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.TabList.Delete(System.Int32)">
            <summary>
            Deletes a tab at the selected index.
            </summary>
            <param name="index">The zero-based index of the tab to be deleted.</param>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.TabList.Item(System.String)">
            <summary>
            Gets a tab selected from a name.
            </summary>
            <param name="tabName">Name of the tab.</param>
            <returns>Selected tab item.</returns>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.TabList.Item(System.Int32)">
            <summary>
            Gets a tab selected from an index.
            </summary>
            <param name="index">The zero-based index of the tab list.</param>
            <returns>Selected tab item.</returns>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.TabList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the TabItems of a TabList to the specified array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from TabList (System.Collections.ICollection). 
            The System.Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.TabList.Count">
            <summary>Number of tab items in the list.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.TabList.IsSynchronized">
            <summary>Indicates that TabList usage is thread safe.</summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.TabList.SyncRoot">
            <summary>Returns current instance of this class.</summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.TabList.GetEnumerator">
            <summary>Enables Idefix to iterate over TabList.</summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.Enumerator">
            <summary></summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Enumerator.#ctor(System.Collections.Generic.List{Idefix.TxApi.Runtime.UserInfo.TabItem})">
            <summary></summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.Enumerator.Current">
            <summary></summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Enumerator.MoveNext">
            <summary></summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Enumerator.Reset">
            <summary></summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.Tab">
             <summary>
             The <c>Tab</c> class is handling two separate lists of tabs. The system tabs and user created tabs.
             </summary>
             
             <remarks>
             <para>The <c>Tab</c> class has got two static properties (SystemTabs and UserTabs) that make it possible to 
             retrieve the TabList. The TabList makes it possible to retrieve the TabItem where you can control 
             the individual tabs.</para>
             
             <para>The names "Output", "Measurement" and "Statistics" are reserved for the system tabs.</para>
             
             <list type="bullet"><item>See <see cref="T:Idefix.TxApi.Runtime.UserInfo.TabItem"/></item>
             <item>See <see cref="T:Idefix.TxApi.Runtime.UserInfo.TabList"/></item>
             <item>See <see cref="T:Idefix.TxApi.Runtime.UserInfo.SystemTabItem"/></item>
             <item>See <see cref="T:Idefix.TxApi.Runtime.UserInfo.SystemTabList"/></item></list>
             </remarks>
             
             <example> This sample shows some operations with the tab class. 
             The codebase has been generated with the Managed Idefix Testprogram Wizard. 
             Some fields have been removed for clarity.
             <code>
             namespace Testmethod
             {
                 // using System.Windows.Forms for Form and Label
                 public class TabForm : Form
                 {
                     public Label label = new Label();
                     public TabForm()
                     {
                         label.Text = "some text on the form";
                         this.Controls.Add(label);
                     }
                 }
             
                 public class Example : ITestMethod
                 {
             
                     public int Measure()
                     {
                         Output.TextOut("This is an example method for using tabs!");
             
                         // Create the form to be shown in the tab
                         TabForm tf1 = new TabForm();
             
                         // Create a new tab item and connect the form
                         // The TabItem must be added to the UserTab list (static) to be visible in Test Manager.
                         TabItem tabItem = new TabItem("User tab 1", tf1.Handle);
                         Tab.UserTabs.Add(tabItem);
                         Tab.UserTabs["User tab 1"].Select();
             
                         Dialogs.BoxInfo("This will disconnect the tab: connected = false");
                         Tab.UserTabs["User tab 1"].Connected = false;
             
                         Dialogs.BoxInfo("This will connect the tab: connected = true");
                         Tab.UserTabs["User tab 1"].Connected = true;
             
                         Dialogs.BoxInfo("This will change the text in the label of the form");
                         tf1.label.Text = "new text in the label";
             
                         Dialogs.BoxInfo("This will disable the tab: enabled = false");
                         Tab.UserTabs["User tab 1"].Enabled = false;
             
                         Dialogs.BoxInfo("This will close the tab");
                         Tab.UserTabs.Delete("User tab 1");
             
             
                         //  Create the second form to be shown in the tab
                         Form f = new Form();
                         Label label = new Label();
                         label.Text = "this is the second form";
                         f.Controls.Add(label);
             
                         // Create a new tab item and connect the second form
                         Dialogs.BoxInfo("The second tab is now added");
                         Tab.UserTabs.Add("User tab 2", f.Handle);
            
            
                         Dialogs.BoxInfo("We have " + Tab.UserTabs.Count + " tabs.");
                         foreach (TabItem tab in Tab.UserTabs)
                         {
                             Output.TextOut("{0} is {1} and {2}.", tab.Name,
                                                                   (tab.Connected ? "connected" : "disconnected"),
                                                                   (tab.Enabled ? "enabled" : "disabled"));
                         }
             
             
                         // The Disconnect() method removes the System Tab. 
                         // It is not possible to reconnect unless the Test Manager is restarted. 
                         // It is not possible to disconnect the Output tab.
                         Dialogs.BoxInfo("This will disconnect the measurement tab");
                         Tab.SystemTabs.Measurement.Disconnect();
             
             
                         return MethodResult.Ok;
                     }
             
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.Tab.UserTabs">
             <summary>
             Gets the list of user created tabs.
             </summary>
             
             <remarks>
             The <c>UserTabs</c> property returns a <c>TabList</c> including all connected user tabs.
             </remarks>
             
             <example>
             This example will show three different ways to select a user tab.
             <code>
             
             //This will select MyTab if it exists
             TabList myTabList = Tab.UserTabs;
             foreach (TabItem tab in myTabList)
             {
                 if (tab.Name == "MyTab")
                 {
                     tab.Select();
                     break;
                 }
             }
            
             //This will select the first user tab. If it doesn't exist a user tab in that position then a ArgumentOutOfRangeException is thrown.
             Tab.UserTabs[0].Select();
            
             //This will select MyTab if it exists, Otherwise a NullReferenceException is thrown.
             Tab.UserTabs["MyTab"].Select();
             </code>
             </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.Tab.SystemTabs">
            <summary>
            Gets a <c>SystemTabList</c> object which holds the three <c>SystemTabItems</c>: Output, Measurement and Statistics.
            </summary>
            
            <remarks>
            The <c>SystemTabList</c> object is not a real list of objects as the class name makes you believe.
            It holds three <c>SystemTabItems</c> objects, which makes it possible to select and disconnect the different system tabs.
            It is not possible to enumerate the list like it is for the user tabs.
            </remarks>
            
            <example>
            This example show how to select and disconnect the system tabs.
            <code>
            Tab.SystemTabs.Measurement.Disconnect();
            Tab.SystemTabs.Statistics.Disconnect();
            Tab.SystemTabs.Output.Select();
            </code>
            </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement">
            <summary>
            Container class for the list elements in a check box multi-selection scenario.
            ReadOnlyCollection of these elements is returned from the Dialogs.BoxMutliSelect (<see cref="T:Idefix.TxApi.Runtime.UserInfo.Dialogs"/>)
            </summary>
            <example>
            This example shows how to create new CheckBoxElements and add then to the BoxMutliSelect dialog.
            In this case, all of the elements will have their Checked properties set to their default value, false.
            Then the returned collection is used to loop over all the elements and their name and checked properties are displayed.
            <code>
            public int Measure()
            {
                string input = "She sells sea-shells on the sea-shore. The shells she sells are sea-shells, I'm sure.";
                <![CDATA[List<CheckBoxElement> elements = new List<CheckBoxElement>();]]>
            
                foreach (string word in input.Split(' '))
                {
                    elements.Add(new CheckBoxElement(word));
                }
            
                string text = "Make some choices";
                <![CDATA[ReadOnlyCollection<CheckBoxElement> processed = Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxMultiSelect(text, elements);]]>
            
                foreach (CheckBoxElement e in processed) {
                    Output.TextOut(String.Format("Elements and checked values: {0} {1}", e.Name, e.Selected));
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement"/>
            class setting its name. The selected property will have its default value as false.
            </summary>
            <param name="name">The text of the element displayed by the check box multi-selection with the maximum length of 50 characters.</param>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement"/>
            class setting its name and selected properties.
            </summary>
            <param name="name">The text of the element displayed by the check box multi-selectio with the maximum length of 50 characters.</param>
            <param name="selected">The value indicating if the control is checked.</param>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement.Selected">
            <summary>
            The selection status for the element. Default value is false if the constructor with only the element name is used.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement.Name">
            <summary>
            The text of the element. Maximum length displayed is 50 characters. 
            Strings exceeding that length will be cut off and have its end replaced by .. 
            </summary>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.SelectedElement">
            <summary>
            Container class for the selected element in a radio button single-selection dialog box Dialogs.BoxSingleSelect() (<see cref="T:Idefix.TxApi.Runtime.UserInfo.Dialogs"/>) return value. 
            </summary>
            <remarks>
            If this dialog window is used and the user closes it using the close dialog button, the return value
            will be a <c>"SelectedElement"</c> with <c>"SelectedElement.Name"</c> = <see cref="F:System.String.Empty"/> 
            and <see cref="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Position"/> = <c>-1</c>.
            </remarks>
            <example>
            This example asks the user to select between three options and prints the selected item name and position using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                <![CDATA[IEnumberable<string> radioButtons = new List<string>() { "Red", "Green", "Blue" };]]>
                string text = "Select your favorite color";
                string title = "Color Selection";
                SelectedElement selectedElement = 
                    Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxSingleSelect(text, radioButtons, title);
                
                Output.TextOut(String.Format("Favorite color selected: {0}", selectedElement.Name));
                Output.TextOut(String.Format("Favorite color selected position: {0}", selectedElement.Position));
                return MethodResult.Ok;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Position">
            <summary>
            The position for the selected element in the list of elements.
            </summary>
            <remarks>
            If this dialog window is used and the user selects an item and closes it, the value of position
            will be <c>0</c> based index of selected element.
            If this dialog window is used and the user closes it using the close dialog button, the return value
            will be <see cref="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Position"/> = <c>-1</c>.
            </remarks>
            <example>
            This example asks the user to select between three options and prints the selected option index using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                <![CDATA[IEnumberable<string> radioButtons = new List<string>() { "Red", "Green", "Blue" };]]>
                string text = "Select your favorite color";
                string title = "Color Selection";
                SelectedElement selectedElement = 
                    Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxSingleSelect(text, radioButtons, title);
                
                Output.TextOut(String.Format("Favorite color selected position: {0}", selectedElement.Position));
                return MethodResult.Ok;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Name">
            <summary>
            The text value of the selected element.
            </summary>
            <remarks>
            If this dialog window is used and the user closes it using the close dialog button, the value
            will be a <see cref="F:System.String.Empty"/> 
            </remarks>
            <example>
            This example asks the user to select between three options and prints the selection using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                <![CDATA[IEnumberable<string> radioButtons = new List<string>() { "Red", "Green", "Blue" };]]>
                string text = "Select your favorite color";
                string title = "Color Selection";
                SelectedElement selectedElement = 
                    Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxSingleSelect(text, radioButtons, title);
                
                Output.TextOut(String.Format("Favorite color selected: {0}", selectedElement.Name));
                return MethodResult.Ok;
            }
            </code>
            </example>
        </member>
        <member name="T:Idefix.TxApi.Runtime.UserInfo.Dialogs">
            <summary>
            The <see cref="T:Idefix.TxApi.Runtime.UserInfo.Dialogs"/> class provides ways to display or collect information to or from the user.
            There's a wide range of different alternatives ready, including dialog windows for information and error
            messages, user input through input fields, radio buttons and checkboxes as well as Yes/No questions.
             
            <remarks>
            <para>
            It is important to use this class for user dialogs instead of writing your own, first of all
            because it saves you the trouble of adjusting controls to suite the needs of run time tests
            using Idefix, but also since otherwise system logging will not be utilized.
            </para>
            
            <para>
            When using a dialog in a SPLIT then all threads will be paused while the dialog is shown. If this behaviour is not
            acceptable then you have to write your own dialog. Beware of the system logging issue described above.
            </para>
            
            </remarks>
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxError(System.String)">
            <summary>
            Displays a dialog window with an error text field and an OK button.
            </summary>
            <param name="text">Error text.</param>
            <example>
            This example displays an error message to the user.
            <code>
            public int Measure()
            {
                string text = "An error occurred!";
                Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxError(text);
                return MethodResult.Error;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxError(System.String,System.String)">
            <summary>
            Displays a custom titled dialog window with an error text field and an OK button.
            </summary>
            <param name="text">Error text.</param>
            <param name="title">Title of the error box.</param>
            <example>
            This example displays an error message with a custom dialog title to the user.
            <code>
            public int Measure()
            {
                string text = "An error occurred!";
                string title = "Measurement Error";
                Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxError(text, title);
                return MethodResult.Error;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxMultiSelect(System.String,System.Collections.Generic.IEnumerable{Idefix.TxApi.Runtime.UserInfo.CheckBoxElement})">
            <summary>
            Displays a multi-selection dialog window with checkbox selection options and an OK button. 
            </summary>
            <param name="text">Text message.</param>
            <param name="checkboxElements">List of checkboxes to be diplayed. Max length of a radio button name is 50 characters.</param>
            <returns>Resulting list of checkboxes.</returns>
            <remarks>
            If this dialog windows is used and the user closes it by clicking the close dialog button,
            evey <see cref="T:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement"/> will be returned with <see cref="P:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement.Selected"/> 
            set to false, regardless of the actual status in the dialog.
            </remarks>
            <example>
            This example uses a classic English tongue twister to generate a selection list. After the selection is made the 
            list with responses is iterated and the selected values are printed using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                string input = "She sells sea-shells on the sea-shore. The shells she sells are sea-shells, I'm sure.";
                <![CDATA[List<CheckBoxElement> elements = new List<CheckBoxElement>();]]>
            
                foreach (string word in input.Split(' '))
                {
                    elements.Add(new CheckBoxElement(word));
                }
            
                string text = "Make some choices";
                <![CDATA[ReadOnlyCollection<CheckBoxElement> processed = Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxMultiSelect(text, elements);]]>
                StringBuilder sb = new StringBuilder();
            
                foreach (CheckBoxElement element in processed)
                {
                    if (element.Selected) 
                    {
                        sb.Append(element.Name);
                        sb.Append(' ');
                    }
                }
            
                Output.TextOut(String.Format("Selections made: {0}", sb.ToString()));
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxMultiSelect(System.String,System.Collections.Generic.IEnumerable{Idefix.TxApi.Runtime.UserInfo.CheckBoxElement},System.String)">
            <summary>
            Displays a custom titled multi selection dialog window with checkbox selection options and an OK button. 
            </summary>
            <param name="text">Text message.</param>
            <param name="checkboxElements">List of checkboxes to be diplayed. Max length of a radio button name is 50 characters.</param>
            <param name="title">Title of the dialog window.</param>
            <returns>Resulting list of checkboxes.</returns>
            <remarks>
            If this dialog windows is used and the user closes it by clicking the close dialog button,
            evey <see cref="T:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement"/> will be returned with <see cref="P:Idefix.TxApi.Runtime.UserInfo.CheckBoxElement.Selected"/> 
            set to false, regardless of the actual status in the dialog.
            </remarks>
            <example>
            This example uses a classic English tongue twister to generate a selection list. After the selection is made the 
            list with responses is iterated and the selected values are printed using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                string input = "She sells sea-shells on the sea-shore. The shells she sells are sea-shells, I'm sure.";
                <![CDATA[List<CheckBoxElement> elements = new List<CheckBoxElement>();]]>
            
                foreach (string word in input.Split(' '))
                {
                    elements.Add(new CheckBoxElement(word));
                }
            
                string text = "Make some choices";
                string title = "Multi-Selection Question";
                <![CDATA[ReadOnlyCollection<CheckBoxElement> processed = Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxMultiSelect(text, elements, title);]]>
                StringBuilder sb = new StringBuilder();
            
                foreach (CheckBoxElement element in processed)
                {
                    if (element.Selected) 
                    {
                        sb.Append(element.Name);
                        sb.Append(' ');
                    }
                }
            
                Output.TextOut(String.Format("Selections made: {0}", sb.ToString()));
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxQuestion(System.String)">
            <summary>
            Displays a dialog window with a question text field and Yes/No buttons.
            </summary>
            <param name="text">Text message.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating whether the user clicked the 'Yes' (<c>true</c>) or 'No' (<c>false</c>) button.</returns>
            <example>
            This example displays a text to the user in a dialog box with Yes/No buttons and prints the user action using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                string text = "Do you want to abort the test?";
                bool abort = Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxQuestion(text);
                if (abort)
                {
                    Output.TextOut("User choose to abort");
                    return MethodResult.Abort;
                }
                else
                {
                    Output.TextOut("User choose to proceed");
                    return MethodResult.Ok;
                }
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxQuestion(System.String,System.String)">
            <summary>
            Displays a custom titled dialog window with a question text field and Yes/No buttons.
            </summary>
            <param name="text">Text message.</param>
            <param name="title">Title of the dialog window.</param>
            <returns>A <see cref="T:System.Boolean"/> indicating whether the user clicked the 'Yes' (<c>true</c>) or 'No' (<c>false</c>) button.</returns>
            <example>
            This example displays a text to the user in a custom titled dialog window and prints the user action using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                string text = "Do you want to abort the test?";
                string title = "Abort Measurement";
                bool abort = Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxQuestion(text, title);
                if (abort)
                {
                    Output.TextOut("User choose to abort");
                    return MethodResult.Abort;
                }
                else
                {
                    Output.TextOut("User choose to proceed");
                    return MethodResult.Ok;
                }
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInfo(System.String)">
            <summary>
            Displays a dialog window with an information text label and an OK button.
            </summary>
            <param name="text">Text message.</param>
            <example>
            This example displays an information message to the user.
            <code>
            public int Measure()
            {
                string text = "Measurement went OK";
                Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInfo(text);
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInfo(System.String,System.String)">
            <summary>
            Displays a custom titled dialog window with an information text label and an OK button.
            </summary>
            <param name="text">Text message.</param>
            <param name="title">Title of the dialog window.</param>
            <example>
            This example displays an information message to the user.
            <code>
            public int Measure()
            {
                string text = "Measurement went OK";
                string title = "Measurement Information";
                Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInfo(text, title);
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxSingleSelect(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Displays a single selection dialog window with radio button selection options and an OK button.
            </summary>
            <param name="text">Text message.</param>
            <param name="radioButtons">List of radiobuttons to be displayed. Max length of a radio button name is 50 characters.</param>
            <returns>Selected radiobutton.</returns>
            <remarks>
            If this dialog window is used and the user closes it using the close dialog button, the return value
            will be a <see cref="T:Idefix.TxApi.Runtime.UserInfo.SelectedElement"/> with <see cref="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Name"/> = <see cref="F:System.String.Empty"/> 
            and <see cref="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Position"/> = <c>-1</c>.
            </remarks>
            <example>
            This example asks the user to select between three options and prints the selection using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                <![CDATA[IEnumberable<string> radioButtons = new List<string>() { "Red", "Green", "Blue" };]]>
                string text = "Select you favorite color";
                SelectedElement selectedElement = 
                    Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxSingleSelect(text, radioButtons);
                
                Output.TextOut(String.Format("Favorite color selected: {0}", selectedElement.Name));
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxSingleSelect(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Displays a custom titled single selection dialog window with radio button selection options and an OK button.
            </summary>
            <param name="text">Text message.</param>
            <param name="radioButtons">List of radiobuttons to be displayed. Max length of a radio button name is 50 characters.</param>
            <param name="title">Title of the dialog window.</param>
            <returns>Selected radiobutton.</returns>
            <remarks>
            If this dialog window is used and the user closes it using the close dialog button, the return value
            will be a <see cref="T:Idefix.TxApi.Runtime.UserInfo.SelectedElement"/> with <see cref="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Name"/> = <see cref="F:System.String.Empty"/> 
            and <see cref="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Position"/> = <c>-1</c>.
            </remarks>
            <example>
            This example asks the user to select between three options and prints the selection using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                <![CDATA[IEnumberable<string> radioButtons = new List<string>() { "Red", "Green", "Blue" };]]>
                string text = "Select your favorite color";
                string title = "Color Selection";
                SelectedElement selectedElement = 
                    Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxSingleSelect(text, radioButtons, title);
                
                Output.TextOut(String.Format("Favorite color selected: {0}", selectedElement.Name));
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxSingleSelect(System.String,System.String,System.String)">
            <summary>
            Displays a custom titled single selection dialog window with radio button selection options and an OK button.
            </summary>
            <param name="text">Text message.</param>
            <param name="radioButtons">Name of the radiobuttons separated with semicolon. Max length of a radio button name is 50 characters.</param>
            <param name="title">Title of the dialog window.</param>
            <returns>Selected radiobutton.</returns>
            <remarks>
            If this dialog window is used and the user closes it using the close dialog button, the return value
            will be a <see cref="T:Idefix.TxApi.Runtime.UserInfo.SelectedElement"/> with <see cref="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Name"/> = <see cref="F:System.String.Empty"/> 
            and <see cref="P:Idefix.TxApi.Runtime.UserInfo.SelectedElement.Position"/> = <c>-1</c>.
            </remarks>
            <example>
            This example asks the user to select between three options and prints the selection using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                string radioButtons = "Red;Green;Blue";
                string text = "Select favorite color";
                string title = "Color Selection";
                SelectedElement selectedElement = 
                    Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxSingleSelect(text, radioButtons, title);
                
                Output.TextOut(String.Format("Favorite color selected: {0}", selectedElement.Name));
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInput(System.String)">
            <summary>
            Displays a dialog window with an input field and an OK button.
            </summary>
            <param name="text">Text message.</param>
            <returns>Input result.</returns>
            <remarks>
            If this dialog window is used and the user closes it using the close dialog button,
            the return value will be <see cref="F:System.String.Empty"/>.
            </remarks>
            <example>
            This example displays a dialog window to the user with text and an input field and 
            prints the return value using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                string text = "Please write something";
                string input = 
                    Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInput(text);
                
                Output.TextOut(String.Format("Your input: {0}", input);
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInput(System.String,System.String)">
            <summary>
            Displays a dialog window with a default valued input field and an OK button.
            </summary>
            <param name="text">Text message.</param>
            <param name="defaultValue">Default resulting value.</param>
            <returns>Input result.</returns>
            <remarks>
            If this dialog window is used and the user closes it using the close dialog button,
            the return value will be <see cref="F:System.String.Empty"/>.
            </remarks>
            <example>
            This example displays a dialog window to user with text and an input field with 
            default value and prints the return value using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> class.
            <code>
            public int Measure()
            {
                string text = "Please write something";
                string defaultValue = "Please don't abort the test";
                string input = 
                    Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInput(text, defaultValue);
                
                Output.TextOut(String.Format("Your input: {0}", input);
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInput(System.String,System.String,System.String)">
            <summary>
            Displays a custom titled dialog window with a default valued input field and an OK button.
            </summary>
            <param name="text">Text message.</param>
            <param name="defaultValue">Default resulting value.</param>
            <param name="title">Title of the dialog window.</param>
            <returns>Input result.</returns>
            <remarks>
            If this dialog window is used and the user closes it using the close dialog button,
            the return value will be the empty string <c>""</c>.
            </remarks>
            <example>
            This example displays a custom titled dialog window to the user with text and an 
            input field with a default value and prints the return value using the <see cref="T:Idefix.TxApi.Runtime.UserInfo.Output"/> 
            class. 
            <code>
            public int Measure()
            {
                string text = "Please write something";
                string defaultValue = "Please don't abort the test";
                string title = "Text Input";
                string input = 
                    Idefix.TxApi.Runtime.UserInfo.Dialogs.BoxInput(text, defaultValue, title);
                
                Output.TextOut(String.Format("Your input: {0}", input);
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when there's no driver connected 
            to the API. This is probably an indication of problems within <c>txapi_config.xml</c>.
            </exception>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems">
            <summary>
            SupportSystems class enables retrieving product information based on driver settings in PamelaNet.
            </summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.globalID">
            <summary> description for globalID variable
            The globalID is a private static member variable that are used to hold
            the current dut's ID details cached. Every time the static readonly property
            CurrentDut is accessed.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.RenewDutIfNeeded">
            <summary> description for RenewDutIfNeeded() function
            RenewDutIfNeeded() makes sure that the private static member variable globalID
            always reflects the current dut. This function is called everytime an access is made 
            to the static readonly property globalID. If the current dut*s ID number don't match
            the ID number of globalID, the structure is renewed.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.CurrentDut">
            <summary>
            Gets the current DUT info
            </summary>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.IntIdInfo">
            <summary>
            Internal Class. Use IdInfo instead.
            </summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.IdNumber">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.ProductNumber">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.RState">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.ProductName">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.Date">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.Status">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.TestFlag">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.Comment">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.Parent">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.OrderNumber">
            <summary></summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntIdInfo.OrderItemNumber">
            <summary></summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.IntIdInfo.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.IntOrderInfo">
            <summary>
            Internal TxAPI Class. Use SupportSystems.OrderInfo instead.
            </summary>
            <remarks>
            This class is, and should only be, used as an internal data transfer object within TxAPI
            </remarks>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.ProductNo">
            <summary>Product nr for the current DUT</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.RState">
            <summary>R-State for the current DUT</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.Used">
            <summary>Used flag</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.SalesOrderInfo">
            <summary>Sales order info for the current DUT</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.Country">
            <summary>Country</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.ConfigurationKey">
            <summary>Confuguration key</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.ElsnNumber">
            <summary>Elsn number</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.IpbNumber">
            <summary>Ipb number</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.NoChildren">
            <summary>Number of children for the order</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.OrderNumber">
            <summary>Number of the order</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfo.OrderItemNumber">
            <summary>Order Item Number</summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.IntOrderInfo.#ctor(System.String,System.Int32)">
            <summary>Constructor for the IntOrderInfo</summary>
            <param name="orderNumber">Order Number</param>
            <param name="orderItemNo">Order Item Number</param>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.IntOrderInfoEx">
            <summary>
            Internal Class. Use SupportSystens.OrderInfoEx instead.
            </summary>
            <remarks>
            Should only be used withing TxAPI as a data transfer onject
            </remarks>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.IntOrderInfoEx.#ctor(System.String,System.Int32)">
            <summary>Constructor for IntOrderInfoEx</summary>
            <param name="orderNumber">Order number</param>
            <param name="orderItemNo">Order item number</param>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderInfoEx.ConfigurationKeyFormat">
            <summary>Type of the configuration key</summary>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.AdditionalNumber">
            <summary>
            A class that contains the Aditional Numbers for the Current DUT. Use SupportSystems.IdInfo to get information about a Product based on its ID.
            </summary>
            
            <example>
            <code>
            public int Measure()
            {
                Output.TextOut("BarXml must be connected in PamelaNet for this example!");
            
            	SupportSystems.IdInfo idInfo = new SupportSystems.IdInfo("A063380720");
            
            	ReadOnlyCollection&lt;SupportSystems.AdditionalNumber&gt; AddList = idInfo.AdditionalNumbers;
            	for (int i = 0; i &lt; AddList.Count; i++)
            	{
            		Output.TextOut("Value: " + AddList[i].Value);
            		Output.TextOut("Position: " + AddList[i].Position);
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.AdditionalNumber.Value">
            <summary>Additional number value</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.AdditionalNumber.Position">
            <summary>The position(identity) of this additional number. Each additional number has its own position to be able to distinguish between them independently of in which order they are returned in the list.</summary>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.StructuralChild">
             <summary>
             A class that contains all the information for a Structural child. Use SupportSystems.OrderStructure to get information about a specific order number.
             </summary>
             <example>
             <code>
             public int Measure()
             {
                 Output.TextOut("BarXml must be connected in PamelaNet for this example!");
            
                 Output.TextOut("SupprtSystems.OrderStructure 8811780879:");
            
                 SupportSystems.OrderStructure orderStructure = new SupportSystems.OrderStructure("8811780879", 10);
                    
                 Output.TextOut("orderStructure.Children.Count: " + orderStructure.Children.Count.ToString());
                 List&lt;SupportSystems.StructuralChild&gt; strucList = orderStructure.Children;
             
                 Output.TextOut("StructuralChild position 1:");
                 Output.TextOut("Position: " + strucList[0].Position);
                 Output.TextOut("ProductNumber: " + strucList[0].ProductNumber);
                 Output.TextOut("Quantity: " + strucList[0].Quantity);
                 Output.TextOut("Revision: " + strucList[0].Revision);
            
                 Output.TextOut("StructuralChild position {0}:", strucList.Count);
                 Output.TextOut("Position: " + strucList[strucList.Count - 1].Position);
                 Output.TextOut("ProductNumber: " + strucList[strucList.Count - 1].ProductNumber);
                 Output.TextOut("Quantity: " + strucList[strucList.Count - 1].Quantity);
                 Output.TextOut("Revision: " + strucList[strucList.Count - 1].Revision); 
             }
             </code>
             <remarks>
             The following output is produced:
             
             SupprtSystems.OrderStructure 8811780879:
             orderStructure.Children.Count: 12
             
             StructuralChild position 1:
             Position: CDU SLOT 1
             ProductNumber: BFL 119 142/1
             Quantity: 1
             Revision: R6B/A
             
             StructuralChild position 12:
             Position: BLANK003
             ProductNumber: SEB 112 1095/1
             Quantity: 1
             Revision: R3B
             </remarks>
             </example>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.StructuralChild.ProductNumber">
            <summary> The product number of the child</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.StructuralChild.Revision">
            <summary>The R-State of the child</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.StructuralChild.Position">
            <summary>The position of the child</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.StructuralChild.Quantity">
            <summary>Quantity of the child</summary>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.IntOrderStructure">
            <summary>
            Internal Class. Use SupportSystems.OrderStructure instead.
            </summary>
            <remarks>This class is, and should only be, used as an internal data transfer object within TxAPI</remarks>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.IntOrderStructure.#ctor(System.String,System.Int64)">
            <summary>Constructor for the IntOrderStructure</summary>
            <param name="orderNumber">Order Number</param>
            <param name="orderItemNumber">Order Item Number</param>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderStructure.OrderNumber">
            <summary>Order number</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderStructure.OrderItemNumber">
            <summary>Order Item Number</summary>
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.IntOrderStructure.Children">
            <summary>Structural Children</summary>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.IdInfo">
             <summary>
             A class used to retrieve all information about an individual based on its ID. 
             </summary>
            
             <remarks>
             
             <para>
             The <c>IdInfo</c> class makes information available about the specific individual 
             stored in traceability database. <br />
             The data source is database configured by Pamela.NET ProductInfo interface.
             By default there are available BarXml and BarTrack drivers.
             </para>
             
             <h5>Known issues</h5>
             To debug this class in Visual Studio, the command line arguments in project debug properties shall be setup.
             Values of /testtype and /product must be exists in SteamDB (Steam connection are configured by Pamela.Net)
             In case of default ITP installation they should be:
             <code> 
             /testtype="TxApitestsuite" /product="Test of EXB2B:ROJ 208 367/1:R2A:66" "&lt;Your testplan&gt;" "&lt;Your criteria&gt;" &lt;DutID&gt;
             </code>
             <exception cref="T:Idefix.Exceptions.TxApiBaseException">
             If Product ID number is not found, the TxApiBaseException is thrown.
             </exception>
             </remarks>
             <example>
             This exampled shows how to retrive some data about the individual from traceanility system on runtime. 
             There are error checking and displaying the result in the Idefix output window. 
             <code>
             const string text = "Please input individual ID";
             const string defaultValue = "A063380720";
             const string title = "Individual ID";
             try
             {
                 var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                 Output.TextOut("Current DUT IdNumber is " + idNumber);
                 var idInfo = new SupportSystems.IdInfo(idNumber);
                 Output.TextOut("IdInfo.IdNumber:\t{0}", idInfo.IdNumber);
                 Output.TextOut("IdInfo.ProductName:\t{0}", idInfo.ProductName);
                 Output.TextOut("IdInfo.ProductNumber:\t{0}", idInfo.ProductNumber);
                 Output.TextOut("IdInfo.RState:\t\t{0}", idInfo.RState);
                 return MethodResult.Ok;
             }
             catch (Idefix.Exceptions.TxApiBaseException te)
             {
                 Output.TextOut("TxApi message: {0}", te.Message);
                 Output.TextOut("Stack trace: {0}", te.StackTrace);
                 Output.TextOut("TxApi exception occured on: {0}", te.ErrorDateTime);
                 if (te.InnerException != null)
                 Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                 return MethodResult.Error;
             }
             catch (Exception e)
             {
                 Output.TextOut("Exception message: {0}", e.Message);
                 return MethodResult.Error;
             }
             </code>
             </example>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.IdInfo.GetIdInfo(System.String)">
            <summary>
            <c>GetIdInfo()</c> queries the product traceability system for information of the individual specified by parIdNumber parameter. 
            </summary>
            <remarks> 
            Static method.<br />
            The return value contains individual data downloaded from traceability system.
            </remarks>
            <param name="parIdNumber">Input string that specifies the ID for individual to be downloaded.</param>
            <returns>Value contains individual data downloaded from traceability system</returns>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">
               The connection to traceability system is required. 
            </exception>
            <example>
            This example initialize a n instance of IdInfo and downloads individual data from traceability system.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = SupportSystems.IdInfo.GetIdInfo(idNumber);
                Output.TextOut("Dovnloaded individual:\t{0}", idInfo.IdNumber);
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            return MethodResult.Ok;
            </code>
            </example>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.IdInfo.#ctor(System.String)">
            <summary>
            Public constructor for <c>IdInfo</c>.
            Initialize instance of <c>IdInfo</c> and downloads individual data from traceability system 
            </summary>
            <param name="parIdNumber">ID for individual to be download.</param>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">
               The connection to traceability system is required. 
            </exception>
            <example>
            This example initialize a n instance of IdInfo, downloads individual data from traceability system and displaying 
            the downloaded individual IdNumber in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = SupportSystems.IdInfo.GetIdInfo(idNumber);
                Output.TextOut("Dovnloaded individual:\t{0}", idInfo.IdNumber);
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            return MethodResult.Ok;
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.IdNumber">
            <summary>
            Gets the <c>IdNumber</c> of individual that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks> 
            ReadOnly property.
            </remarks>
            <example>
            This example initialize an instance of IdInfo, downloads individual data from traceability system and displaying 
            the downloaded individual IdNumber in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.IdNumber:\t{0}", idInfo.IdNumber);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.ProductNumber">
            <summary>
            Gets the <c>ProductNumber</c> of individual that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks> 
            ReadOnly property.
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>ProductNumber</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.ProductNumber:\t{0}", idInfo.ProductNumber);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.RState">
            <summary>
            Gets the <c>RState</c> of individual that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks> 
            ReadOnly property.
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>RState</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.RState:\t{0}", idInfo.RState);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.ProductName">
            <summary>
            Gets the <c>ProductName</c> of individual that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks> 
            ReadOnly property.
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>ProductName</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.ProductName :\t{0}", idInfo.ProductName);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.Date">
            <summary>
            Gets the <c>Date</c> that are downloaded to instance of IdInfo.
            </summary>
            <remarks> 
            ReadOnly property.<br />
            Date contains manufacturing date of individual.
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>Date</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.Date:\t{0:d}", idInfo.Date);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.Status">
            <summary>
            Gets the <c>Status</c> of individual that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks>
            ReadOnly property.<br />
            The property value is string with 2 chars. The <c>Status</c> values may be:
              <list type="bullet">
                <item><b>CR - CREATED</b> = Start status for individuals that are created locally.</item>
                <item><b>?? - REGISTERED</b> = Start status for external individuals that are registered locally.</item>
                <item><b>RV - REVISED</b> = Individual information has been changed.</item>
                <item><b>?? - STORED</b> =  = Individual has been stored.</item>
                <item><b>SH - SHIPPED</b> = Individual has been shipped, that is; left the site. Can be undone within a time limit.</item>
                <item><b>SC - SCRAPPED</b> = Individual information has been changed.</item>
                <item><b>RV - REVISED</b> = Individual has been scrapped. Can be undone within a time limit.</item>
              </list>
            ?? - the return value is 2 symbols, however the real value is not clarified.
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>Status</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.Status:\t{0}", idInfo.Status);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.TestFlag">
            <summary>
            Gets the <c>TestFlag</c> of individual that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks>
            ReadOnly property.<br />
            The property value is string with 1 char. The <c>TestFlag</c> values may be:
              <list type="bullet">
                <item><b>F</b> for Failed </item>
                <item><b>P</b> for Passed </item>
                <item><b>N</b> for Not tested </item>
              </list>
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>TestFlag</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.TestFlag:\t{0}", idInfo.TestFlag);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.Comment">
            <summary>
            Gets the <c>Comment</c> of individual that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks> 
            ReadOnly property.
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>Comment</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.Comment:\t{0}", idInfo.Comment);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.Parent">
            <summary>
            Gets the <c>Parent</c> of individual that are downloaded to instance of IdInfo.
            </summary>
            <remarks> 
            ReadOnly property.
            Return value is string contains <c>Parent</c> ID number. If <c>Parent</c> do not exists, return value is empty string.<br />
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>Parent</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.Parent:\t{0}", idInfo.Parent);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.Children">
            <summary>
            Gets the <c>Children</c> of individual  that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks> 
            ReadOnly property.
            </remarks>
            <returns>
            A ReadOnlyCollection of String values containing the <c>Children</c> IdNumbers
            </returns>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException"></exception>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the list of <c>Children</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A534758645";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                var count = idInfo.Children.Count;
                Output.TextOut("SupportSystems.IdInfo.Children. Number of items returned:{0}", count);
                if (count > 0)
                {
                    foreach (string s in idInfo.Children)
                        Output.TextOut(s);
                }
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            return MethodResult.Ok;
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.AdditionalNumbers">
            <summary>
            Get <c>AdditionalNumbers</c> of individual  that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks> 
            ReadOnly property.
            </remarks>
            <returns>
            A ReadOnlyCollection of <c>AdditionalNumbers</c>
            </returns>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">
               During getting AdditionalNumbers the connection to traceability system is required. 
            </exception>
            <example>
            This example initialize an instance of IdInfo, downloads individual data from traceability system and displaying 
            the list of <c>AdditionalNumbers</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
               var idNumber = Dialogs.BoxInput(text, defaultValue, title);
               Output.TextOut("Current DUT IdNumber is " + idNumber);
               var idInfo = new SupportSystems.IdInfo(idNumber);
               var count = idInfo.AdditionalNumbers.Count;
               Output.TextOut("SupportSystems.AdditionalNumbers. Number of items returned:{0}", count);
               if (count > 0)
               {
                   ReadOnlyCollection&lt;SupportSystems.AdditionalNumber&gt; addList = idInfo.AdditionalNumbers;
                   foreach (SupportSystems.AdditionalNumber t in addList)
                   {
                       if (t != null) Output.TextOut(t.Value);
                   }
               }
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
               Output.TextOut("TxApi message: {0}", te.Message);
               if (te.InnerException != null)
                   Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
               return MethodResult.Error;
            }
            catch (Exception e)
            {
               Output.TextOut("Exception message: {0}", e.Message);
               return MethodResult.Error;
            }
            return MethodResult.Ok;
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.OrderItemNumber">
            <summary>
            Gets the <c>OrderItemNumber</c> of individual that are downloaded to instance of IdInfo.<br />
            </summary>
            <remarks> 
            ReadOnly property.
            OrderItemNumber value is -1, when order is missing.<br />
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>OrderItemNumber</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.OrderItemNumber:\t{0}", idInfo.OrderItemNumber);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.IdInfo.OrderNumber">
            <summary>
            Gets the <c>OrderNumber</c> of individual  that are downloaded to instance of IdInfo.<br /> 
            </summary>
            <remarks> 
            ReadOnly property.
            Returns empty string when order is missing.<br />
            </remarks>
            <example>
            This example initialize an instance of IdInfo, and downloads individual data from traceability system and displaying 
            the <c>OrderNumber</c> in the Idefix output window.<br />
            <code>
            const string text = "Please input individual ID";
            const string defaultValue = "A063380720";
            const string title = "Individual ID";
            try
            {
                var idNumber = Dialogs.BoxInput(text, defaultValue, title);
                Output.TextOut("Current DUT IdNumber is " + idNumber);
                var idInfo = new SupportSystems.IdInfo(idNumber);
                Output.TextOut("IdInfo.OrderNumber:\t{0}", idInfo.OrderNumber);
                return MethodResult.Ok;
            }
            catch (Idefix.Exceptions.TxApiBaseException te)
            {
                Output.TextOut("TxApi message: {0}", te.Message);
                if (te.InnerException != null)
                    Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                return MethodResult.Error;
            }
            catch (Exception e)
            {
                Output.TextOut("Exception message: {0}", e.Message);
                return MethodResult.Error;
            }
            </code>
            </example>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.OrderInfo">
            <summary>
            A class used to manage all information about an Order 
            </summary>
            <example>
            <code>
            public int Measure()
            {
                Output.TextOut("BarXml must be connected in PamelaNet!");
            
                try
                {
                    SupportSystems.OrderInfo orderInfo = new SupportSystems.OrderInfo("8811780879", 10);
            
                    Output.TextOut("orderInfo.Used: " + orderInfo.Used);
                    Output.TextOut("orderInfo.SalesOrderInfo " + orderInfo.SalesOrderInfo);
                    Output.TextOut("orderInfo.Country " + orderInfo.Country);
                    string configKey = orderInfo.ConfigurationKey;
                    Output.TextOut("configKey.Substring(0, 128) " + configKey.Substring(0, 128));
                    Output.TextOut("configKey.Substring(128, 125) " + configKey.Substring(128, 125));
                    Output.TextOut("orderInfo.IpbNumber " + orderInfo.IpbNumber);
                    Output.TextOut("orderInfo.ElsnNumber " + orderInfo.ElsnNumber);
                    Output.TextOut("orderInfo.OrderNumber" + orderInfo.OrderNumber);
                    Output.TextOut("orderInfo.ProductNumber" + orderInfo.ProductNumber);
                    Output.TextOut("orderInfo.RState " + orderInfo.RState);
                }
            
                catch (Idefix.Exceptions.TxApiBaseException te)
                {
                    Output.TextOut("TxApi message: {0}", te.Message);
                    Output.TextOut("Stack trace: {0}", te.StackTrace);
                    Output.TextOut("TxApi exception occured on: {0}", te.ErrorDateTime);
                    if (te.InnerException != null)
                        Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                    return Idefix.TxApi.Constants.MethodResult.Error;
                }
                catch (Exception e)
                {
                    Output.TextOut("Exception message: {0}", e.Message);
                    return Idefix.TxApi.Constants.MethodResult.Error;
                }
            }         
            </code>
            </example> 
        </member>
        <member name="F:Idefix.TxApi.SupportSystems.OrderInfo._orderInfo">
            <summary></summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.OrderInfo.#ctor">
            <summary></summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.OrderInfo.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.OrderInfo.#ctor(System.String,System.Int32)">
            <summary>
            Public constructor for <c>OrderInfo</c>.
            </summary>
            <param name="pamOrderNumber">Order number</param>
            <param name="orderItemNumber">Order Item number</param>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.OrderNumber">
            <summary>
            Gets the Order Number for the current DUT
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.OrderItemNumber">
            <summary>
            Gets the Order Item Number for the current DUT
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.ProductNumber">
            <summary>
            Gets the Product Number for the current DUT
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.RState">
            <summary>
            Gets the RState for the current DUT
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.ConfigurationKey">
            <summary>
            Gets the config key
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.Country">
            <summary>
            Gets the country
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.ElsnNumber">
            <summary>
            Gets the Elsn number
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.IpbNumber">
            <summary>
            Gets the Ipb number
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.SalesOrderInfo">
            <summary>
            Gets the sales order info
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfo.Used">
            <summary>
            Gets the used value
            </summary>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.OrderInfoEx">
            <summary>
            A class used to manage all information about an Order, supports extended config keys
            Also has an additional property called ConfigurationKeyFormat that indicates the type of the Configuration key in use
            </summary>
            <remarks>
            The config key will be parsed in the constructor
            </remarks>
            <example>
            <code>
            public int Measure()
            {
                Output.TextOut("BarXml must be connected in PamelaNet!");
            
                try
                {
                    SupportSystems.OrderInfoEx orderInfoEx = new SupportSystems.OrderInfoEx("71742436", 10);
            
                    Output.TextOut("orderInfoEx.Used: " + orderInfoEx.Used);
                    Output.TextOut("orderInfoEx.SalesOrderInfo " + orderInfoEx.SalesOrderInfo);
                    Output.TextOut("orderInfoEx.Country " + orderInfoEx.Country);
                    string configKey = orderInfoEx.ConfigurationKey;
                    Output.TextOut("configKey.Substring(0, 128) " + configKey.Substring(0, 128));
                    Output.TextOut("configKey.Substring(128, 125) " + configKey.Substring(128, 125));
                    Output.TextOut("orderInfoEx.IpbNumber " + orderInfoEx.IpbNumber);
                    Output.TextOut("orderInfoEx.ElsnNumber " + orderInfoEx.ElsnNumber);
                    Output.TextOut("orderInfoEx.OrderNumber" + orderInfoEx.OrderNumber);
                    Output.TextOut("orderInfoEx.ProductNumber" + orderInfoEx.ProductNumber);
                    Output.TextOut("orderInfoEx.RState " + orderInfoEx.RState);
                    Output.TextOut("orderInfoEx.ConfigKeyFormat " + orderInfoEx.ConfigKeyFormat);
                    return Idefix.TxApi.Constants.MethodResult.Ok;
                }
            
                catch (Idefix.Exceptions.TxApiBaseException te)
                {
                    Output.TextOut("TxApi message: {0}", te.Message);
                    Output.TextOut("Stack trace: {0}", te.StackTrace);
                    Output.TextOut("TxApi exception occured on: {0}", te.ErrorDateTime);
                    if (te.InnerException != null)
                        Output.TextOut("Inner Exception message: {0}", te.InnerException.Message);
                    return Idefix.TxApi.Constants.MethodResult.Error;
                }
                catch (Exception e)
                {
                    Output.TextOut("Exception message: {0}", e.Message);
                    return Idefix.TxApi.Constants.MethodResult.Error;
                }
            }         
            </code>
            </example> 
            <exception cref="T:Idefix.Exceptions.SupportSystemsException">Thrown when the config key received is extended but the parsed configuration key format is undefined, -1</exception>
            <exception cref="T:System.IO.IOException">Thrown when there are problems deleting the temporary config key file</exception>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.OrderInfoEx.#ctor">
            <summary>
            Default constructor not allowed
            </summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.OrderInfoEx.GetCurrentOrderInfo">
            <summary>
            Get the current order info
            </summary>
            <returns>Returns an internal data transfer object filled with the current order info</returns>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.OrderInfoEx.#ctor(System.String,System.Int32)">
            <summary>
            Public constructor for <c>OrderInfoEx</c>.
            </summary>
            <param name="pamOrderNumber">Order number</param>
            <param name="orderItemNumber">Order Item number</param>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.OrderInfoEx.ParseConfigKey(System.String)">
            <summary>
            Internal method for parsing the extended config key file
            If the conf key is read from the temporary file, the file will be deleted after parsing the key.
            </summary>
            <param name="confKey">The key we attempt to parse in string format</param>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderInfoEx.ConfigKeyFormat">
            <summary>
            Gets the configuration key format. Pefore parsing the default value is "Undefined"
            </summary>
        </member>
        <member name="T:Idefix.TxApi.SupportSystems.OrderStructure">
            <summary>
            A class used to manage all information about the structure of an Order 
            </summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.OrderStructure.#ctor(System.String,System.Int32)">
            <summary></summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderStructure.OrderNumber">
            <summary>
            Gets the order number
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderStructure.OrderItemNumber">
            <summary>
            Gets the item number of the order
            </summary>
        </member>
        <member name="P:Idefix.TxApi.SupportSystems.OrderStructure.Children">
            <summary>
            Gets a list of Children for the order
            </summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.ConnectId(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Calls the ConnectId event
            Returns an error if driver is not connected
            </summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.DisconnectId(System.String,System.String,System.Boolean)">
            <summary>
            Calls the DisconnectId event
            Returns an error if driver is not connected
            </summary>
        </member>
        <member name="M:Idefix.TxApi.SupportSystems.PrintLabel(System.String,System.String,System.Int32)">
            <summary>
            Prints a label.
            Returns an error if driver is not connected
            </summary>
            <example>
            This example shows how to call the <c>PrintLabel</c> method
            <code>
            public int DemoPrint(string idNumber, string label, int labelCount)
            {
                Idefix.TxApi.SupportSystems.PrintLabel(idNumber, label, labelCount);
                Output.TextOut("{0}, {1}, {2}",idNumber, label, labelCount);
            
               return MethodResult.Ok;
            }
            </code> 
            </example>
            <exception cref="T:Idefix.Exceptions.DriverNotConnectedException">Thrown when no driver was found</exception>
        </member>
        <member name="T:Idefix.TxApi.TestProductionCode">
            <summary>
            Summary description for TestProductionCode.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.TestProductionCode.#ctor">
            <summary></summary>
        </member>
        <member name="P:Idefix.TxApi.TestProductionCode.Comment">
            <summary></summary>
        </member>
        <member name="P:Idefix.TxApi.TestProductionCode.Code">
            <summary></summary>
        </member>
        <member name="P:Idefix.TxApi.TestProductionCode.ChildComment">
            <summary></summary>
        </member>
        <member name="T:Idefix.TxApi.TestStation">
            <summary>
            Consists of read-only information about the test station.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.TestStation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.TestStation.AddDriver(Idefix.ITxApi.ITestStation)">
            <summary>
            </summary>
            <param name="TestStation">Test station info</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Idefix.TxApi.TestStation.AddDriver(Idefix.ITxApi.ITestStation,System.Boolean)">
            <summary>
            </summary>
            <param name="TestStation">Test station info</param>
            <param name="ResetDrivers">If true then all active drivers will be removed.</param>
            <returns>True on success.</returns>
        </member>
        <member name="P:Idefix.TxApi.TestStation.MaxTestPlans">
            <summary>
            Represents the maximum number of concurrently executing test plans that are allowed on the test station. This field is read-only.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.TestStation.Description">
            <summary>
            Description that describes the test station. This field is read-only.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.TestStation.Responsible">
            <summary>
            Specifies the responsible person for the test station. This field is read-only.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.TestStation.Line">
            <summary>
            Specifies which line the test station is part of. This field is read-only.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.TestStation.Id">
            <summary>
            Specifies the unique id number for the test station. This field is read-only.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.TestStation.MaxDuts">
            <summary>
            Represents the maximum number of DUT's allowed on each executing test plan on the test station. This field is read-only.
            </summary>
        </member>
        <member name="P:Idefix.TxApi.TestStation.Area">
            <summary>
            Represents the area specified for the test station. This field is read-only.
            </summary>
        </member>
        <member name="T:Idefix.TxApi.Tools.Com">
            <summary>
            This class lets the user register COM objects without the need of beeing administrator.
            This is useful in Vista. Many instrument drivers are COM objects. This class is a 
            convenience wrapper around <c>CommandHandler</c> class and uses regsvr32.exe in the background.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Tools.Com.RegisterServer(System.String)">
            <summary>
            Register a com object, the application does not need to be running as admin to use it.
            </summary>
            <param name="DllName">The name and path of the com object</param>
            <remarks>The user is responsible for protecting the dll path with double quotes when needed.</remarks>
            <example>Idefix.TxApi.Tools.Com.RegisterServer("\"C:\\2009\\Test 2\\CYA 103 999 PictureViewer.dll\"");</example>
        </member>
        <member name="M:Idefix.TxApi.Tools.Com.UnregisterServer(System.String)">
            <summary>
            Unregister a com object
            </summary>
            <param name="DllName">The name and path of the com object</param>
            <remarks>The user is responsible for protecting the dll path with double quotes when needed.</remarks>
            <example>Idefix.TxApi.Tools.Com.UnregisterServer("\"C:\\2009\\Test 2\\CYA 103 999 PictureViewer.dll\"");</example>
        </member>
        <member name="T:Idefix.TxApi.Tools.CommandHandler">
             <summary>
             The <c>CommandHandler</c> class exposes features that allows the user to execute EXE 
             files and run DOS commands. The commands are run from a service. The commands are run 
             with elevated user rights, so caution is needed by the test method designer! 
             </summary>
             
             <remarks>
             </remarks>
            
             <example>This example shows how to call the DOS command dir and print the output in TM output window.
             <code>
             public int Measure()
             {
                 // TO-DO: Add your method measure code here.
                 Output.TextOut("This is an example method!");
                 Idefix.TxApi.Tools.CommandHandler.ExecuteCommand("cmd.exe", "/C dir " + @"C:\", MessageLogCallback);
                 return MethodResult.Ok;
             }
             
             private void MessageLogCallback(string message)
             {
                 Output.TextOut(message);
             }
             </code>
             </example>
        </member>
        <member name="P:Idefix.TxApi.Tools.CommandHandler.TimeOut">
            <summary>
            The timeout in milliseconds, the commands needs to finish before this timeout expire.
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Tools.CommandHandler.ExecuteCommand(System.String)">
            <summary>
            Execute an EXE file or a DOS command
            </summary>
            <param name="Command">The command to execute</param>
            <remarks>The user is responsible for protecting the command string with double quotes when needed.</remarks>
            <example>Idefix.TxApi.Tools.CommandHandler.ExecuteCommand("\"C:\\TSCLOCAL\\Program\\ROA 901 0097\\P1A\\MyExeFile.exe\"");</example>
        </member>
        <member name="M:Idefix.TxApi.Tools.CommandHandler.ExecuteCommand(System.String,System.String)">
            <summary>
            Execute an EXE file or a DOS command
            </summary>
            <param name="Command">The command to execute</param>
            <param name="Argument">The argument to send to the command</param>
            <remarks>The user is responsible for protecting the command string and arguments with double quotes when needed.</remarks>
            <example>Idefix.TxApi.Tools.CommandHandler.ExecuteCommand("\"C:\\TSCLOCAL\\Program\\ROA 901 0097\\P1A\\MyExeFile.exe\"", "\"C:\\2009\\Test 2\\CYA 103 999 PictureViewer.dll\"");</example>
        </member>
        <member name="M:Idefix.TxApi.Tools.CommandHandler.ExecuteCommand(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Execute an EXE file or a DOS command
            </summary>
            <param name="Command">The command to execute</param>
            <param name="Arguments">The argument list to send to the command</param>
            <remarks>The user is responsible for protecting the command string and arguments with double quotes when needed.</remarks>        
        </member>
        <member name="M:Idefix.TxApi.Tools.CommandHandler.ExecuteCommand(System.String,Idefix.TxApi.Tools.CommandHandler.dMessage)">
            <summary>
            Execute an EXE file or a DOS command
            </summary>
            <param name="Command">The command to execute</param>
            <param name="MessageLogCallback">Output messages from the command will be sent to this callback function</param>
            <remarks>The user is responsible for protecting the command string with double quotes when needed.</remarks>
            <example>Idefix.TxApi.Tools.CommandHandler.ExecuteCommand("\"C:\\TSCLOCAL\\Program\\ROA 901 0097\\P1A\\MyExeFile.exe\"");</example>
        </member>
        <member name="M:Idefix.TxApi.Tools.CommandHandler.ExecuteCommand(System.String,System.String,Idefix.TxApi.Tools.CommandHandler.dMessage)">
            <summary>
            Execute an EXE file or a DOS command
            </summary>
            <param name="Command">The command to execute</param>
            <param name="Argument">The argument to send to the command</param>
            <param name="MessageLogCallback">Output messages from the command will be sent to this callback function</param>
            <remarks>The user is responsible for protecting the command string and arguments with double quotes when needed.</remarks>
            <example>Idefix.TxApi.Tools.CommandHandler.ExecuteCommand("\"C:\\TSCLOCAL\\Program\\ROA 901 0097\\P1A\\MyExeFile.exe\"", "\"C:\\2009\\Test 2\\CYA 103 999 PictureViewer.dll\"");</example>
        </member>
        <member name="M:Idefix.TxApi.Tools.CommandHandler.ExecuteCommand(System.String,System.Collections.Generic.List{System.String},Idefix.TxApi.Tools.CommandHandler.dMessage)">
            <summary>
            Execute an EXE file or a DOS command
            </summary>
            <param name="Command">The command to execute</param>
            <param name="Arguments">The argument list to send to the command</param>
            <param name="MessageLogCallback">Output messages from the command will be sent to this callback function</param>
            <remarks>The user is responsible for protecting the command string and arguments with double quotes when needed.</remarks>
        </member>
        <member name="T:Idefix.TxApi.Tools.CommandHandler.dMessage">
            <summary>
            Delegate that will be used to send log message back to the test method
            </summary>
            <param name="Message"></param>
        </member>
        <member name="T:Idefix.TxApi.Tools.ConversionHelpers">
            <summary></summary>
        </member>
        <member name="M:Idefix.TxApi.Tools.ConversionHelpers.StringToMeasurementResult(System.String)">
            <summary>
            Converts the string based measurement result from PamelaNet
            into a typed MeasurementResult in TxApi
            </summary>
            <param name="status">string from PamelaNet</param>
            <returns></returns>
        </member>
        <member name="M:Idefix.TxApi.Tools.ConversionHelpers.StringToStatusResult(System.String)">
            <summary>
            Converts the string based status result from PamelaNet
            into a typed StatusResult in TxApi
            </summary>
            <param name="status">string from PamelaNet</param>
            <returns></returns>
        </member>
        <member name="T:Idefix.TxApi.Tools.GlobalObjectStore">
            <summary>
            This class stores objects or values in a global store that can be accessed from any test plan.
            </summary>
            
            <remarks>
            The <c>GlobalObjectStore</c> class is the Idefix way to enable access to objects across application domain boundaries.
            <br /><br />
            
            <c>GlobalObjectStore</c> is the easiest way to share data between different test plans.
            When running a test with only one test plan involved it is also a good aproach to use <c>GlobalObjectStore</c> to share 
            data between diffren test methods.
            <br /><br />
            
            <b>Important:</b>
            A class to be used by <c>GlobalObjectStore</c> must inherit from MarshalByRefObject.
            The object will automatically be removed by the garbage collector if unused in 5 minutes.
            To prevent this problem then override <c>InitializeLifetimeService()</c> method and return null.
            
            <br /><br />
            All objects within the object used by <c>GlobalObjectStore</c> also needs to inherit from <c>MarshalByRefObject</c>.
            Built in types like <c>int</c> and <c>string</c> does this. There are some built in types that doesn't inherit <c>MarshalByRefObject</c>.
            The consequens of this is that only a copy of that object is accessible in the <c>GlobalObjectStore</c>. If such 
            object is modified, the original object is not affected. <c>List</c> does not inherit from <c>MarshalByRefObject</c>.
            
            When changing values on a built in object that doesn't inherit from <c>MarshalByRefObject</c> like <c>List</c>
            Then you have to make a copy of the object, change that copy and then replace the object with the copy. See the example below:
            <br /><br />
            <c>
            GlobalObjectStore.GlobalObject<![CDATA[<List<string>>]]> TestGEN;<br />
            if (GlobalObjectStore.Exist("TestGEN"))<br />
            {<br />
               TestGEN = new GlobalObjectStore.GlobalObject<![CDATA[<List<string>>]]>("TestGEN");<br />
               List<![CDATA[<string>]]> tmp = TestGEN.Value;<br />
               tmp.Add(TestINT.Value.ToString());<br />
               TestGEN.Value = tmp;<br />
            }<br />
            </c>
            <br /><br />
            
            An application domain is a partition in an operating system process where one or more applications reside.
            Objects in the same application domain communicate directly. Objects in different application domains
            communicate either by transporting copies of objects across application domain boundaries, or by using a 
            proxy to exchange messages. Idefix handle test plans and test methods in different application domains.
            <br /><br />
            
            <c>MarshalByRefObject</c> is the base class for objects that communicate across application domain boundaries
            by exchanging messages using a proxy. Objects that do not inherit from <c>MarshalByRefObject</c> are implicitly 
            marshal by value. When a remote application references a marshal by value object, a copy of the object is
            passed across application domain boundaries.
            <br /><br />
            
            <c>MarshalByRefObject</c> objects are accessed directly within the boundaries of the local application domain.
            The first time an application in a remote application domain accesses a <c>MarshalByRefObject</c>, a proxy is
            passed to the remote application. Subsequent calls on the proxy are marshaled back to the object residing
            in the local application domain.
            <br /><br />
            
            Types must inherit from <c>MarshalByRefObject</c> when the type is used across application domain boundaries, 
            and the state of the object must not be copied because the members of the object are not usable outside
            the application domain where they were created.
            </remarks>
            
            <example>
            This example shows how to store a object in the global store.
            <code>
            
            myObj mo = new myObj();
            Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject&lt;myObj&gt; obj = new Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject&lt;myObj&gt;("myObj");
            obj.Value = mo;
                
            public class myObj : MarshalByRefObject
            {
                public override object InitializeLifetimeService()
                {
                    return null; //Removes the default lease time of 5 minutes
                }
            }
            </code>
            <br /><br />
            This test method creates some global objects if the objects doesn't exist. If they exist then the objects are updated (increased).
            <code>
            // These using statements are needed
            using Idefix.TxApi.Tools;
            using System.Reflection;
            using System.Collections;
            
            .
            .
            .
            
            public int Measure()
            {
                Output.TextOut("Creating global object (INT)");
                GlobalObjectStore.GlobalObject<![CDATA[<int>]]> TestINT;
                if (GlobalObjectStore.Exist("TestINT"))
                {
                    TestINT = new GlobalObjectStore.GlobalObject<![CDATA[<int>]]>("TestINT");
            
                    Output.TextOut("Object already exist, incrementing value");
                    TestINT.Value++;
                }
                else
                {
                    TestINT = new GlobalObjectStore.GlobalObject<![CDATA[<int>]]>("TestINT");
                    TestINT.Value = 5;
                }
                Output.TextOut("Value of Global object is: {0}", TestINT.Value);
                Output.TextOut("");
            
                //*****************************************************
                
                Output.TextOut("Creating global object (string)");
                GlobalObjectStore.GlobalObject<![CDATA[<string>]]> TestSTRING;
                if (GlobalObjectStore.Exist("TestSTRING"))
                {
                    TestSTRING = new GlobalObjectStore.GlobalObject<![CDATA[<string>]]>("TestSTRING");
            
                    Output.TextOut("Object already exist, the object is updated");
                    TestSTRING.Value = TestINT.Value.ToString();
                }
                else
                {
                    TestSTRING = new GlobalObjectStore.GlobalObject<![CDATA[<string>]]>("TestSTRING");
                    TestSTRING.Value = TestINT.Value.ToString();
                }
                Output.TextOut("Value of string Global object is: {0}", TestSTRING.Value);
                Output.TextOut("");
            
                //*****************************************************
                
                Output.TextOut("Creating global object (List<![CDATA[<string>]]>)");
                GlobalObjectStore.GlobalObject<![CDATA[<List<string>>]]> TestGEN;
                if (GlobalObjectStore.Exist("TestGEN"))
                {
                    TestGEN = new GlobalObjectStore.GlobalObject<![CDATA[<List<string>>]]>("TestGEN");
            
                    Output.TextOut("Object already exist, add a value to the list");
                    
                    //TestGEN.Value.Add("MY STRING"); This won't work !!!
            
                    // When changing values on a built in object that doesn't inherit from MarshalByRefObject like List
                    // Then you have to make a copy of the object, change that copy and then replace the object with the copy.
                    List<![CDATA[<string>]]> tmp = TestGEN.Value;
                    tmp.Add(TestINT.Value.ToString());
                    TestGEN.Value = tmp;
                }
                else
                {
                    TestGEN = new GlobalObjectStore.GlobalObject<![CDATA[<List<string>>]]>("TestGEN");
                    List<![CDATA[<string>]]> tmp = TestGEN.Value;
                    tmp.Add(TestINT.Value.ToString());
                    TestGEN.Value = tmp;
                }
                Output.TextOut("Value of string Global generic object is: {0}", TestGEN.Value.Count);
                Output.TextOut("");
            
                //*****************************************************
                
                Output.TextOut("Creating global object (my TestClass)");
                GlobalObjectStore.GlobalObject<![CDATA[<TestClass>]]> TestOBJECT;
                if (GlobalObjectStore.Exist("TestOBJECT"))
                {
                    TestOBJECT = new GlobalObjectStore.GlobalObject<![CDATA[<TestClass>]]>("TestOBJECT");
                    Output.TextOut("Test class Object already exist");
                    TestOBJECT.Value.MyIntProperty++;
                }
                else
                {
                    TestOBJECT = new GlobalObjectStore.GlobalObject<![CDATA[<TestClass>]]>("TestOBJECT");
                    TestOBJECT.Value.MyIntProperty = 5;
            
                    List<![CDATA[<string>]]> TestList = new List<![CDATA[<string>]]>();
                    TestList.Add("1");
                    TestList.Add("2");
                    TestList.Add("3");
                    TestList.Add("4");
                    TestOBJECT.Value.myListVar = TestList;
                }
                TestOBJECT.Value.MyTestClass.MyIntProperty = 6666;
                TestOBJECT.Value.MyStringProp = "UGGABUGGA";
            
                List<![CDATA[<string>]]> XXX = TestOBJECT.Value.myListVar;
                XXX.Add(TestOBJECT.Value.MyIntProperty.ToString());
                TestOBJECT.Value.myListVar = XXX;
                
                Output.TextOut("");
                Output.TextOut("Value of int property Global object is: {0}", TestOBJECT.Value.MyIntProperty);
                Output.TextOut("Value of int property in MyClass Global object is: {0}", TestOBJECT.Value.MyTestClass.MyIntProperty);
                Output.TextOut("Value of string property is: {0}", TestOBJECT.Value.MyStringProp);
            
                foreach (string var in TestOBJECT.Value.MyListProperty)
                {
                    Output.TextOut("Value of list property Global object is: {0}", var);
                }
            
                Output.TextOut("");
                Output.TextOut("\\b List all global objects \\b0");
                foreach (string var in GlobalObjectStore.List())
                {
                    Output.TextOut(var);
                }
                return MethodResult.Ok;
            }
            
            // Make sure you inherit from MarshalByRefObject
            class TestClass : System.MarshalByRefObject
            {
                public override object InitializeLifetimeService()
                {
                    return null; //Removes the default lease time of 5 minutes
                }
                
                private int myVar;
                public int MyIntProperty
                {
                    get { return myVar; }
                    set { myVar = value; }
                }
            
                private string myStringProp;
                public string MyStringProp
                {
                    get { return myStringProp; }
                    set { myStringProp = value; }
                }
            
                private TestClass2 myTestClass = new TestClass2();
                public TestClass2 MyTestClass
                {
                    get { return myTestClass; }
                    set { myTestClass = value; }
                }
            
                public string[] StringArray = new string[16];
            
                public List<![CDATA[<string>]]> myListVar = new List<![CDATA[<string>]]>();
            
                public List<![CDATA[<string>]]> MyListProperty
                {
                    get { return myListVar; }
                    set
                    {
                        myListVar = value;
                    }
                }
            }
            
            // Make sure you inherit from MarshalByRefObject
            class TestClass2 : System.MarshalByRefObject
            {
                public override object InitializeLifetimeService()
                {
                    return null; //Removes the default lease time of 5 minutes
                }
                
                private int myVar;
            
                public int MyIntProperty
                {
                    get { return myVar; }
                    set { myVar = value; }
                }
            }
            </code>
            <br /><br />
            This test method prints all global objects that exists to the output window in Test Manager
            <code>
            using Idefix.TxApi.Tools;
            
            .
            .
            .
            
            public int Measure()
            {
                Output.TextOut("\\b List all global objects \\b0");
                foreach (string var in GlobalObjectStore.List())
                {
                    Output.TextOut(var);
                }
                Output.TextOut("");
                Output.TextOut("There is {0} object(s) in the list.", GlobalObjectStore.List().Count);
            
                return MethodResult.Ok;
            }
            
            </code>
            <br /><br />
            This test method removes one global object if it exists
            <code>
            using Idefix.TxApi.Tools;
            
            .
            .
            .
            
            public int Measure()
            {
                if (GlobalObjectStore.Exist("TestINT"))
                {
                    Output.TextOut("Remove global object 'TestINT'");
                    Idefix.TxApi.Tools.GlobalObjectStore.Remove("TestINT");
                }
                else
                {
                    Output.TextOut("The global object 'TestINT' does not exist");
                }
                
                Output.TextOut("");
                Output.TextOut("\\b List all global objects \\b0");
                foreach (string var in GlobalObjectStore.List())
                {
                    Output.TextOut(var);
                }
                
                return MethodResult.Ok;
            }
            </code>
            <br /><br />
            This test method deletes all global objects that exists.
            <code>
            using Idefix.TxApi.Tools;
            
            .
            .
            .
            
            public int Measure()
            {
                try
                {
                    Output.TextOut("Remove all global objects");
                    GlobalObjectStore.Clear();
                }
                catch (Exception)
                {
                }
            
                return MethodResult.Ok;
            }
            </code>
            </example>
            <exception cref="T:Idefix.Exceptions.GlobalObjectStoreException">
            A GlobalObjectStoreException is thrown if the requested object does not exist.
            </exception>
        </member>
        <member name="T:Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject`1">
            <summary>
            This class handles the value or object that is stored in the global store
            </summary>
            <typeparam name="T">The type of the object or value</typeparam>
        </member>
        <member name="M:Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject`1.#ctor(System.String)">
            <summary>
            Use this to get or create an object or value in the global object store
            </summary>
            <param name="Identifier">The identifier of the object or value</param>
        </member>
        <member name="M:Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject`1.#ctor(System.String,System.Object[])">
            <summary>
            Use this to create an object in the global object store
            </summary>
            <param name="Identifier">The identifier of the global object</param>
            <param name="Argumants">The arguments witch will be used when the global object handler creats the new object</param>
        </member>
        <member name="P:Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject`1.Identifier">
            <summary>
            The identifier of the object in use
            </summary>
        </member>
        <member name="P:Idefix.TxApi.Tools.GlobalObjectStore.GlobalObject`1.Value">
            <summary>
            The value or object in the global object store
            </summary>
        </member>
        <member name="M:Idefix.TxApi.Tools.GlobalObjectStore.List">
            <summary>
            List all objects or values in the global object store
            </summary>
            <returns>A list of all Identifiers in the global object store.</returns>
            
            <remarks>
            This function returns a list af all objects that currently exists in the global object store.
            An Idefix internal object 'TxApi_GlobalDomain_NameList' will be listed by this function as well.
            If using the <c>count</c> property on the result from the <c>List()</c> function then the internal 'TxApi_GlobalDomain_NameList' object will be included.
            This means that if count returns 1 then you don't have any objects created by you.
            </remarks>
            
            <example>This example shows how to list the objects that exists in the global object store.
            <code>
            Output.TextOut("\\b List all global objects \\b0");
            foreach (string var in GlobalObjectStore.List())
            {
                Output.TextOut(var);
            }
            Output.TextOut("");
            Output.TextOut("There is {0} object(s) in the list.", GlobalObjectStore.List().Count);
            </code>
            </example> 
        </member>
        <member name="M:Idefix.TxApi.Tools.GlobalObjectStore.Remove(System.String)">
            <summary>
            Remove an previous created object from the global object store.
            </summary>
            <param name="Identifier">The identifier of the object or value to remove</param>
            
            <remarks>
            This function cleans up a specified global object. After this function is executed then you are not able to use that object anylonger.
            A GlobalObjectStoreException is thrown if you try to remove an not existing object.
            </remarks>
            
            <example>This example shows how to delete the previously created global object MyObject.
            <code>
            if (Idefix.TxApi.Tools.GlobalObjectStore.Exist("MyObject"))
            {
                Output.TextOut("Remove global object 'MyObject'");
                Idefix.TxApi.Tools.GlobalObjectStore.Remove("MyObject");
            }
            else
            {
                Output.TextOut("The global object 'MyObject' didn't exist");
            }
            </code>
            </example> 
            
            <exception cref="T:System.Exception">
            A GlobalObjectStoreException is thrown if the requested object does not exist.
            </exception>
        </member>
        <member name="M:Idefix.TxApi.Tools.GlobalObjectStore.Clear">
            <summary>
            Removes all objects or values in the global object store.
            </summary>
            
            <remarks>
            This function removes (deletes) all global objects that exists. Make sure all objects are not needed any longer before this method is used.
            </remarks>
            
            <example>This example creates two objects in the global object store and then removes them using the <c>Clear()</c> function.
            <code>
            public int Measure()
            {
               GlobalObjectStore.GlobalObject<![CDATA[<int> TestINT; ]]>
               TestINT = new GlobalObjectStore.GlobalObject<![CDATA[<int>]]>("TestINT");
               TestINT.Value = 1;
            
               GlobalObjectStore.GlobalObject<![CDATA[<string>]]> TestSTRING;
               TestSTRING = new GlobalObjectStore.GlobalObject<![CDATA[<string>]]>("TestSTRING");
               TestSTRING.Value = "Hello";
            
               Output.TextOut("\\b List all global objects \\b0");
               foreach (string var in GlobalObjectStore.List())
               {
                   Output.TextOut(var);
               }
            
               Output.TextOut("");
               Output.TextOut("Remove all global objects");
               GlobalObjectStore.Clear();
               Output.TextOut("");
            
               Output.TextOut("\\b List all global objects \\b0");
               foreach (string var in GlobalObjectStore.List())
               {
                   Output.TextOut(var);
               }
               
               return MethodResult.Ok;
            }
            </code>
            </example> 
        </member>
        <member name="M:Idefix.TxApi.Tools.GlobalObjectStore.Exist(System.String)">
             <summary>
             Check if a object exist in the global object store.
             </summary>
             <param name="Identifier">The identifier of the object or value</param>
             <returns>Returns true if the identifier was found in the global object store</returns>
             
             <remarks>
             It is recommended that you check if a global object exist before you try to use it.
             Since the global objecta are global any test method are able to delete objects by misstake or it was not created as excpected.
             </remarks>
             
             <example>
             This example shows how to check if the object in GlobalObjectStore exist before using it.
             <code>
             public class myClass : ITestMethod
             {
                 .
                 .
                 .
            
                 public int Measure()
                 {
                     GlobalObjectStore.GlobalObject&lt;GlobalClass&gt; GlobalObjectClass;
                     if (GlobalObjectStore.Exist("GlobalClass"))
                     {
                          GlobalObjectClass = new GlobalObjectStore.GlobalObject&lt;GlobalClass&gt;("GlobalClass");
                     }
                     else
                     {
                         GlobalObjectClass = new GlobalObjectStore.GlobalObject&lt;GlobalClass&gt;("GlobalClass");
                         GlobalObjectClass.Value = new GlobalClass();
                     }
                     .
                     .
                     .
                     return MethodResult.Ok;
                 }
            
                 .
                 .
                 .
             }
            
             public class GlobalClass : MarshalByRefObject
             {
                 public List&lt;string&gt; ExecutedStatus = new List&lt;string&gt;();
                 public int Counter = 0;
             }
             </code>
             </example>
        </member>
        <member name="T:Idefix.Exceptions.TxApiBaseException">
            <summary>
            This is the generic TxApiBase exception that is used as a template for all
            TxApi specific exceptions.
            </summary>
        </member>
        <member name="P:Idefix.Exceptions.TxApiBaseException.ErrorDateTime">
            <summary>
            Date and time of error
            </summary>
        </member>
        <member name="P:Idefix.Exceptions.TxApiBaseException.ThreadId">
            <summary>
            ThreadID of thread that created the exception
            </summary>
        </member>
        <member name="P:Idefix.Exceptions.TxApiBaseException.AssemblyName">
            <summary>
            Assembly name of executing assembly
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.TxApiBaseException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.TxApiBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor taking a message and an inner exception.
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Idefix.Exceptions.TxApiBaseException.#ctor(System.String)">
            <summary>
            Constructor taking a message.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Idefix.Exceptions.TxApiBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Idefix.Exceptions.TxApiBaseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization method.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Idefix.Exceptions.ResourceLoaderException">
            <summary>
            TxApi internal use only.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.ResourceLoaderException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.ResourceLoaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.TestPlanException">
             <summary>
             Base exception for the TestPlan API.
             </summary>
             <example>
             <code>
             try{
                // Some example properties of TestPlan.
                Output.TextOut(TestPlan.Description);
                Output.TextOut(TestPlan.FileName);
                Output.TextOut(TestPlan.MethodFlags);
            
                // Setting StatusResult.Executed from TestPlan is not allowed.
                Idefix.TxApi.Runtime.TestPlan.Status = Idefix.TxApi.Constants.StatusResult.Executed;
            
             }
             catch (TestPlanException e){
                Output.TextOutError("TestPlanException: " + e.Message);
             }
             </code>
             </example>
        </member>
        <member name="M:Idefix.Exceptions.TestPlanException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.TestPlanException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.DataPacketException">
            <summary>
            Base exception for the DataPacket API.
            </summary>
            <example>
            <code>
            try {
                String DataPacketPath = DataPacket.MatchUnique("", "", "DataPacket").Path + @"\DataPacket.dll";
            }
            catch (DataPacketException e) {
                Output.TextOutError("DataPacketException: " + e.Message);
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.Exceptions.DataPacketException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.DataPacketException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.DutException">
            <summary>
            Base exception for the Dut API.
            </summary>
            <example>
            <code>
            try {
                // Status Executed cannot be set from a test method.
                Idefix.TxApi.Runtime.Dut.Status = StatusResult.Executed;
            }
            catch (DutException e) {
                Output.TextOutError("DutException: " + e.Message);
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.Exceptions.DutException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.DutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.MultiDutException">
             <summary>
             Base exception for the MultiDut API.
             </summary>
             <example>
             <code>
             try
             {
                 // This line will throw MultiDutException due to incorrect DUT name.
                 Output.TextOut(Idefix.TxApi.Runtime.MultiDut.Duts["BadDutName"].Dut.IdNumber);
            
                 // The next lines throw DutException and MeasurementException
                 Idefix.TxApi.Runtime.MultiDut.Duts["DUT1"].Dut.Status = StatusResult.Executed;
                 Idefix.TxApi.Runtime.MultiDut.Duts["DUT1"].Measurement.SetComment("bad index", 10);
            
                 // Just for comparison, this line could also throw DutException
                 Idefix.TxApi.Runtime.Dut.Status = StatusResult.Executed;
             }
             catch (MultiDutException e)
             {
                 Output.TextOutError("MultiDutException: " + e.Message);
             }
             catch (DutException e)
             {
                 Output.TextOutError("DutException: " + e.Message);
             }
             catch (MeasurementException e)
             {
                 Output.TextOutError("MeasurementException: " + e.Message);
             }
             catch (TxApiBaseException e)
             {
                 Output.TextOutError("TxApiBaseException: " + e.Message);
             }
             catch (Exception e)
             {
                 Output.TextOutError("System.Exception: " + e.Message);
             }
             </code>
             </example>
        </member>
        <member name="M:Idefix.Exceptions.MultiDutException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.MultiDutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.FlowControlException">
            <summary>
            Base exception for the FlowControl API.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.FlowControlException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.FlowControlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.SupportSystemsException">
            <summary>
            Base exception for the SupportSystem API.
            </summary>
            <example>
            <code>
            try
            {
                string idNumber = "A063380720";
                var idInfo = new SupportSystems.IdInfo(idNumber);
            
                Output.TextOut("IdInfo.IdNumber:\t{0}", idInfo.IdNumber);
                Output.TextOut("IdInfo.ProductName:\t{0}", idInfo.ProductName);
                Output.TextOut("IdInfo.ProductNumber:\t{0}", idInfo.ProductNumber);
                Output.TextOut("IdInfo.RState:\t\t{0}", idInfo.RState);
            }
            catch (SupportSystemsException ex)
            {
                Output.TextOutError("SupportSystemsException: " + ex.Message);
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.Exceptions.SupportSystemsException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.SupportSystemsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.MeasurementException">
            <summary>
            Base exception for the Measurement API.
            </summary>
            <example>
            <code>
            try{
                Measurement.SaveMpNote("Bad index", 100);
            }
            catch (MeasurementException e){
                Output.TextOutError("MeasurementException: " + e.Message);
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.Exceptions.MeasurementException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.MeasurementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.DataLabelException">
            <summary>
            Base exception for the DataLabel API.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.DataLabelException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.DataLabelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.TabException">
            <summary>Base exception for the Tab API.</summary>
        </member>
        <member name="M:Idefix.Exceptions.TabException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.TabException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.TestCriteriaException">
            <summary>Base exception for the TestCriteria API.</summary>
        </member>
        <member name="M:Idefix.Exceptions.TestCriteriaException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.TestCriteriaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.OutputException">
            <summary>Base exception for the Output API.</summary>
        </member>
        <member name="M:Idefix.Exceptions.OutputException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.OutputException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.TestStationException">
            <summary>
            Base exception for the TestStation API.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.TestStationException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.TestStationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.TestRecordException">
            <summary>
            Base exception for the TestRecord API.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.TestRecordException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.TestRecordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.TestResultInfoException">
            <summary>
            Exception thrown from ITestResultInfo
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.TestResultInfoException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.TestResultInfoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.LoggingException">
            <summary>
            Base exception for the Logging API.
            </summary>
            <example><code>
            try
            {
                // Sends a message to Message in ITestMonitor
                Idefix.TxApi.Logging.SendMessage(0, "Hello World from TxApi!"); 
                // Sends a message to AlarmError in ITestMonitor
                Idefix.TxApi.Logging.GenerateAlarm(Idefix.TxApi.Logging.AlarmType.ALARM, 123, "my generated alarm");
            }
            catch (LoggingException e)
            {
                // The exception here probably occurs because Idefix did not have enough product information.
                // This usually occurs in a development environment, with no STEAM and  product info is not set from command line.
                // Hence SendMessage/GenerateAlarm threw a LoggingException.
                Output.TextOut("TxApiBaseException: " + e.Message);
            }
            </code></example>
        </member>
        <member name="M:Idefix.Exceptions.LoggingException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.LoggingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.GlobalObjectStoreException">
            <summary>
            Base exception for GlobalObjectStore API
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.GlobalObjectStoreException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.GlobalObjectStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.DriverNotConnectedException">
            <summary>
            The exception is thrown when a method in an API is not connected to any driver method. 
            </summary>
        </member>
        <member name="P:Idefix.Exceptions.DriverNotConnectedException.DriverType">
            <summary>
                The driver that is not loaded.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.DriverNotConnectedException.#ctor(System.String,System.Type)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
            <param name="driver">The driver.</param>
        </member>
        <member name="M:Idefix.Exceptions.DriverNotConnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.ConfigurationException">
            <summary>
                Configuration exception.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>
                Construct a object with the provided message.
            </summary>
            <param name="msg">The message</param>
        </member>
        <member name="M:Idefix.Exceptions.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Construct a exception that has been serialized.
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:Idefix.Exceptions.Utilities">
            <summary>
            Utilities class for TxAPI Exception handling.
            </summary>
        </member>
        <member name="T:Idefix.Exceptions.Utilities.TS_SYSMSG_SOURCE">
            <summary>
            Enum used for <see cref="M:Idefix.Exceptions.Utilities.InternalMsgError(System.Int32,System.Int32,System.String,System.UInt32,System.String,System.String,System.Boolean,System.Boolean)"/>.
            This enum originates from MsgHandler.dll (file RtkDef.h) and should remain equivilent to that.
            </summary>
        </member>
        <member name="T:Idefix.Exceptions.Utilities.TS_SYSMSG_LEVEL">
            <summary>
            Enum used for <see cref="M:Idefix.Exceptions.Utilities.InternalMsgError(System.Int32,System.Int32,System.String,System.UInt32,System.String,System.String,System.Boolean,System.Boolean)"/>.
            This enum originates from MsgHandler.dll (file RtkDef.h) and should remain equivilent to that.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.Utilities.MsgError(System.Int32,System.Int32,System.String,System.UInt32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            A general report message function. Message is reported synchronously.
            </summary>
            <remarks>
            This referrs to an external method in MsgHandler.dll from Idefix Core MsgHandler.
            </remarks>
            <param name="level">Message level</param>
            <param name="source">Message Source (Kernel, Drivers or TMLib</param>
            <param name="szModule">Name of the Module which generated the message</param>
            <param name="dwMsgId">Message identity</param>
            <param name="szFmtMsg">Message string</param>
            <param name="title">Title. If not specified, a title is created from the message level.</param>
            <param name="ignoreBtn">Show a Ignore button? (Optional, default FALSE)</param>
            <param name="local">Force the message to be reported locally (no MSGD)</param>
            <returns></returns>
        </member>
        <member name="M:Idefix.Exceptions.Utilities.OutputDebugString(System.String)">
            <summary>
            Output a debug string to the connected debugger.
            <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa363362(v=vs.85).aspx" />
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.Utilities.ReportError(System.String,System.UInt32,System.String)">
            <summary>
            Report an error originating from a testmethod.
            </summary>
            <param name="module">The name of the module that is the source of the error</param>
            <param name="errcode">The error code.</param>
            <param name="errMsg">Human readable message representing the error.</param>
        </member>
        <member name="M:Idefix.Exceptions.Utilities.ReportError(System.String,System.String,System.UInt32,System.String)">
            <summary>
            Report an error originating from a testmethod.
            </summary>
            <param name="title">The title for the exception.</param>
            <param name="module">The name of the module that is the source of the error</param>
            <param name="errcode">The error code.</param>
            <param name="errMsg">Human readable message representing the error.</param>
        </member>
        <member name="M:Idefix.Exceptions.Utilities.InternalMsgError(System.Int32,System.Int32,System.String,System.UInt32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Select what to do with error messages depending on if we are running under Idefix or Horizon.
            When in Idefix errors are forwarded to MsgHandler.dll.
            In Horizon they are translated into regular BoxError dialogs.
            </summary>
        </member>
        <member name="M:Idefix.Exceptions.Utilities.ReportException(System.Exception,System.String)">
            <summary>
            Report an error from an generic Exception.
            </summary>
            <param name="err">The exception that is the source of the error.</param>
            <param name="methodName">The method name that is the source of the error.</param>
        </member>
        <member name="M:Idefix.Exceptions.Utilities.GetLatestInstalledItp">
            <summary>
            Fetches the location of the latest installed ITP installation. (e.g. 'C:\Data\ITP\Work\')
            </summary>
            <remarks>
            This uses the environment variable LatestInstalledITP to fetch the location.
            </remarks>
            <exception cref="T:System.Exception">When unable to fetch ITP location</exception>
            <returns>The location of tha latest installed ITP installation.</returns>
        </member>
        <member name="T:Idefix.Exceptions.FormatError">
            <summary>
            Utility calss used to build an exception message.
            </summary>
        </member>
        <member name="P:Idefix.Exceptions.FormatError.ExceptionType">
            <summary>
            The exception type as a string.
            </summary>
            <example>
            Exception e;
            FormatError formatError;
            ...
            formatError.ExceptionType = e.GetType().ToString();
            </example>
        </member>
        <member name="P:Idefix.Exceptions.FormatError.ExceptionMessage">
            <summary>
            The exception message.
            </summary>
            <example>
            Exception e;
            FormatError formatError;
            ...
            formatError.ExceptionMessage = e.Message;
            </example>
        </member>
        <member name="P:Idefix.Exceptions.FormatError.ExceptionTarget">
            <summary>
            The exception target.
            </summary>
            <example>
            Exception e;
            FormatError formatError;
            ...
            formatError.ExceptionTarget = e.TargetSite.ToString();
            </example>
        </member>
        <member name="P:Idefix.Exceptions.FormatError.ExceptionSource">
            <summary>
            The exception source.
            </summary>
            <example>
            Exception e;
            FormatError formatError;
            ...
            formatError.ExceptionSource = e.Source;
            </example>
        </member>
        <member name="P:Idefix.Exceptions.FormatError.Message">
            <summary>
            The exception message.
            <seealso cref="P:Idefix.Exceptions.FormatError.ExceptionType"/>
            <seealso cref="P:Idefix.Exceptions.FormatError.ExceptionMessage"/>
            <seealso cref="P:Idefix.Exceptions.FormatError.ExceptionTarget"/>
            <seealso cref="P:Idefix.Exceptions.FormatError.ExceptionSource"/>
            </summary>
        </member>
        <member name="T:Idefix.ITxApi.IDataPacket">
            <summary>
            Interface contract for querying for DataPackets connected to the current test case.
            <seealso cref="T:Idefix.TxApi.DataPacket"/>
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IDataPacket.GetList">
            <summary>
                Get all data packets connected to the current test case.
            </summary>
            <returns>Immutable list of data packets.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IDataPacket.MatchUnique(System.String,System.String,System.String)">
            <summary>
                Get a speciffic data packet.
            </summary>
            <param name="documentNumber">The document number to search for or <see cref="F:System.String.Empty"/> for any.</param>
            <param name="revision">The revision to search for or <see cref="F:System.String.Empty"/> for any.</param>
            <param name="description">The description to search for or <see cref="F:System.String.Empty"/> for any.</param>
            <returns>The matching data packet.</returns>
            <exception cref="T:Idefix.Exceptions.DataPacketException">When no match or more than one match is found.</exception>
        </member>
        <member name="T:Idefix.ITxApi.ILogging">
            <summary>
            This interface includes all functions for logging information about the running test
            and/or test object.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.ILogging.GenerateAlarm(Idefix.TxApi.Logging.AlarmType,System.UInt32,System.String)">
            <summary>
            This method is used to generate an alarm to an external system.
            </summary>
            <param name="type">Describes the severity of the alarm</param>
            <param name="code">A used-definable number that corresponds to a 
            particular command</param>
            <param name="message">A string that are used to explain the alarm 
            and possibly the cause of the alarm</param>
        </member>
        <member name="M:Idefix.ITxApi.ILogging.SendMessage(System.UInt32,System.String)">
            <summary>
            Method to send a message to an external system.
            </summary>
            <param name="code">A user-definable number that corresponds to a status code.</param>
            <param name="text">The message.</param>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.IDataLabel">
             <summary>
             Interface contract for accessing data labels.
             This is used to get/set data labels.
             <remarks>
             This interface does not represent a single DataLabel, but an interface to access datalabels.
            
             The order of whitch the DataLabel will be searched in is the following:
             <ol>
                 <li>MP (Measurement Point) in test criteria</li>
                 <li>MPG (Measurement Point Group) in test criteria</li>
                 <li>DUT (Device Under Test) in test criteria</li>
                 <li>TP (Test Plan)</li>
                 <li>Parent TP (Test Plan) recursivly</li>
                 <li>Station Data</li>
             </ol>
             </remarks>
             </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDataLabel.Exist(System.String,System.Int32,System.Int32)">
            <summary>
            Check if the given DataLabel exists.
            </summary>
            <param name="label">Label name to search for.</param>
            <param name="MpIndex">MP (Measure Point) index to search in.</param>
            <param name="dut">DUT (Device Under Test) index to search in.</param>
            <returns>At what level the DataLabel exists <see cref="T:Idefix.TxApi.Constants.ExistResult"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDataLabel.Get(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetch a data label at a given position.
            </summary>
            <param name="label">Label name to search for.</param>
            <param name="element">The element index to fetch. This is for multiple values attached to a data label</param>
            <param name="MpIndex">MP (Measure Point) index to search in.</param>
            <param name="dut">DUT (Device Under Test) index to search in.</param>
            <returns>Value of the DataLabel at the given position.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDataLabel.GetStationVariable(System.String)">
            <summary>
            Fetch a variable configured for this test station.
            </summary>
            <param name="variable">The variable name</param>
            <returns>Value of the station variable.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDataLabel.GetStationVariable(System.String,System.String)">
            <summary>
            Fetch a variable configured for this test station or fallback to the given default value.
            </summary>
            <param name="variable">The variable name.</param>
            <param name="defaultValue">Default fallback value for when the variable is not found.</param>
            <returns>Value of the station variable or the given default value.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDataLabel.SetStationVariable(System.String,System.Int32)">
            <summary>
            Set a integer value variable for this test station.
            </summary>
            <param name="variable">Variable name to store the value at.</param>
            <param name="value">The variable value to store.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDataLabel.SetStationVariable(System.String,System.Double)">
            <summary>
            Set a double value variable for this test station.
            </summary>
            <param name="variable">Variable name to store the value at.</param>
            <param name="value">The variable value to store.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDataLabel.SetStationVariable(System.String,System.String)">
            <summary>
            Set a string value variable for this test station.
            </summary>
            <param name="variable">Variable name to store the value at.</param>
            <param name="value">The variable value to store.</param>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.IDut">
            <summary>
            Interface contract for reading/writing properties for DUTs (Devices Under Test).
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetPosition">
            <summary>
            Get the current DUTs logical position.
            </summary>
            <returns>The position of the current DUT.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetMaxPos">
            <summary>
            Get the number of DUTs defined in the Test Plan.
            </summary>
            <returns>The number of DUTs in the Test Plan or -1 on error.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetRealPos(System.Int32)">
            <summary>
            Get the "real" position of the DUT (Device Under Test).
            I.e. the position the DUT has in the "Multi dut bar" in the Test Manager.
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The "real" position of the DUT.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetLastOkCategory(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetTestType(System.Int32)">
            <summary>
            Get the Test Type associated to the Test Suite of the DUT.
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The Test Type of the DUT.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetBarcodeString(System.Int32)">
            <summary>
            Get the barcode string ID.
            <remarks>The barcode is defined in a criteria file and can be shared between different DUTs.</remarks>
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The Barcode string <example>A123456789</example></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetUsage(System.Int32)">
            <summary>
            Check if the DUT is used in the current execution.
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <exception cref="T:Idefix.Exceptions.DutException">For invalid dutPos.</exception>
            <returns>True if the DUT is used, False if it isn't.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.SetUsage(System.Boolean,System.Int32)">
            <summary>
            Set whether or not the DUT is used in the current execution.
            </summary>
            <param name="status">True to flag the DUT as in usage, False to unflag.</param>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <exception cref="T:Idefix.Exceptions.DutException">For invalid dutPos.</exception>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetIdNumber(System.Int32)">
            <summary>
            Get the DUT ID.
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>DUT ID. <example>A530000001</example></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.SetIdNumber(System.String,System.Int32)">
            <summary>
            Set the DUT ID.
            </summary>
            <param name="id">The DUT ID. <example>A530000001</example></param>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetLogicalName(System.Int32)">
            <summary>
            Get the logical name of the DUT.
            <example>
            For a Test Plan containing:
            <code>
                DEFINE DUTS BEGIN
                    DUT(DUT1, 1)
                END_DUTS
            </code>
            The following is true:
            <code>
                IDut dut;
                // ...
                dut.GetLogicalName(1); // Returns "DUT1"
            </code>
            </example>
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The logical name for the DUT. (e.g. DUT1)</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetProductDescription(System.Int32)">
            <summary>
            Get product description.
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The description of the DUT.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.SetProductDescription(System.String,System.Int32)">
            <summary>
            Set product description.
            </summary>
            <param name="descr">The description of the DUT.</param>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetProductNumber(System.Int32)">
            <summary>
            Get the product number for a DUT.
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The product number for the DUT. <example>190 59-ROA 888 888</example></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.SetProductNumber(System.String,System.Int32)">
            <summary>
            Set the product number for a DUT.
            </summary>
            <param name="prodNo">The product number.</param>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetRstate(System.Int32)">
            <summary>
            Get the R-state of the given DUT (Device Under Test).
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The R-state of the DUT.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.SetRstate(System.String,System.Int32)">
            <summary>
            Set the R-state of the given DUT (Device Under Test).
            </summary>
            <param name="rstate">The desired R-state to set for the DUT.</param>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetStatus(System.Int32)">
            <summary>
            Get the current status for a DUT.
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The status of the DUT. <see cref="T:Idefix.TxApi.Constants.StatusResult"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.SetStatus(System.Int32,System.Int32)">
            <summary>
            Set the status for a DUT.
            </summary>
            <param name="status">The status of the DUT. <see cref="T:Idefix.TxApi.Constants.StatusResult"/></param>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.GetMark(System.Int32)">
            <summary>
            Get a mark.
            </summary>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <returns>The mark.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IDut.SetMark(System.String,System.Int32)">
            <summary>
            Set a mark.
            </summary>
            <param name="mark">The mark.</param>
            <param name="dutPos">
                The logical position of the DUT. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.IFlowControl">
            <summary>
            Interface contract that defines flow-control interactions.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.BlockTpStatements(System.String)">
            <summary>
            Dynamically block all Run and/or Do items that has the data label TS_BLOCK with then specified value..
            <example>
                To block all Run or Do item that has the datalabel TS_BLOCK with the value "Foo":
                <code>
                    const string dataLabelValue = "Foo";
                    IFlowControl fc;
                    // Instantiate variables
                    ...
                    // Block the 
                    fc.BlockTpStatements(dataLabelValue);
                </code>
            </example>
            <seealso cref="M:Idefix.ITxApi.IRuntime.IFlowControl.UnblockTpStatements(System.String)"/>
            </summary>
            <param name="tsBlock">The data value of the TS_BLOCK to block.</param>
            <returns>The number of affected statements.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.UnblockTpStatements(System.String)">
            <summary>
            Dynamically unblock all Run and/or Do items that has the data label TS_BLOCK with the specified value..
            <example>
                To unblock all Run or Do item that has the datalabel TS_BLOCK with the value "Bar":
                <code>
                    const string dataLabelValue = "Bar";
                    IFlowControl fc;
                    // Instantiate variables
                    ...
                    // Block the 
                    fc.UnblockTpStatements(dataLabelValue);
                </code>
            </example>
            <seealso cref="M:Idefix.ITxApi.IRuntime.IFlowControl.BlockTpStatements(System.String)"/>
            </summary>
            <param name="tsBlock">The data value of the TS_BLOCK to block.</param>
            <returns>The number of affected statements.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.DoGroup(System.Int32)">
            <summary>
            Determines if a measurement and measurement verification should be performed on the current
            MPG (Measure Point Group).
            This is necessary to do when implementing dynamic testning.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IFlowControl.DoMeas(System.Int32,System.Int32)"/>
            </summary>
            <param name="dutPos">The DUT logical position. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>Returns true if the measurement should be tested.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.DoMeas(System.Int32,System.Int32)">
            <summary>
            Determine if a mesaurement and a measurement verification should be performed on a specified MP (Measure Point).
            This is necessary to do when implementing dynamic testing.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IFlowControl.DoGroup(System.Int32)"/>
            </summary>
            <param name="mpIndex">Zero-bazed measurement point index.</param>
            <param name="dutPos">The DUT logical position. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>True if a measurement should be taken at this time.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.StopFlag">
            <summary>
            Check if the execution of tests should be halted.
            </summary>
            <remarks>
                This should be checked at regular intervals for time consuming tests
                and the test should halt the test execution if this method returns true.
            </remarks>
            <returns>If true then the execution of any tests stop, if false then the execution may continue.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.Step">
            <summary>
            Checks if the execution is in stop mode. 
            </summary>
            <remarks>
            This function may be used by test methods, which should be interruptable by the operator.
            </remarks>
            <example><code>
            Dialogs.BoxInfo("Executing long running task");
            for (int j = 0; j &lt; 10; j++)
            {
               System.Threading.Thread.Sleep(1000);
               if (FlowControl.StopFlag)
                  {
                     return MethodResult.Abort;
                  }
            }
            </code></example>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.SetStep">
            <summary>
            Save step information such as last measurment point etc.
            </summary>
            <remarks>
            This function should be used to store and restore idefix interal data to be able to use the repeat function in the Step dialog.
            </remarks>
            <example>
            <code>
            public int Measure()
            {
                int count = 0;
                Output.TextOut("Before first Step");
            
                Dialogs.BoxInfo("Turn on Pause on failed measurement (Fault Trace -> Pause -> On Failed Measurement), and repeat until passed", "");
            
            RETURN1:
                FlowControl.SetStep();
                Output.TextOut("First Step");
                if (count &lt; 3) Measurement.Save(0); else Measurement.Save(1);
            
                switch (FlowControl.Step())
                {
                    case FlowControl.StepState.Run:
                        Output.TextOut("StepState.Run is running");
                        break;
                    case FlowControl.StepState.Stop:
                        Output.TextOut("StepState.Stop is stopping");
                        return -11;
                    case FlowControl.StepState.Repeat:
                        Output.TextOut("StepState.Repeat is jumping");
                        goto RETURN1;
                    case FlowControl.StepState.Step:
                        Output.TextOut("StepState.Step is stepping to next step");
                        break;
                    case FlowControl.StepState.MeasRepeat:
                        count++;
                        Output.TextOut("StepState.MeasRepeat is stepping to next step");
                        goto RETURN1;
                }
            
                return MethodResult.Ok;
            }
            </code>
            </example>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopCountStop(System.Int32)">
            <summary>
            Get the total number of loop iterations to make at the level loopDepth.
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>The iteration count to perform at the given level.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopCountCurrent(System.Int32)">
            <summary>
            Get the current number of performed loop iterations at the level loopDepth.
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>The current number of iterations performed at the given level.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopCountRemaining(System.Int32)">
            <summary>
            The remaining number of loop iterations to make at the level loopLevel.
            <example>
                <code>
                    IFlowControl fc;
                    int loopDepth;
                    // Instantiate variables
                    ...
                    //
                    assertEqual(
                        fc.LoopCountRemaining(loopDepth),
                        (fc.LoopCountStop(loopDepth) - fc.LoopCountRemaining(loopDepth)));
                </code>
            </example>
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>The remaining number of iterations left to perform at this level.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopTimeStop(System.Int32)">
            <summary>
            Get the total time to iterate at this given level.
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>
                The time in seconds to iterate at this level, or -1 on error.
            </returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopTimeCurrent(System.Int32)">
            <summary>
            Get for how long the test has been iterated at this given level.
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>
                The time in seconds that has past since starting to iterate at the given level, or -1 on error.
            </returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopTimeRemaining(System.Int32)">
            <summary>
            Get the remaining time that the test should be iterated over at this level.
            <example>
                <code>
                    IFlowControl fc;
                    int loopDepth;
                    // Instantiate variables
                    ...
                    //
                    assertEqual(
                        fc.LoopTimeRemaining(loopDepth),
                        (fc.LoopTimeStop(loopDepth) - fc.LoopTimeCurrent(loopDepth)));
                </code>
            </example>
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>
                The time in seconds that is remaining until the iteration of tests at this level should cease, or -1 on error.
            </returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopIntervalTimeStop(System.Int32)">
            <summary>
            Get the total loop interval time at the given depth.
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>The time in seconds.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopIntervalTimeCurrent(System.Int32)">
            <summary>
            Get for how long the test has been iterating. <see cref="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopIntervalTimeStop(System.Int32)"/>
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>The time in seconds.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopIntervalTimeRemaining(System.Int32)">
            <summary>
            The remaining time that the interval should be iterated.
            <example>
                <code>
                    IFlowControl fc;
                    int loopDepth;
                    // Instantiate variables
                    ...
                    //
                    assertEqual(
                        fc.LoopIntervalTimeRemaining(loopDepth),
                        (fc.LoopIntervalTimeStop(loopDepth) - fc.LoopIntervalTimeCurrent(loopDepth)));
                </code>
            </example>
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>The time in seconds.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopWaitTimeStop(System.Int32)">
            <summary>
            Get the delay between each loop iteration at the given level.
            </summary>
            <param name="loopDepth">Relative depth where 0 is the current depth and a positive number indicate how far up the parent nodes to go (1=parent node, 2=parents parent node).</param>
            <returns>Delay in seconds or -1 on error.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopWaitTimeCurrent(System.Int32)">
            <summary>
            Invalid method.
            </summary>
            <param name="loopDepth"></param>
            <returns>-1</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IFlowControl.LoopWaitTimeRemaining(System.Int32)">
            <summary>
            Invalid method.
            </summary>
            <param name="loopDepth"></param>
            <returns>-1</returns>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.IMeasurement">
            <summary>
            Summary description for Measurement.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Get(System.String,System.Int32)">
            <summary>
            Get the MeasurementData by MP (Measure Point) ID.
            </summary>
            <param name="MpId">The MP Id.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The MeasurementData recorded at the given location.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Get(System.Int32,System.Int32)">
            <summary>
            Get the MeasurementData by MP (Measure Point) index.
            </summary>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The MeasurementData recorded att the given location.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.GetMeasIndex(System.Int32)">
            <summary>
            Get the current MP (Measurement Point) index.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The MP (Measurement Point) index.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SetMeasIndex(System.Int32,System.Int32)">
            <summary>
            Set the MP (Measurement Point) index.
            </summary>
            <param name="index">The index to use.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Double,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will overwrite any old value that is saved previously using this method.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Double,System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="data">The data to save.</param>
            <param name="index">The MP index (zero-based) to store the data at..</param>
            <param name="save">
                When True the value will be saved, when False the MP will only run the validation agains the MP limits.
            </param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will overwrite any old value that is saved previously using this method.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="data">The data to save.</param>
            <param name="index">The MP index (zero-based) to store the data at..</param>
            <param name="save">
                When True the value will be saved, when False the MP will only run the validation agains the MP limits.
            </param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will overwrite any old value that is saved previously using this method.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="data">The data to save.</param>
            <param name="index">The MP index (zero-based) to store the data at..</param>
            <param name="save">
                When True the value will be saved, when False the MP will only run the validation agains the MP limits.
            </param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Double,System.String,System.Boolean,System.Int32)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will overwrite any old value that is saved previously using this method.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Double,System.String,System.Int32,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="data">The data to save.</param>
            <param name="MPid">The MP ID to store the value at.</param>
            <param name="save">
                When True the value will be saved, when False the MP will only run the validation agains the MP limits.
            </param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will overwrite any old value that is saved previously using this method.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="data">The data to save.</param>
            <param name="MPid">The MP ID to store the value at.</param>
            <param name="save">
                When True the value will be saved, when False the MP will only run the validation agains the MP limits.
            </param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will overwrite any old value that is saved previously using this method.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="data">The data to save.</param>
            <param name="MPid">The MP ID to store the value at.</param>
            <param name="save">
                When True the value will be saved, when False the MP will only run the validation agains the MP limits.
            </param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Boolean,System.Int32)">
            <summary>
            Save a set of x and y of values and compares it to any limits specified for the MP
            This will overwrite any old value that is saved previously using this method.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="Xvalues">The X values.</param>
            <param name="Yvalues">The Y values.</param>
            <param name="index">The MP index (zero-based) to store the data at..</param>
            <param name="save">
                When True the value will be saved, when False the MP will only run the validation agains the MP limits.
            </param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.String,System.Boolean,System.Int32)">
            <summary>
            Save a set of x and y of values and compares it to any limits specified for the MP
            This will overwrite any old value that is saved previously using this method.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.String,System.Int32,System.String,System.String,System.String,System.String)"/>
            </summary>
            <param name="Xvalues">The X values.</param>
            <param name="Yvalues">The Y values.</param>
            <param name="MPId">The MP ID to store the value at.</param>
            <param name="save">
                When True the value will be saved, when False the MP will only run the validation agains the MP limits.
            </param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Double,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will add the datapoint to the result set (as a list) and will NOT overwrite any existing values.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Double,System.Int32,System.Boolean,System.Int32)"/>
            </summary>
            <param name="data">The data to save</param>
            <param name="index">The MP index (zero-based) to store the data at..</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <param name="attr1"></param>
            <param name="attr2"></param>
            <param name="attr3"></param>
            <param name="attr4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will add the datapoint to the result set (as a list) and will NOT overwrite any existing values.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Int32,System.Int32,System.Boolean,System.Int32)"/>
            </summary>
            <param name="data">The data to save</param>
            <param name="index">The MP index (zero-based) to store the data at..</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <param name="attr1"></param>
            <param name="attr2"></param>
            <param name="attr3"></param>
            <param name="attr4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will add the datapoint to the result set (as a list) and will NOT overwrite any existing values.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.String,System.Int32,System.Boolean,System.Int32)"/>
            </summary>
            <param name="data">The data to save</param>
            <param name="index">The MP index (zero-based) to store the data at..</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <param name="attr1"></param>
            <param name="attr2"></param>
            <param name="attr3"></param>
            <param name="attr4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Double,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will add the datapoint to the result set (as a list) and will NOT overwrite any existing values.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Double,System.String,System.Boolean,System.Int32)"/>
            </summary>
            <param name="data">The data to save</param>
            <param name="MPid">The MP ID to store the value at.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <param name="attr1"></param>
            <param name="attr2"></param>
            <param name="attr3"></param>
            <param name="attr4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will add the datapoint to the result set (as a list) and will NOT overwrite any existing values.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Int32,System.String,System.Boolean,System.Int32)"/>
            </summary>
            <param name="data">The data to save</param>
            <param name="MPid">The MP ID to store the value at.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <param name="attr1"></param>
            <param name="attr2"></param>
            <param name="attr3"></param>
            <param name="attr4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Save a MP (Measurement Point) value and compares it to any limits specified for the MP.
            This will add the datapoint to the result set (as a list) and will NOT overwrite any existing values.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.String,System.String,System.Boolean,System.Int32)"/>
            </summary>
            <param name="data">The data to save</param>
            <param name="MPid">The MP ID to store the value at.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <param name="attr1"></param>
            <param name="attr2"></param>
            <param name="attr3"></param>
            <param name="attr4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Save a set of x and y of values and compares it to any limits specified for the MP
            This will add the datapoint to the result set (as a list) and will NOT overwrite any existing values.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Boolean,System.Int32)"/>
            </summary>
            <param name="Xvalues">The X values.</param>
            <param name="Yvalues">The Y values.</param>
            <param name="index">The MP index (zero-based) to store the data at..</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <param name="attr1"></param>
            <param name="attr2"></param>
            <param name="attr3"></param>
            <param name="attr4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveAdd(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Save a set of x and y of values and compares it to any limits specified for the MP
            This will add the datapoint to the result set (as a list) and will NOT overwrite any existing values.
            <seealso cref="M:Idefix.ITxApi.IRuntime.IMeasurement.Save(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.String,System.Boolean,System.Int32)"/>
            </summary>
            <param name="Xvalues">The X values.</param>
            <param name="Yvalues">The Y values.</param>
            <param name="MPId">The MP ID to store the value at.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <param name="attribute1"></param>
            <param name="attribute2"></param>
            <param name="attribute3"></param>
            <param name="attribute4"></param>
            <returns>The verified measurement result.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveNote(System.String,System.Int32,System.Int32)">
            <summary>
            Attaches a comment to a measurement point.
            </summary>
            <param name="comment">The text body.</param>
            <param name="index">The MP (Measurement Point) index (zero-based).</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveNote(System.String,System.String,System.Int32)">
            <summary>
            Attaches a comment to a measurement point.
            </summary>
            <param name="comment">The text body.</param>
            <param name="MpId">The MP (Measurement Point) ID.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SetComment(System.String,System.Int32,System.Int32)">
            <summary>
            Attaches a comment to a measurement point.
            </summary>
            <param name="comment">The text body.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <param name="index">The MP (Measurement Point) index.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.FirstFailed(System.Int32)">
            <summary>
            Get the first MP (Measurement Point) that has failed.
            The format of the return value is "MPG:MP" (colon separated)
            </summary>
            <example>
                If the the MP (Measurement Point) MeasPoint1 in the MPG
                (Measurement Point Group) MeasPointGroup1 fails to validate then the following is true:
                <code>
                    IMeasurement m;
                    int dutIndex;
                    // initialize variables.
                    ...
                    // Assert
                    assertEquals("MeasPointGroup1:MeasPoint1", m.FirstFailed(dutIndex));
                </code>
            </example>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The MP reference name in the format "MPG:MP"</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.RemainingCount(System.Int32)">
            <summary>
            Get the remaining number of MPs (Measure Points) that is left to verify.
            </summary>
            <example>
                For a test with 10 MPs (Measure Points) configured the following would be true:
                <code>
                    <![CDATA[
                    IMeasurement m;
                    int dutIndex;
                    // Initialize variables.
                    ...
                    // Act
                    for (int i = 0; i < 5; i++)
                    {
                        m.Save(i, i, true, dutIndex);
                    }
                    // Assert
                    AssertEquals(5, m.RemainingCount(dutIndex);
                    ]]>
                </code>
            </example>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The number of MP that has yet to be verified.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveOutput(System.String,System.Int32)">
            <summary>
                Save the text in the output window to a file.
            </summary>
            <param name="filename">The filename to save the file as.</param>
            <param name="dut">
                The logical position of the DUT (Device Under Test) or -1 to save all. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
            <exception cref="T:Idefix.Exceptions.MeasurementException">When unable to save file.</exception>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IMeasurement.SaveRecordData(System.String,System.String,System.Int32)">
            <summary>
            Set test record data label and value for the DUT.
            </summary>
            <param name="label">The label to save value as.</param>
            <param name="data">Data to save to the label.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <exception cref="T:Idefix.Exceptions.MeasurementException"></exception>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.ITestCriteria">
            <summary>
            Interface contract for querying a Test Criteria.
            This interface contains no methods to alter the test criteria.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetLimitLow(System.Int32,System.Int32)">
            <summary>
                Get the lower limit for the MP (Measure Point) verification.
                <remarks>
                    Note that the lower value is used for equals verification.
                </remarks>
            </summary>
            <seealso cref="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetLimitHigh(System.Int32,System.Int32)"/>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The lower verification value limit.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetLimitHigh(System.Int32,System.Int32)">
            <summary>
                Get the upper limit for the MP (Measure Point) verification.
            </summary>
            <param name="index">The MP Index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The upper verification value limit.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetCurveLimitValues(System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@,System.Int32,System.Int32,System.Int32)">
            <summary>
                Get the curve value datapoints for for MP (Measure Point) verification.
                This will validate that any point at the given X-value in xcoords is between
                the values in y1Limit (lower) and y2Limit (upper).
            </summary>
            <param name="xcords">List to populate with the X coordinates.</param>
            <param name="y1Limit">List to populate with the lower Y coordinates.</param>
            <param name="y2Limit">List to populate with the upper Y coordinates.</param>
            <param name="maxArrSize">The maximum number of datapoints for the output lists.</param>
            <param name="index">The MP Index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <example>
                <code>
                    <![CDATA[
                    ITestCriteria tc;
                    int maxPointCnt;
                    int mpIndex;
                    int dutIndex;
                    int measuredXPoint;
                    int measuredYPoint;
                    // Initialize variables.
                    ...
                    // Get limits
                    var xcoords = new List<double>();
                    var y1Limits = new List<double>();
                    var y2Limits = new List<double>();
                    tc.GetCurveLimitValues(xcoords, y1Limits, y2Limits, maxPointCnt, mpIndex, dutIndex);
                    // Validate point
                    int index = xcoord.IndexOf(measuredXPoint);
                    int lowerLimit = y1Limits[index];
                    int upperLimit = y2Limits[index];
                    bool isValid = (lowerLimit < measuredYPoint) && (measuredYPoint < upperLimit);
                    ]]>
                </code>
            </example>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetNominal(System.Int32,System.Int32)">
            <summary>
                Get the nomninal value for limit verifications.
            </summary>
            <seealso cref="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetLimitLow(System.Int32,System.Int32)"/>
            <seealso cref="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetLimitHigh(System.Int32,System.Int32)"/>
            <param name="index">The MP Index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>the configured nominal.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetTCDocumentNumber(System.Int32)">
            <summary>
                Get the TC (Test Criteria) document number.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The document number.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetTCDocumentRevision(System.Int32)">
            <summary>
                Get the TC (Test Criteria) document revision.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The document revision.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetTCPath(System.Int32)">
            <summary>
                Get the TC (Test Criteria) document path.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The document path.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetTCFilename(System.Int32)">
            <summary>
                Get the TC (Test Criteria) document filename.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The document filename.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetTCDescription(System.Int32)">
            <summary>
                Get the TC (Test Criteria) description.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The description.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetTCResponsible(System.Int32)">
            <summary>
                Get the name of the person responsible for the TC (Test Criteria).
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The name of the responsible person.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetTCDate(System.Int32)">
            <summary>
                Get the TC (Test Criteria) document date.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The document date.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetTCType(System.Int32)">
            <summary>
                Get the TC (Test Criteria) type.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The type.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetTCComment(System.Int32)">
            <summary>
                Get the TC (Test Criteria) comment.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMaxRepeat(System.Int32)">
            <summary>
                Get the TC (Test Criteria) max repeat.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The max repeat</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetDynamicInterval(System.Int32)">
            <summary>
                Get the TC (Test Criteria) dynamic interval.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The dynamic interval.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetDynamicNumberOfOk(System.Int32)">
            <summary>
                Get the TC (Test Criteria) dynamic number of OK.
            </summary>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The dynamic number of OK.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMpgName(System.Int32,System.Int32)">
            <summary>
                Get the MPG (Measure Point Group) name.
            </summary>
            <param name="index">The MPG index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The MPG name.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMPName(System.Int32,System.Int32)">
            <summary>
                Get the MP (Measure Point) name.
            </summary>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The MP name.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMPDescription(System.Int32,System.Int32)">
            <summary>
                Get the MP (Measure Point) description.
            </summary>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The MP description.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMPDocReference(System.Int32,System.Int32)">
            <summary>
                Get the MP (Measure Point) document reference.
            </summary>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The MP document reference.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMPCompareRule(System.Int32,System.Int32)">
            <summary>
                Get the MP (Measure Point) comparison rule.
            </summary>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The comparison rule for the MP.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMPCompareType(System.Int32,System.Int32)">
            <summary>
                Get the MP (Measure Point) comparison type.
            </summary>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The comparison type.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMPUnit(System.Int32,System.Int32)">
            <summary>
                Get the MP (Measure Point) unit.
            </summary>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The unit.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMPPrintFlag(System.Int32,System.Int32)">
            <summary>
                Get the MP (Measure Point) print flag value.
                <remarks>
                    The return value should be one of "Y" or "N" (capital letters)
                </remarks>
            </summary>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>"Y" when the MP should be printed and "N" when it should not.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestCriteria.GetMPPrintFormat(System.Int32,System.Int32)">
            <summary>
                Get the MP (Measure Point) casting format.
                The MP value will be casted to this format before validating the value.
            </summary>
            <param name="index">The MP index.</param>
            <param name="dut">The logical position of the DUT (Device Under Test). <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/></param>
            <returns>The print format.</returns>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.ITestPlan">
            <summary>
                Interface contract for interactions with a Test Plan.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetRunMode">
            <summary>
                Get the TP (Test Plan) active run mode.
            </summary>
            <returns>
                One of:
                    0 = TS_AUTO
                    1 = TS_MANUAL
                    2 = TS_CUSTOM
            </returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetStatus">
            <summary>
            Get the TP (Test Plan) status.
            </summary>
            <returns>The current status. <see cref="T:Idefix.TxApi.Constants.StatusResult"/></returns>
            <seealso cref="M:Idefix.ITxApi.IRuntime.ITestPlan.SetStatus(System.Int32)"/>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.SetStatus(System.Int32)">
            <summary>
                Set the TP (Test Plan) status.
            </summary>
            <param name="status">The status. <see cref="T:Idefix.TxApi.Constants.StatusResult"/></param>
            <seealso cref="M:Idefix.ITxApi.IRuntime.ITestPlan.GetStatus"/>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetPosition">
            <summary>
                Get the TP (Test Plan) position.
            </summary>
            <returns>The test plan position, or -1 when unable to retrieve the value.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetProductNumber">
            <summary>
                Get the TP (Test Plan) product number.
            </summary>
            <returns>The product number.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetRevision">
            <summary>
                Get the TP (Test Plan) revision number.
            </summary>
            <returns>The revision.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetDescription">
            <summary>
                Get the TP (Test Plan) description.
            </summary>
            <returns>The description.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetPath">
            <summary>
                Get the TP (Test Plan) path.
            </summary>
            <returns>The path.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetFileName">
            <summary>
                Get the TP (Test Plan) filename.
            </summary>
            <returns>The filename.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetModuleType">
            <summary>
                Get the module type of the current MC (Method Caller) associated to the TP (Test Plan).
            </summary>
            <returns>The MC module type.</returns>
            <example>
                Managed code returns "NET"
                Unmanaged code returns "DLL"
            </example>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetModuleName">
            <summary>
                Get the module name of the current MC (Method Caller) associated to the TP (Test Plan).
                <remarks>
                    The module name is the path to the executable that manages the test method.
                </remarks>
            </summary>
            <returns>The name of the executable that manages the testcase.</returns>
            <example>
                C:\Data\ITP\Prod\ItpSteamLocal\Program\CYA12345\R1\managedtestsuite.exe
            </example>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetMethodName">
            <summary>
                Get the method name of the current MC (Method Caller) associated to the TP (Test Plan).
                This is the fully qualified class name for the test method.
            </summary>
            <returns>The method name to execute for the current test.</returns>
            <example>
                For a managed test method named MyTestMethod in the namespace MyTestSuiteNamespace:
                MyTestSuiteNamespace.MyTestMethod
            </example>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetMethodParameter">
            <summary>
            Get the method parameters.
            </summary>
            <returns>The method parameters</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestPlan.GetMethodFlags">
            <summary>
            Get the method flags.
            </summary>
            <returns>The method flags.</returns>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.ITestRecord">
            <summary>
            Summary description for TestRecord.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord.AddInstrument(System.String,System.String)">
            <summary>
                Add an instrument to the "Instrument" section of the test protococol.
            </summary>
            <example>
                Add the inventory number for the DMM to the test protocol.
                <code>
                    ITestRecord tr;
                    // Initialize variables.
                    ...
                    //
                    tr.AddInstrument("DMM", "120120210");
                </code>
            </example>
            <param name="instrument">The instrument name.</param>
            <param name="inventoryNumber">The inventory number or equivilent.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord.ClearAllInstruments">
            <summary>
                Clear the "Instrument" section fo the test protocol.
            </summary>
            <seealso cref="M:Idefix.ITxApi.IRuntime.ITestRecord.AddInstrument(System.String,System.String)"/>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord.SaveCircumstances(System.String,System.String,System.Int32)">
            <summary>
                Adds a Circumstance to the Circumstances portion of the test protocol.
            </summary>
            <param name="name">The name ofthe circumstance.</param>
            <param name="description">Description of the value for the Circumstance.</param>
            <param name="dut">
                The DUT (Device Under Test) logical position. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord.SaveBlob(System.String,System.String,System.String,System.DateTime,System.Int32)">
            <summary>
                Appends a BLOB (Binarty Large OBject) to the test record. The BLOB will be read from a file.
            </summary>
            <remarks>
                The test results must be saved in the testmethod.
            </remarks>
            <example>
                The following code will save the file "C:\temp\BootLog.txt' to the database as "BootLog.txt".
                <code>
                    ITestRecord tr;
                    int dutIndex;
                    // Initialize variables.
                    ...
                    //
                    tr.SaveBlob(
                        "BootLog.txt",
                        "Logfile from the boot operation",
                        @"C:\temp\BootLog.txt",
                        DateTime.Now.AddMonths(3),
                        dutIndex);
                </code>
            </example>
            <param name="name">The name of the BLOB.</param>
            <param name="description">Description of the blob.</param>
            <param name="filename">The filename for the blob.</param>
            <param name="bestBeforeDate">The date that the BLOB may be deleted from the database.</param>
            <param name="dut">
                The DUT (Device Under Test) logical position. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord.SaveBlob(System.String,System.String,System.String,System.Byte[],System.DateTime,System.Int32)">
            <summary>
                Append a BLOB (Binary Large OBject) to the test record.
            </summary>
            <remarks>
                The test results must be saved in the testmethod.
            </remarks>
            <example>
                <code>
                    ITestRecord tr;
                    int dutIndex;
                    byte[] byteArray = GetLotsOfBytes();
                    // Initialize variables
                    ...
                    //
                    tr.SaveBlob(
                        "Lotsabytes",
                        "Lots of bytes",
                        "C:\temp\BootLog.txt",
                        byteArray,
                        DateTime.Now.AddMonths(3),
                        dutIndex);
                    );
                </code>
            </example>
            <param name="name">The name of the BLOB.</param>
            <param name="description">Description of the blob.</param>
            <param name="filename">The filename for the blob.</param>
            <param name="buffer">The binary data to save.</param>
            <param name="bestBeforeDate">The date that the BLOB may be deleted from the database.</param>
            <param name="dut">
                The DUT (Device Under Test) logical position. <see cref="M:Idefix.ITxApi.IRuntime.IDut.GetPosition"/>
            </param>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.ITestRecord2">
            <summary>
            Extension of the ITestRecord interface which allows fetching data from protocols of previous tests.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetLatestTestResultForMP(System.String,System.String,System.String,System.String)">
            <summary>
            Get the latest result of a specific measurement point.
            </summary>
            <param name="dutId">the dut to query</param>
            <param name="criteriaDoc">the criteria document number</param>
            <param name="criteriaRev">the criteria revision</param>
            <param name="mp">the mp that is result is for</param>
            <returns>MeasurementResult data structure. <see cref="T:Idefix.TxApi.Constants.MeasurementResult"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetLatestTestResult(System.String)">
            <summary>
            Get the test status of the DUT (Passed or failed).
            </summary>
            <param name="dutId">DUT ID.</param>
            <returns>StatusResult data structure. <see cref="T:Idefix.TxApi.Constants.StatusResult"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetLatestTestTime(System.String)">
            <summary>
            Get the time stamp of when the DUT was last tested.
            </summary>
            <param name="dutId">DUT ID.</param>
            <returns>Time of latest test of the DUT.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetTotalNumberOfTests(System.String)">
            <summary>
            Get the total number of times the DUT has been tested.
            </summary>
            <param name="dutId">DUT ID.</param>
            <returns>Total number of times the DUT has been tested.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetMeasurementValuesForMP(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Fetches the mesurement values for a specific measurement point.
            </summary>
            <param name="productNumber">Product number which has been tested.</param>
            <param name="rState">R-state of the product that has been tested.</param>
            <param name="criteriaDoc">The document number of the criteria which has the measurement point.</param>
            <param name="criteriaRev">The revision number of the criteria which has the measurement point.</param>
            <param name="mp">Name of the measurement point.</param>
            <param name="onlyPassedMp">If true only values of passed measure points will be fetched.</param>
            <param name="maxNoMp">The maximum number of measurements that will be fetched.</param>
            <param name="mpFromDate">Earliest date to fetch measurements from.</param>
            <param name="mpToDate">Oldest date to fetch measurements from.</param>
            <returns>Collection of values for the specified measurement point.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetBlob(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Get specific blob byte array.
            </summary>
            <param name="testType">Type of test.</param>
            <param name="dutId">DUT ID.</param>
            <param name="testCount">Number of tests.</param>
            <param name="blobCount">Number of blobs.</param>
            <returns>Byte array of blob data.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetBlobInfo(System.String,System.String,System.Int32)">
            <summary>
            This function returns information on the blob information for this individual. 
            For example use the function <see cref="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetPerformed(System.String,System.String,System.String)"/> to get all tests for individual and 
            use it to get blob information.
            </summary>
            <param name="testType">Type of test.</param>
            <param name="dutId">DUT ID.</param>
            <param name="testCount">Number of tests.</param>
            <returns>BlobInfo data structure. <see cref="T:Idefix.ITxApi.IRuntime.BlobInfo"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetCriterias(System.String,System.String)">
            <summary>
            For given criteria document number and optional revision get a list with criteria combinations.
            This function can be used to check if the combination of criteria document number and revision 
            already exists in Testnet, to avoid creating criteria with same revision with different date 
            that will be rejected by Testnet.
            </summary>
            <param name="documentNumber">Document number of the criteria.</param>
            <param name="revision">Document revision of the criteria.</param>
            <returns>CriteriaInfo data structure. <see cref="T:Idefix.ITxApi.IRuntime.CriteriaInfo"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetLayouts(System.String,System.String)">
            <summary>
            For given layout document number and optional revision get a list with layout combinations.
            This function can be used to check if the combination of layout document number and revision 
            already exists in Testnet, to avoid creating layout with same revision with different date 
            that will be rejected by Testnet.
            </summary>
            <param name="documentNumber">Document number of the layout file.</param>
            <param name="revision">Revision of the layout file.</param>
            <returns>LayoutInfo data structure. <see cref="T:Idefix.ITxApi.IRuntime.LayoutInfo"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetPerformed(System.String,System.String,System.String)">
            <summary>
            Get information of latest test for each test type performed for individual.
            </summary>
            <param name="dutId">DUT ID.</param>
            <param name="productNo">Product number of the DUT.</param>
            <param name="rState">R-state of the DUT.</param>
            <returns>TestInfo data structure. <see cref="T:Idefix.ITxApi.IRuntime.TestInfo"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetTestTypeTests(System.String,System.String)">
            <summary>
            Get tests performed for individual and test type. Get additional information for tests 
            fetched by <see cref="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetPerformed(System.String,System.String,System.String)"/> function
            </summary>
            <param name="dutId">DUT ID.</param>
            <param name="testType">Type of test.</param>
            <returns>TestTypeInfo data structure. <see cref="T:Idefix.ITxApi.IRuntime.TestTypeInfo"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetParams">
            <summary>
            Get entire contents from PARAM, SYS_SETTINGS tables and web service info.
            </summary>
            <returns>ParameterInfo data structure. <see cref="T:Idefix.ITxApi.IRuntime.ParameterInfo"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITestRecord2.GetQSyncRequest(System.String,System.DateTime)">
            <summary>
            Get tests performed for individual. Used to get software id and test count to use in 
            Fetch application when recreating protocols. This function is obsolete since there 
            is a query file format that uses idno and start time.
            </summary>
            <param name="idno">ID of software</param>
            <param name="startTime">Start time.</param>
            <returns>SyncInfo data structure. <see cref="T:Idefix.ITxApi.IRuntime.SyncInfo"/></returns>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.SyncInfo">
            <summary>
            Q-Sync information returned by the GetQSyncRequest method.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.SyncInfo.SoftwareId">
            <summary>
            ID of the software.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.SyncInfo.TestCount">
            <summary>
            Number of preformed tests.
            </summary>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.ParameterInfo">
            <summary>
            PARAM data.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.ParameterInfo.Object">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.ParameterInfo.Data">
            <summary>
            Data describing PARAM.
            </summary>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.TestTypeInfo">
            <summary>
            Information regarding the test type.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestTypeInfo.Count">
            <summary>
            Number of tests performed.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestTypeInfo.Result">
            <summary>
            Result of the measurement.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestTypeInfo.ProgramRevision">
            <summary>
            Revision of the test program.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestTypeInfo.EmployeeNumber">
            <summary>
            ID number of the test operator.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestTypeInfo.StartTime">
            <summary>
            Time when the test was executed.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestTypeInfo.NodeNumber">
            <summary>
            Node ID number.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestTypeInfo.Cardmark">
            <summary>
            Card mark.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestTypeInfo.Comment">
            <summary>
            Comment included with the test.
            </summary>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.TestInfo">
            <summary>
            Test Information
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestInfo.SoftwareId">
            <summary>
            ID of the test software.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestInfo.Description">
            <summary>
            Description of the test.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestInfo.StartTime">
            <summary>
            Start time of the test.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestInfo.Result">
            <summary>
            Test result.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestInfo.TestCount">
            <summary>
            Number of times the test has been run. 
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.TestInfo.TestType">
            <summary>
            Type of test.
            </summary>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.LayoutInfo">
            <summary>
            Layout document information.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.LayoutInfo.DocumentNumber">
            <summary>
            Document number of the layout file.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.LayoutInfo.Revision">
            <summary>
            Revision number of the layout file.
            </summary>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.CriteriaInfo">
            <summary>
            Criteria document information.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.CriteriaInfo.DocumentNumber">
            <summary>
            Document number of the criteria.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.CriteriaInfo.Revision">
            <summary>
            Criteria revision.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.CriteriaInfo.Date">
            <summary>
            Latest modification date of the criteria.
            </summary>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.BlobInfo">
            <summary>
            Blob information.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.BlobInfo.Count">
            <summary>
            Blob count.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.BlobInfo.Id">
            <summary>
            ID of the blob.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.BlobInfo.Description">
            <summary>
            Description of the blob.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.BlobInfo.Filename">
            <summary>
            Blob filename.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.IRuntime.BlobInfo.ExpiryDate">
            <summary>
            Expiery date of the blob.
            </summary>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.IThreading">
            <summary>
                Interface for registering threads to communicate with Idefix.
                All threads that will print or save measuremetns must be registered using this interface.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IThreading.RegisterToMethod(System.Int32)">
            <summary>
                Registers a thread with the currently running test method.
            </summary>
            <remarks>
                Implementations should allow for a local thread that is registered to run and communicate with Idefix
                printing and saving measurements during the test method.
                The thread must be finished and released before the test method is completed or an error will occurr.
            </remarks>
            <example>
                <code>
                <![CDATA[
                    public void WorkThreadLocal()
                    {
                        // Do stuff in a different thread here.
                    }
                    public  int Measure()
                    {
                        IThreading t = ...;
                        var job = new System.Threading.ThreadStart(this.WorkThreadLocal);
                        var thread = new System.Threading.Thread(job);
                        t.RegisterToMethod(thread.ManagedThreadId);
                        thread.IsBackground = true;
                        thread.Start();
                        thread.Join();
                        t.ReleaseFromMethod(thread.ManagedThreadId);
                    }
                ]]>
                </code>
            </example>
            <param name="threadId">The thread id of the thread to register.</param>
            <seealso cref="M:Idefix.ITxApi.IRuntime.IThreading.ReleaseFromMethod(System.Int32)"/>
            <seealso cref="M:Idefix.ITxApi.IRuntime.IThreading.RegisterGlobal(System.Int32)"/>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IThreading.ReleaseFromMethod(System.Int32)">
            <summary>
                Release a register thread from the test method.
            </summary>
            <param name="threadId">The thread id of the thread to release.</param>
            <seealso cref="M:Idefix.ITxApi.IRuntime.IThreading.RegisterToMethod(System.Int32)"/>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IThreading.RegisterGlobal(System.Int32)">
            <summary>
                Registers a thread as a global thread.
            </summary>
            <remarks>
                Implementations should allow for a thread that is registered to run and communicate with Idefix
                printing and saving measurements during multiple test methods in a global scope.
                The thread must be finished and released before the test plan is completed or an error will occurr.
            </remarks>
            <param name="threadId">The thread id of the thread to register.</param>
            <seealso cref="M:Idefix.ITxApi.IRuntime.IThreading.ReleaseGlobal(System.Int32)"/>
            <seealso cref="M:Idefix.ITxApi.IRuntime.IThreading.RegisterToMethod(System.Int32)"/>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IThreading.ReleaseGlobal(System.Int32)">
            <summary>
                Releases a thread that has been registered as a global thread.
            </summary>
            <param name="threadId">The thread id of the thread to release.</param>
            <seealso cref="M:Idefix.ITxApi.IRuntime.IThreading.RegisterGlobal(System.Int32)"/>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.ITimer">
            <summary>
            Summary description for ITimer.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITimer.Start">
            <summary>
                Starts a time that counts the interactive time. Each loaded test method has its own timer.
            </summary>
            <remarks>
                Note that the test method will enter the Pause state as a result of this call.
                The test method will resume to the Run state once <see cref="M:Idefix.ITxApi.IRuntime.ITimer.Stop"/> has been called.
            </remarks>
            <seealso cref="M:Idefix.ITxApi.IRuntime.ITimer.Stop"/>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.ITimer.Stop">
            <summary>
                Stops the timer that counts the itneractive time.
            </summary>
            <seealso cref="M:Idefix.ITxApi.IRuntime.ITimer.Start"/>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs">
            <summary>
            Interface for displaying dialogs.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxInfo(System.String)">
            <summary>
            Display an informational dialogs.
            </summary>
            <param name="text">The text body of the dialogs.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxInfo(System.String,System.String)">
            <summary>
            Display an informational dialogs.
            </summary>
            <param name="text">The text body of the dialogs.</param>
            <param name="title">The window title of the dialogs.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxError(System.String)">
            <summary>
            Display an error message dialogs.
            </summary>
            <param name="text">The error text body of the dialogs.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxError(System.String,System.String)">
            <summary>
            Display an error message dialogs.
            </summary>
            <param name="text">the error text body of the dialogs.</param>
            <param name="title">The window title of the error dialogs.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxQuestion(System.String)">
            <summary>
            Display an question dialogs to the user with the alternatives yes and no.
            </summary>
            <param name="text">The text body of the question dialogs.</param>
            <returns>True if the user answered "Yes", false otherwise.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxQuestion(System.String,System.String)">
            <summary>
            Display an question dialogs to the user with the alternatives yes and no.
            </summary>
            <param name="text">The text body of the question dialogs.</param>
            <param name="title">The window title of the error dialogs.</param>
            <returns>True if the user answered "Yes", false otherwise.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxInput(System.String)">
            <summary>
            Display a textbox input dialogs to the user.
            </summary>
            <param name="text">The text label of the dialog.</param>
            <returns>The value of the textbox.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxInput(System.String,System.String)">
            <summary>
            Display a textbox input dialogs to the user.
            </summary>
            <param name="text">The text label of the dialog.</param>
            <param name="defaultValue">The default value for the textbox.</param>
            <returns>The value of the textbox.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxInput(System.String,System.String,System.String)">
            <summary>
            Display a textbox intput dialogs to the user.
            </summary>
            <param name="text">The text label of the dialog.</param>
            <param name="defaultValue">the default value for the textbox.</param>
            <param name="title">The window title for the dialog.</param>
            <returns></returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxMultiSelect(System.String,System.Collections.Generic.List{Idefix.TxApi.Runtime.UserInfo.CheckBoxElement})">
            <summary>
            Display a selectbox with multiple selectable item.
            </summary>
            <param name="text">The text label of the dialog.</param>
            <param name="selectionList">A list of options selectable by the user.</param>
            <returns>A list of the options selected by the user</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxMultiSelect(System.String,System.Collections.Generic.List{Idefix.TxApi.Runtime.UserInfo.CheckBoxElement},System.String)">
            <summary>
            Display a selectbox with multiple selectable items.
            </summary>
            <param name="text">The text label of the dialog.</param>
            <param name="selectionList">A list of options selectable by the user.</param>
            <param name="title">The window title of the dialog.</param>
            <returns>A list of the options selected by the user</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxSingleSelect(System.String,System.String)">
            <summary>
            Display a selectbox with where the user can select a single item.
            </summary>
            <param name="text">The text label of the dialog.</param>
            <param name="selectionList">Semicolon-separated list of avalible options for the user.</param>
            <returns>Index of the option selected by the user.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxSingleSelect(System.String,System.String,System.String)">
            <summary>
            Display a selectbox with where the user can select a single item.
            </summary>
            <param name="text">The text label of the dialog.</param>
            <param name="selectionList">Semicolon-separated list of avalible options for the user.</param>
            <param name="title">The window title for the dialog.</param>
            <returns>Index of the option selected by the user.</returns>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IDialogs.BoxSingleSelect(System.String,System.String,System.String,System.String@)">
            <summary>
            Display a selectbox with where the user can select a single item.
            </summary>
            <param name="text">The text label of the dialog.</param>
            <param name="selectionList">Semicolon-separated list of avalible options for the user.</param>
            <param name="title">The window title for the dialog.</param>
            <param name="result">(out)The text value of the option selected by the user.</param>
            <returns>Index of the option selected by the user.</returns>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.IUserInfo.IOutput">
            <summary>
            Interface for message output methods.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.Int32,System.String)">
            <summary>
            Print a message attached to a DUT (Device Under Test).
            </summary>
            <param name="dut">DUT (Device Under Test) index.</param>
            <param name="output">The output string.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.Int32,System.String,System.Object)">
            <summary>
            Print a message attached to a DUT (Device Under Test).
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="dut">DUT (Device Under Test) index.</param>
            <param name="output">The output string with one argument.</param>
            <param name="arg0">The arguemnt.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.Int32,System.String,System.Object,System.Object)">
            <summary>
            Print a message attached to a DUT (Device Under Test).
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="dut">DUT (Device Under Test) index.</param>
            <param name="output">The output string (with two arguments).</param>
            <param name="arg0">The first arguemnt.</param>
            <param name="arg1">The second arguemnt.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.Int32,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Print a message attached to a DUT (Device Under Test).
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="dut">DUT (Device Under Test) index.</param>
            <param name="output">The output string (with three arguments).</param>
            <param name="arg0">The first arguemnt.</param>
            <param name="arg1">The second arguemnt.</param>
            <param name="arg2">The third arguemnt.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.Int32,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Print a message attached to a DUT (Device Under Test).
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="dut">DUT (Device Under Test) index.</param>
            <param name="output">The output string (with four arguments).</param>
            <param name="arg0">The first arguemnt.</param>
            <param name="arg1">The second arguemnt.</param>
            <param name="arg2">The third arguemnt.</param>
            <param name="arg3">The fourth arguemnt.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.Int32,System.String,System.Object[])">
            <summary>
            Print a message attached to a DUT (Device Under Test).
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="dut">DUT (Device Under Test) index.</param>
            <param name="output">The output string (with a variable number of arguments).</param>
            <param name="arg">Array of arguments.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.String)">
            <summary>
            Print a message.
            </summary>
            <param name="output">The output string.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.String,System.Object)">
            <summary>
            Print a message.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">The output string with one argument.</param>
            <param name="arg0">The argument.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.String,System.Object,System.Object)">
            <summary>
            Print a message.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">The output string (with two arguments).</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Print a message.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">The output string (with three arguments).</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Print a message.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">The output string (with four arguments).</param>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
            <param name="arg3">The fourth argument.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOut(System.String,System.Object[])">
            <summary>
            Print a message.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">The output string (with a variable number of arguments).</param>
            <param name="arg">Array of arguments.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.Int32,System.String,System.String,System.String)">
            <summary>
            Print a message as an error.
            </summary>
            <param name="code">The error code.</param>
            <param name="module">The module from where the error originates.</param>
            <param name="type">The type of the error.</param>
            <param name="Output">Error message.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.Int32,System.String,System.String,System.String,System.Object)">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="code">The error code.</param>
            <param name="module">The module from where the error originates.</param>
            <param name="type">The type of the error.</param>
            <param name="Output">Error message with one argument</param>
            <param name="arg0">The argument</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.Int32,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="code">The error code.</param>
            <param name="module">The module from where the error originates.</param>
            <param name="type">The type of the error.</param>
            <param name="Output">Error message with two arguments</param>
            <param name="arg0">The first argument</param>
            <param name="arg1">The second argument</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.Int32,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="code">The error code.</param>
            <param name="module">The module from where the error originates.</param>
            <param name="Type">The type of the error.</param>
            <param name="Output">Error message with three arguments.</param>
            <param name="arg0">The first argument</param>
            <param name="arg1">The second argument</param>
            <param name="arg2">The third argument</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.Int32,System.String,System.String,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="code">The error code.</param>
            <param name="module">The module from where the error originates.</param>
            <param name="Type">The type of the error.</param>
            <param name="Output">Error message with four arguments.</param>
            <param name="arg0">The first argument</param>
            <param name="arg1">The second argument</param>
            <param name="arg2">The third argument</param>
            <param name="arg3">The fourth argument</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.Int32,System.String,System.String,System.String,System.Object[])">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="code">The error code.</param>
            <param name="module">The module from where the error originates.</param>
            <param name="Type">The type of the error.</param>
            <param name="Output">Error message with an variable number of arguments.</param>
            <param name="arg">Array of arguments.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.String)">
            <summary>
            Print a message as an error.
            </summary>
            <param name="output">Error message.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.String,System.Object)">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">Error message with one argument.</param>
            <param name="arg0">The first argument</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.String,System.Object,System.Object)">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">Error message with two argument.</param>
            <param name="arg0">The first argument</param>
            <param name="arg1">The second argument</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">Error message with three argument.</param>
            <param name="arg0">The first argument</param>
            <param name="arg1">The second argument</param>
            <param name="arg2">The third argument</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">Error message with four argument.</param>
            <param name="arg0">The first argument</param>
            <param name="arg1">The second argument</param>
            <param name="arg2">The third argument</param>
            <param name="arg3">The fourth argument</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.IOutput.TextOutError(System.String,System.Object[])">
            <summary>
            Print a message as an error.
            The output is formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <param name="output">Error message with a variable number of arguments.</param>
            <param name="arg">Array of arguments.</param>
        </member>
        <member name="T:Idefix.ITxApi.IRuntime.IUserInfo.ITab">
            <summary>
            Interface representing interactions with tabs in the Idefix test manager.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.ITab.Add(System.String,System.Int32)">
            <summary>
            Create a new tab.
            </summary>
            <param name="name">The name of the tab to create.</param>
            <param name="childWindow">The HWND handle to the window.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.ITab.Enable(System.String,System.Boolean)">
            <summary>
            Set whether or not the given tab should be enabled or disabled.
            </summary>
            <param name="name">The name of the tab to enable/disable.</param>
            <param name="enable">True to enable, false to disable.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.ITab.Maximize(System.String,System.Boolean)">
            <summary>
            Set wheter or not the given tab should be maximized or not.
            </summary>
            <param name="name">Name of the tab to maximize.</param>
            <param name="maximize">True to maximize.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.ITab.Remove(System.String)">
            <summary>
            Remove a tab by name.
            </summary>
            <param name="name">The name of the tab to remove.</param>
        </member>
        <member name="M:Idefix.ITxApi.IRuntime.IUserInfo.ITab.Select(System.String)">
            <summary>
            Select a tab by name.
            </summary>
            <param name="name">The name of the tab to select.</param>
        </member>
        <member name="T:Idefix.ITxApi.ISupportSystems">
            <summary>
                Interface contract for communications with a Product Tracability system.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.ISupportSystems.GetIdInfo(System.String)">
            <summary>
                Query the product traceability system for information about a product.
            </summary>
            <param name="idNumber">
                The product ID.
                <example>ABC 123 456</example>
            </param>
            <returns>Information of the product.</returns>
        </member>
        <member name="M:Idefix.ITxApi.ISupportSystems.GetOrderInfo(System.String,System.Int32)">
            <summary>
                Query the product traceability system for infromation about an product order (the verb order, not the noun).
            </summary>
            <param name="orderNumber">The order number.</param>
            <param name="orderItemNo">the order item number.</param>
            <returns>Order (verb) information.</returns>
        </member>
        <member name="M:Idefix.ITxApi.ISupportSystems.GetAdditionalNumbers(System.String)">
            <summary>
                Query the product tracability system for "Additional Numbers" for the product.
            </summary>
            <param name="idNumber">
                The product ID.
                <example>ABC 123 456</example>
            </param>
            <returns>Readonly list of "Additional numbers".</returns>
            <seealso cref="M:Idefix.ITxApi.ISupportSystems.GetIdInfo(System.String)"/>
        </member>
        <member name="M:Idefix.ITxApi.ISupportSystems.GetChildren(System.String)">
            <summary>
                Query the product tracability system for child product of a given product.
            </summary>
            <param name="idNumber">
                The product ID.
                <example>ABC 123 456</example>
            </param>
            <returns>Readonly list of child-products to the given product.</returns>
        </member>
        <member name="M:Idefix.ITxApi.ISupportSystems.GetOrderStructure(System.String,System.Int32)">
            <summary>
                Query the product tracability system for the structure of an order (the verb order, not the noun).
            </summary>
            <param name="orderNumber">The order number.</param>
            <param name="orderItemNumber">The order item number.</param>
            <returns>Order (verb) structure.</returns>
            <seealso cref="M:Idefix.ITxApi.ISupportSystems.GetOrderInfo(System.String,System.Int32)"/>
        </member>
        <member name="M:Idefix.ITxApi.ISupportSystems.ConnectId(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Inform the product tracability system that a given product is connected to an other product as a child.
            </summary>
            <param name="parentIdNumber">
                The parent product ID.
                <example>ABC 123 456</example>
            </param>
            <param name="childIdNumber">The child product ID.</param>
            <param name="assembleDone"></param>
            <param name="structureCheck"></param>
            <seealso cref="M:Idefix.ITxApi.ISupportSystems.DisconnectId(System.String,System.String,System.Boolean)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Idefix.ITxApi.ISupportSystems.DisconnectId(System.String,System.String,System.Boolean)" -->
        <member name="M:Idefix.ITxApi.ISupportSystems.PrintLabel(System.String,System.String,System.Int32)">
            <summary>
                Tell the product tracability system to print a label for the given product ID.
            </summary>
            <param name="idNumber">
                The product ID.
                <example>ABC 123 456</example>
            </param>
            <param name="label">The label to print.</param>
            <param name="labelCount">The count of labels to print.</param>
        </member>
        <member name="T:Idefix.ITxApi.ITestMethod">
            <summary>
            Interface that defines the methods that are mandatory for TxApi test methods class.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.ITestMethod.Init">
            <summary>
            Initialization method for user test implementation.
            This should be used for setup.
            </summary>
            <returns>The method result <see cref="T:Idefix.TxApi.Constants.MethodResult"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.ITestMethod.Measure">
            <summary>
            Measure method for user test implementation. This is the body of the test method.
            </summary>
            <returns>The method result <see cref="T:Idefix.TxApi.Constants.MethodResult"/></returns>
        </member>
        <member name="M:Idefix.ITxApi.ITestMethod.Exit">
            <summary>
            Exit method for user test implementation.
            This is used to deinitialize things initialized in <see cref="M:Idefix.ITxApi.ITestMethod.Init"/>
            </summary>
            <returns>The method result <see cref="T:Idefix.TxApi.Constants.MethodResult"/></returns>
        </member>
        <member name="P:Idefix.ITxApi.ITestMethod.NumberOfMeasurementPoints">
            <summary>
            Return the number of measurement points that the test method requires to be operational.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.ITestMethod.MethodDescription">
            <summary>
            Return a human readable description for this test method, describing what the test method does.
            </summary>
        </member>
        <member name="T:Idefix.ITxApi.ITestProductionCode">
            <summary>
            Summary description for ITestProductionCode.
            </summary>
        </member>
        <member name="P:Idefix.ITxApi.ITestProductionCode.Code">
            <summary></summary>
        </member>
        <member name="P:Idefix.ITxApi.ITestProductionCode.Comment">
            <summary></summary>
        </member>
        <member name="P:Idefix.ITxApi.ITestProductionCode.ChildComment">
            <summary></summary>
        </member>
        <member name="T:Idefix.ITxApi.ITestStation">
            <summary>
            Interface that defines a test station.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.ITestStation.Id">
            <summary>
            Get the ID of the test station.
            </summary>
            <returns>ID of the test station</returns>
        </member>
        <member name="M:Idefix.ITxApi.ITestStation.Area">
            <summary>
            Get the test station area.
            </summary>
            <returns>Test station area.</returns>
        </member>
        <member name="M:Idefix.ITxApi.ITestStation.Line">
            <summary>
            Get the test station line.
            </summary>
            <returns>Test station line.</returns>
        </member>
        <member name="M:Idefix.ITxApi.ITestStation.Description">
            <summary>
            Get the test station description.
            </summary>
            <returns>The description of the test station.</returns>
        </member>
        <member name="M:Idefix.ITxApi.ITestStation.Responsible">
            <summary>
            Get the name of the person responsible of the test station.
            </summary>
            <returns>The name of the person responsible.</returns>
        </member>
        <member name="M:Idefix.ITxApi.ITestStation.MaxDuts">
            <summary>
            Get the max number of DUTs (Device Under Test) that this test station allows.
            </summary>
            <returns>Max number of DUTs or -1 for any number.</returns>
        </member>
        <member name="M:Idefix.ITxApi.ITestStation.MaxTestPlans">
            <summary>
            Get the max number of test plans allowed for this test station.
            </summary>
            <returns>Max number of test plans.</returns>
        </member>
        <member name="T:Idefix.ITxApi.ITools.ICom">
            <summary>
            This interface includes all functions for registring and unregister COM objects.
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.ITools.ICom.RegisterServer(System.String)">
            <summary>
            This function will register the dll com server
            </summary>
            <param name="DllName">The name of the dll including the path</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.ICom.UnregisterServer(System.String)">
            <summary>
            This function will unregister the dll com server
            </summary>
            <param name="DLLName">The name of the dll incuding the path</param>
        </member>
        <member name="T:Idefix.ITxApi.ITools.ICommandHandler">
            <summary>
            This interface includes functions that allow the user to execute DOS commands and exe files
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.ITools.ICommandHandler.ExecuteCommand(System.String,System.Int32)">
            <summary>
            This command execute a EXE file or DOS command
            </summary>
            <param name="Command">The DOS command or EXE file incuding the path</param>
            <param name="TimeOut">The time out in milliseconds</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.ICommandHandler.ExecuteCommand(System.String,System.String,System.Int32)">
            <summary>
            This command execute a EXE file or DOS command with arguments
            </summary>
            <param name="Command">The DOS command or EXE file incuding the path</param>
            <param name="Argument">The argument</param>
            <param name="TimeOut">The time out in milliseconds</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.ICommandHandler.ExecuteCommand(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            This command execute a EXE file or DOS command with arguments
            </summary>
            <param name="Command">The DOS command or EXE file incuding the path</param>
            <param name="Arguments">A List of arguments</param>
            <param name="TimeOut">The time out in milliseconds</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.ICommandHandler.ExecuteCommand(System.String,Idefix.TxApi.Tools.CommandHandler.dMessage,System.Int32)">
            <summary>
            This command execute a EXE file or DOS command
            </summary>
            <param name="Command">The DOS command or EXE file incuding the path</param>
            <param name="MessageLogCallback">Output mesasges from the Process/Command will be sent to this callback</param>
            <param name="TimeOut">The time out in milliseconds</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.ICommandHandler.ExecuteCommand(System.String,System.String,Idefix.TxApi.Tools.CommandHandler.dMessage,System.Int32)">
            <summary>
            This command execute a EXE file or DOS command with arguments
            </summary>
            <param name="Command">The DOS command or EXE file incuding the path</param>
            <param name="Argument">The argument</param>
            <param name="MessageLogCallback">Output mesasges from the Process/Command will be sent to this callback</param>
            <param name="TimeOut">The time out in milliseconds</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.ICommandHandler.ExecuteCommand(System.String,System.Collections.Generic.List{System.String},Idefix.TxApi.Tools.CommandHandler.dMessage,System.Int32)">
            <summary>
            This command execute a EXE file or DOS command with arguments
            </summary>
            <param name="Command">The DOS command or EXE file incuding the path</param>
            <param name="Arguments">A List of arguments</param>
            <param name="MessageLogCallback">Output mesasges from the Process/Command will be sent to this callback</param>
            <param name="TimeOut">The time out in milliseconds</param>
        </member>
        <member name="T:Idefix.ITxApi.ITools.IGlobalObjectStore">
            <summary>
            This interface is used by TxApi GlobalObjectStore, implement it if you need to write a driver for this API
            </summary>
        </member>
        <member name="M:Idefix.ITxApi.ITools.IGlobalObjectStore.Get(System.String)">
            <summary>
            Get the global object that is associated with the identifier
            </summary>
            <param name="Identifier">The identifier to use</param>
            <returns>The object connected to the Identifier</returns>
        </member>
        <member name="M:Idefix.ITxApi.ITools.IGlobalObjectStore.Set(System.String,System.Object)">
            <summary>
            Set/Save the value of an existing global object
            </summary>
            <param name="Identifier">The identifier of the global object</param>
            <param name="Value">The value to set</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.IGlobalObjectStore.Add(System.String,System.Type,System.Object[])">
            <summary>
            Add a new Global object.
            </summary>
            <param name="Identifier">The identifier of the global object</param>
            <param name="ValueType">The type wich will be initiated by global object handler</param>
            <param name="Arguments">The arguments wich will be used when initiating the object</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.IGlobalObjectStore.Add(System.String,System.Object)">
            <summary>
            Add a new global object
            </summary>
            <param name="Identifier">The identifier of the global object</param>
            <param name="Value">The value of the glbal object</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.IGlobalObjectStore.List">
            <summary>
            List all global objects saved to the global store
            </summary>
            <returns>The list of identifiers of the global objects</returns>
        </member>
        <member name="M:Idefix.ITxApi.ITools.IGlobalObjectStore.Remove(System.String)">
            <summary>
            Remove a global object
            </summary>
            <param name="Identifier">The Identifier of the global object</param>
        </member>
        <member name="M:Idefix.ITxApi.ITools.IGlobalObjectStore.Exist(System.String)">
            <summary>
            Check if a global object exist
            </summary>
            <param name="Identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Idefix.ITxApi.ITools.IGlobalObjectStore.Clear">
            <summary>
            Remove all global objects in the global store
            </summary>
        </member>
    </members>
</doc>
